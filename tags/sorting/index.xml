<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sorting on</title><link>https://reecemcmillin.github.io/quartz/tags/sorting/</link><description>Recent content in sorting on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://reecemcmillin.github.io/quartz/tags/sorting/index.xml" rel="self" type="application/rss+xml"/><item><title>Bubble Sort</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Bubble-Sort/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Bubble-Sort/</guid><description>Bubble sort (also known as sinking sort) works by repeatedly swapping adjacent elements until the full list is sorted.
Pseudocode 1 2 def bubble_sort(items: List[Comparable]): Analysis Recurrence Relation: $T(n) = T(n - 1) + (n - 1)$</description></item><item><title>Counting Sort</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Counting-Sort/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Counting-Sort/</guid><description>Overview Counting Sort is an sorting algorithm that uses keys of small positive integers.
Analysis Given the following:
$n$ is the total number of elements $k$ is the range of elements (largest element - smallest elements) Complexity:</description></item><item><title>Insertion Sort</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Insertion-Sort/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Insertion-Sort/</guid><description>Explanation The general strategy is to maintain an unsorted and a sorted section of the input array. At each stage, select the last element from the unsorted portion and place it into the correct position in the sorted portion.</description></item><item><title>Merge Sort</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Merge-Sort/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Merge-Sort/</guid><description>Merge Sort uses [[CS404 - Algorithms/Ideas/Divide and Conquer]] to sort arrays.
At each step, the original array is divided into two halves.</description></item><item><title>Quicksort</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Quicksort/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Quicksort/</guid><description>Overview Best Case: $O(n \lg{n})$ Average Case: $O(n \lg n)$ Worst Case: $O(n^2)$ Quicksort divides an array into subarrays by selecting a pivot element using [[CS404 - Algorithms/Ideas/Divide and Conquer]].</description></item></channel></rss>