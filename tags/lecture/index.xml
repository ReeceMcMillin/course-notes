<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lecture on</title><link>https://reecemcmillin.github.io/quartz/tags/lecture/</link><description>Recent content in lecture on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://reecemcmillin.github.io/quartz/tags/lecture/index.xml" rel="self" type="application/rss+xml"/><item><title>2022-10-28</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-28/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-28/</guid><description>Logistics Overview of [[CS441 - Programming Languages/Wiki Project/Wiki Project - SQL]] Need to set an exam date soon Chapters 6 and 7 are fair game for quizzes Definitely some garbage collection material on exam 2 Lecture Garbage Collection Mark and Sweep Mark everything as garbage Walk the heap, anything we reach is not garbage (clear the mark) All garbage blocks get moved to the free list Problem: doesn&amp;rsquo;t address fragmentation Solution: Stop &amp;amp; Copy Stop and Copy similar to mark and sweep, but as we find reachable (live) memory, we copy it down to the region of the stack to build a non-fragmented region of live heap memory.</description></item><item><title>ENV110 - Lecture 20</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Lectures/Lecture-20/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Lectures/Lecture-20/</guid><description>Three States of Water &amp;amp; Energy Transfer Release Absorption Freezing Melting Condensing Evaporating Depositing Sublimiation [!</description></item><item><title>2022-10-26</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</guid><description>Recap Dangling References [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Tombstones | Tombstones]] ( Wikipedia) [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types]] Rather than pointing directly to a value, we use [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Locks and Keys | Locks and Keys]] ( Wikipedia) Handy if we&amp;rsquo;re only ever allocating pointers on the heap, otherwise not so much [[CS441 - Programming Languages/8 - Composite Types/Garbage Collection]]</description></item><item><title>2022-10-26</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Lectures/2022-10-26/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Lectures/2022-10-26/</guid><description>Independence $$ P(A \wedge B) = P(A) \cdot P(B) $$ $$ \begin{align*} P(A \mid B) &amp;amp;= P(A)\ P(B \mid A) &amp;amp;= P(B) \end{align*} $$</description></item></channel></rss>