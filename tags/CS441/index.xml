<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS441 on</title><link>https://reecemcmillin.github.io/quartz/tags/CS441/</link><description>Recent content in CS441 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://reecemcmillin.github.io/quartz/tags/CS441/index.xml" rel="self" type="application/rss+xml"/><item><title>2022-10-26</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</guid><description>Recap Dangling References [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Tombstones | Tombstones]] ( Wikipedia) [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types]] Rather than pointing directly to a value, we use [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Locks and Keys | Locks and Keys]] ( Wikipedia) Handy if we&amp;rsquo;re only ever allocating pointers on the heap, otherwise not so much [[CS441 - Programming Languages/8 - Composite Types/Garbage Collection]]</description></item></channel></rss>