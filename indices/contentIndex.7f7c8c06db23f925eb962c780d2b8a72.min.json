{"/":{"title":"Reece McMillin | Notes","content":"\n# Overview\n\nThis is a collection of my course notes written in Obsidian.\n\n# About Me\n\nI'm currently a computer science student at UMKC working on financial exchange technology.\n\n# Courses\n\n* [[ENV110 - Environmental Science/Overview | ENV110 - Understanding the Earth]]\n* [[CS404 - Algorithms/Overview | CS404 - Introduction to Algorithms]]\n* [[CS441 - Programming Languages/Overview | CS441 - Programming Languages]]\n* [[CS461 - Artificial Intelligence/Overview | CS461 - Introduction to Artificial Intelligence]]\n\n\n","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/CS404-Algorithms/":{"title":"CS404 - Introduction to Algorithms","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/":{"title":"Algorithms","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Bubble-Sort":{"title":"Bubble Sort","content":"\n**Bubble Sort** (also known as *sinking sort*) works by repeatedly swapping adjacent elements until the full list is sorted.\n\n# Analysis\n\n**Recurrence Relation**: $T(n) = T(n - 1) + (n - 1)$\n\n| | Worst Case | Average Case | Best Case | \n|-|-|-|-| \n| Comparisons | $O(n^2)$ | $O(n^2)$ | $O(n)$ |\n| Swaps | $O(n^2)$ | $O(n^2)$ | $O(1)$ |\n| Space | $O(n)$ | | |\n\nBubble sort is typically [[CS404 - Algorithms/Ideas/Stable (Sorting)|stable]].","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Counting-Sort":{"title":"Counting Sort","content":"\n# Overview\n\n**Counting Sort** is a sorting algorithm that uses keys of small positive integers.\n\n# Analysis\n\nGiven the following:\n* $n$ is the total number of elements\n* $k$ is the range of elements (largest element - smallest elements)\n\nComplexity:\n* **Time**: $O(n + k)$\n* **Space**: $O(k)$\n\nGood to know:\n* Worst case is when data is skewed and range is large.\n* Best case is when all elements are the same.\n* Average case is when $n$ and $k$ are equally dominant.\n\nCounting sort is *typically* [[CS404 - Algorithms/Ideas/Stable (Sorting)|stable]]. The in-place variant of counting sort, however, is not.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Ford-Fulkerson":{"title":"Ford-Fulkerson","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Heap-Sort":{"title":"Heap Sort","content":"# Overview\n\nWhat is a **heap**?\n\n**Heap Sort** is a comparison-based sorting technique based on the [[CS404 - Algorithms/Data Structures/Heap#Binary Heap|binary heap]] data structure.\n\n# Qualities\n- In place\n\n# Analysis\n\n* **Worst Case**: $O(n\\lg{n})$\n* **Best Case**: $O(n \\lg{n})$\n\n![[Excalidraw/Drawing 2022-11-03 13.02.01.excalidraw.svg]]\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Insertion-Sort":{"title":"Insertion Sort","content":"\n# Explanation\n\nThe general strategy is to maintain an unsorted and a sorted section of the input array. At each stage, select the last element from the *unsorted* portion and place it into the correct position in the *sorted* portion.\n\n# Pseudocode\n\n```\nfor i = 1 to n\n\tkey = A[i]\n\tj = i - 1\n\n\twhile j \u003e= 0 and A[j] \u003e key:\n\t\tA[j + 1] = A[j]\n\t\tj = j - 1\n\tend while\n\tA[j + 1] = key\nend for\n```\n\n# Analysis\n\n**Worst Case**\n$$\n\\begin{align*}\nT(2) \u0026= 1\\\\\nT(n) \u0026= T(n - 1) + (n - 1)\\\\\nT(n) \u0026\\in O(n^2)\n\\end{align*}\n$$\n\n**Best Case**\n$$\n\\begin{align*}\nT(2) \u0026= 1\\\\\nT(n) \u0026= T(n - 1) + 1\\\\\nT(n) \u0026\\in O(n)\n\\end{align*}\n$$\n\nInsertion sort is a [[CS404 - Algorithms/Ideas/Stable (Sorting)|stable]] algorithm, meaning it doesn't change the relative order of equal elements.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Kruskals-Algorithm":{"title":"Kruskal's Algorithm","content":"\n**Kruskal's Algorithm** is a [[CS404 - Algorithms/Ideas/Greedy]] algorithm to build a minimum spanning tree by adding edges one by one into a growing spanning tree.\n\n1. Sort the edges with respect to their weights.\n2. Start adding edges that don't form a cycle","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Merge-Sort":{"title":"Merge Sort","content":"\n**Merge Sort** uses the [[CS404 - Algorithms/Ideas/Divide and Conquer|divide and conquer]] paradigm to sort arrays.\n\nAt each step, the original array is divided into two halves. This continues recursively until the size of each subarray becomes 1.\n\n## Analysis\n\nGiven a list of $n$ items:\n* It takes $\\Theta(1)$ time to split the list into two lists of (approximate) size $\\frac{n}{2}$.\n* It takes $\\Theta(n)$ time to *merge* the lists back together.\nThis gives us a total problem size of $T(n) = 2T(\\frac{n}{2}) + \\Theta(n)$.\n\n**Worst Case**: $\\Theta(n \\lg{n})$\n\nMerge sort is typically [[CS404 - Algorithms/Ideas/Stable (Sorting)|stable]].\n\n## Pseudocode\n\n```python\ndef MergeSort(A, p, r):\n\tmidpoint = \n\tif p \u003c r:\n\t\tmid = floor((p + r) / 2)\n\telse:\n\t\tmid = \n\tMergeSort(A, p, mid)\n\tMergeSort(A, mid + 1, r)\n\tMergeSort(A, p, mid, r)\n```","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Prims-Algorithm":{"title":"Prim's Algorithm","content":"\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Algorithms/Quicksort":{"title":"Quicksort","content":"\n# Overview\n\n* **Best Case**: $O(n \\lg{n})$\n* **Average Case**: $O(n \\lg n)$\n* **Worst Case**: $O(n^2)$\n\nQuicksort divides an array into subarrays by selecting a pivot element using [[CS404 - Algorithms/Ideas/Divide and Conquer]].\n\nWhile dividing the array, the pivot element should be positioned in such a way that elements less than the pivot are kept on the left side and elements greater than the pivot are kept on the right side.\n\nThe left and right subarrays are also divided using the same approach. This process continues until each subarray contains a single element, which is *trivially sorted*.\n\nFinally, subarrays are recombined to form a sorted array.\n\n# Complexity\n\nTo analyze quicksort, we need to consider the best- and worst-case *partition* behavior.\n\nGiven perfectly balanced partitions at each stage, we get the following recurrence relation:\n$$T(n) = 2T\\left(\\frac{n}{2}\\right) + \\Theta(n)$$\nBy the [[CS404 - Algorithms/Divide and Conquer/Master Theorem]], this gives $T(n) = \\Theta(n \\lg{n})$.\n\nIn the worst case, partitioning could produce one subproblem of size $(n - 1)$ and another of size $0$. This would produce the following recurrence relation:\n$$T(n) = T(n-1) + \\Theta(n)$$\nUsing the [[CS404 - Algorithms/Divide and Conquer/Substitution Method|subsitution method]], we get $T(n) = \\Theta(n^2)$.\n\n\n# Explanation\n\nYou can think of the *pivot* as the only sorted element.\n* We know that numbers to the left are less than the pivot, but they may as well be unsorted. Same for the right.\n\n1. Choose the highest index value as pivot\n2. Take two variables to point to the left/right of the list (excluding pivot)\n3. Left points to the *low* index\n4. Right point sto the high index\n5. While value at left is less than pviot, move right\n6. While value at right is greater than pivot, move left\n\n# Notes\n1. Quicksort is **in-place**\n2. Quicksort is **not** [[CS404 - Algorithms/Ideas/Stable (Sorting)|stable]].[^1]\n\n[^1]: This depends on the partitioning scheme.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Data-Structures/":{"title":"Data Structures","content":"\n- [[CS404 - Algorithms/Data Structures/Array]]\n- [[CS404 - Algorithms/Data Structures/Binary Tree]]\n- [[CS404 - Algorithms/Data Structures/Heap]]\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Data-Structures/Array":{"title":"Array","content":"\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Data-Structures/Binary-Tree":{"title":"Binary Tree","content":"\n**Full (Proper)**: every node other than the leaves has exactly two children.\n**Complete**: Every level, except possibly the last, is completely filled. All the leaves must be as far left as possible.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Data-Structures/Heap":{"title":"Heap","content":"\n# Overview\n\nA **heap** is an almost-complete tree that satisfies one of the following heap properties.\n\n## Max Heap\nFor any given node $C$, if $P$ is a parent of $C$, then the key (the value) of $P$ is **greater than or equal to** the key of $C$.\n\n## Min Heap\nFor any given node $C$, if $P$ is a parent of $C$, then the key (the value) of $P$ is **less than or equal to** the key of $C$.\n\n# Operations\n* `create`\n\t* $n$ operations\n* `heapify`\n\t* create a heap (restore the heap property) out of a given array.\n\t* modify the complete [[CS404 - Algorithms/Data Structures/Binary Tree]] to become a heap\n\t* `sift-up`\n\t\t* move a node up in the tree (typically after an insert) until it's at the proper level.\n\t* `sift-down`\n\t\t* move a node *down* in the heap (typically after a delete/replace) until it's at the proper level.\n\n# Types\n## Binary Heap\n\nA complete [[CS404 - Algorithms/Data Structures/Binary Tree]] has an interesting property that we can use to find the children and parents of any node.\n\nIf the index of any element in the array is $i$, the element at index $2i+1$ is the *left* child and the element at $2i+2$ is the right child.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/":{"title":"Divide \u0026 Conquer","content":"\nPart of [[CS404 - Algorithms/Overview]]","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Akra-Bazzi-Theorem":{"title":"Akra-Bazzi Theorem","content":"\n# Overview\n\nThe **Akra-Bazzi Theorem** is a generalized version of the [[CS404 - Algorithms/Divide and Conquer/Master Theorem]] for solving recurrence relations.\n\n# Formula\n\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Master-Theorem":{"title":"Master Theorem","content":"\n**Note**: the [[CS404 - Algorithms/Divide and Conquer/Akra-Bazzi Theorem]] generalizes this strategy.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Recursion-Tree-Method":{"title":"Recursion Tree Method","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Substitution-Method":{"title":"Substitution Method","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Final-Exam":{"title":"Final Exam","content":"\n1. Be able to find the maximum flow of a graph using [[CS404 - Algorithms/Algorithms/Ford-Fulkerson]].\n2. Be able to find a minimum spanning tree of a graph using ","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Ideas/":{"title":"Ideas","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Ideas/Big-O-Notation":{"title":"Big O Notation","content":"\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Ideas/Divide-and-Conquer":{"title":"Divide and Conquer","content":"\nDivide and Conquer is an algorithm design paradigm that specializes in solving problems that can be solved recursively.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Ideas/Greedy":{"title":"Greedy","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Ideas/Stable-Sorting":{"title":"Stable (Sorting)","content":"\nA **stable** sort preserves the existing relative order between equal items.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Lectures/":{"title":"Lectures","content":"\n* [[CS404 - Algorithms/Lectures/2022-11-01]]\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Lectures/2022-11-01":{"title":"2022-11-01","content":"\n# Heap Sort\n\n[[CS404 - Algorithms/Algorithms/Heap Sort|Main Page]]\n\n## Trees/Graphs\n* A **free tree** is \n* A **rooted tree** is a tree in which a particular vertex is designated as the root.\n* An **undirected graph** \n* A **forest** is an undirected graph without simple circuits\n* **Parent**\n* **Child**\n* Vertices with the same parent are called **siblings**\n* Ancestors of a vertex (other than the root) are the vertices in the path from the root to the vertex.\n* The **descendants** of a vertex $v$ are those that have $v$ as an ancestor.\n* A vertex of a tree is called a **leaf** if it has no children.\n* Vertices that have children are called **intneral vertices**\n* If $a$ is a vertex in a tree, the **subtree** with $a$ as its root is the subgraph of the tree consisting of $a$ and its descendants and all edges incident to these descendants.\n* A rooted tree is called an $m$-ary tree if every internal vertex has *no more than* $m$ children.\n\t* The tree is called *full* if every internal vertex has *exactly* $m$ children.\n* A **binary tree** is an $m$-ary tree with $m = 2$.\n* An **ordered rooted tree** is a rooted tree where the children of each internal vertex are **ordered**.\n\t* Gharibi says we order in level-order, but there are different ordering strategies\n* Left and right child\n* The tree rooted at the left/right child are referred to as the left/right subtrees\n* The **level** of a vertex $v$ in a rooted tree is the length of the unique path from the root to $v$.\n* The **height** of a rooted tree is the maximum of the levels of vertices (the length of the longest path from the root to any vertex)\n* A rooted $m$-ary tree of height $h$ is **balanced** if *all* leaves are at levels $h$ or $h-1$.\n* There are at most $m^h$ leaves in an $m$-ary tree of height $h$.\n\t* Can we use this for unbalanced recursion trees?\n\t* If an $m$-ary tree of height $h$ has $l$ leaves, then $h \\geq \\lceil\\log_m{l}\\rceil$. If the mary tree is full and balanced, then $h = \\lceil\\log_m{l}\\rceil$.\n* A full m-ary tree with\n\t* n vertices has $i = \\frac{n - 1}{m}$ internal vertices and $l = \\frac{(m-1)n+1}{}$\n* Theorem: A tree with $n$ vertices has $n-1$ edges.\n\n# Midterm Logistics\n\n\u003e More at [[CS404 - Algorithms/Midterm Study]]\n\n* Everything covered up through today\n\t* Know how to order functions\n\t* Use logarithms to prove \n\t* Solve the recurrence relation of an algorithm\n\t\t* [[CS404 - Algorithms/Divide and Conquer/Substitution Method]]\n\t\t* [[CS404 - Algorithms/Divide and Conquer/Recursion Tree Method]]\n\t\t* [[CS404 - Algorithms/Divide and Conquer/Master Theorem]]\n* Assignment coming up (lasting rest of semester):\n\t* mention name of algorithm\n\t* definition\n\t* steps/pseudocode\n\t* stable or not\n* Short-answer questions, 2-3 points\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Lectures/2022-11-17":{"title":"2022-11-17","content":"\n# Maximum Flow\n\nA transport (...)\n1. The **source** has no incoming edges.\n2. The **sink** has no outgoing edges.\n3. The weight $C_{ij} \\geq 0$ of the directed edge $(i, j)$ is called the **capacity** of the edge.\n4. The **flow** $F_{ij}$ on each edge does not exceed the capacity of the edge $C_{ij}$.\n5. For every vertex $v$, the flow into $v$ equals the flow *out* of $v$ (conservation of flow).\n\nTheorem:\n\nGiven some flow in a network, the flow out of the source $A$ equals the flow into the sink $Z$.\n$$\\Sigma_i{(F_{A_i})} = \\Sigma_i{(F_{iZ})}$$\n\nThe [[CS404 - Algorithms/Algorithms/Ford-Fulkerson]] algorithm incrementally increases the value of a flow in stages, where at each stage some amount of flow is pushed along an augmenting path from the source to the sink.\n* Initially, the flow of each edge is set to 0.\n* At each stage, an augmenting path is computed and an amount of flow equal to the residual capacity is pushed along.\n* The algorithm terminates when the current flow does not admit an augmenting path.\n\nAnalyzing Ford-Fulkerson is a little tricky, because the algorithm doesn't specify the exact method of *finding* augmenting paths. Poor choices can greatly reduce the algorithm's speed.\n\n$O(f^* \\cdot m)$, where $f^*$ is the maximum flow and $m$ is the number of edges.\n\n# Minimum Spanning Tree\n\n\u003e [!WARNING] Final Exam\n\u003e \n\u003e We'll need to use Prim's algorithm to find a minimum spanning tree on the final.\n\n\nA **spanning tree** is a subet of a graph $G$ which has all the vertices covered with the minimum possible number of edges. Hence, a spanning tree *does not have cycles* and *it cannot be disconnected*.\n\nBy this definition, we can conclude that every connected, undirected graph $G$ has *at least one* spanning tree.\n\n\u003e [!NOTE]\n\u003e \n\u003e A tree with $n$ vertices always has $n - 1$ edges.\n\n\u003e [!NOTE] Note\n\u003e \n\u003e An acyclic graph is bipartite.\n\u003e \n\nA **minimum spanning tree** is a spanning tree with the lowest possible cost in a given graph.\n\n[[CS404 - Algorithms/Algorithms/Kruskal's Algorithm]] works best when we have a **sparse** graph.\n\n[[CS404 - Algorithms/Algorithms/Prim's Algorithm]] works best when we have a **dense** graph.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Math/":{"title":"Math","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Math/Proofs":{"title":"Proofs","content":"\n## Any polynomial in $n$ of degree $k$ is $\\Theta(n^k)$.\n\n**Proof** (fill this in soon)\n\n## $(\\lg{n})^k \\in O(n^\\epsilon)$ for $k, \\epsilon \u003e 0$\n\n**Proof** (fill this in soon)\n\n# $\\lg{(n!)} \\in \\Theta(n\\lg{n})$\n\n**Proof** (fill this in soon)\n\n## $1^k + 2^k + 3^k + \\dots + n^k \\in O(n^{k + 1})$\n\n**Proof** (fill this in soon)","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Midterm-Study":{"title":"CS404 Midterm Study","content":"\n1. Must know recurrence relation and time complexity of the following:\n\t* [[CS404 - Algorithms/Algorithms/Bubble Sort]]\n\t* [[CS404 - Algorithms/Algorithms/Insertion Sort]]\n\t* [[CS404 - Algorithms/Algorithms/Merge Sort]]\n\t* [[CS404 - Algorithms/Algorithms/Quicksort]]\n\t* [[CS404 - Algorithms/Algorithms/Counting Sort]]\n2. Be able to find the big O complexity of functions using the following methods.\n\t* [[CS404 - Algorithms/Divide and Conquer/Recursion Tree Method]]\n\t* [[CS404 - Algorithms/Divide and Conquer/Substitution Method]]\n\t* [[CS404 - Algorithms/Divide and Conquer/Master Theorem]]\n3. Memorize common sums and series along with their big O complexities.\n4. Make sure you understand how to solve all problems on each quiz.\n\t* [[CS404 - Algorithms/Quiz Problems/Quiz 1]]\n\t* [[CS404 - Algorithms/Quiz Problems/Quiz 2]]\n\n# Sunday Night Review\n\n* Iterative substitution\n\t* $T(n) = 2T(n - 1)$, $T(1) = 1$\n\t* $T(n) = 2^2 \\cdot T(n-2)$\n\t* $T(n) = 2^3 \\cdot T(n-3)$\n\t* $\\vdots$\n\t* Let $k = n-1$\n\t* $T(n) = 2^k \\cdot T(n-(n-1)) = 2^k \\cdot T(1)$\n\n## Algorithm Analysis\n* Definitions\n\t* Algorithm: a step-by-step method for solving some problem\n\t\t* Name\n\t\t* Input\n\t\t* Output\n\t\t* Steps (pseudocode)\n\t* Computational problem\n\t* Data structure\n\t* Program\n\t* Pseudocode\n\t\t* preferred due to its precision, structure, and universality\n\t\t* properties:\n\t\t\t* compact\n\t\t\t* easier to read/understand\n\t\t\t* can be used to prove correctness\n\t* Scalability: ability of a program to \n\t* Analyzing an algorithm\n\t\t* Running time is natural measure re: scalability\n\t\t* Why coul\n* Worst, average, best-case\n* asymptotic growth: a measure of how fast the output $f(n)$ grows as the input $n$ grows\n* memory complexity = space complexity\n* Specific algorithms\n\t* linear search\n* Geometric sums\n* *lots of logarithm identities in slides*\n* floor and ceiling\n\n* Data structures - know operations and *time complexity* of each, *go over zybooks questions*\n\t* array\n\t* queue (with circular array implementation)\n\t* buffer\n\t* stack\n\t* linked lists\n\t* trees\n\t* \n\nBig O: $f(n) \\leq c \\cdot g(n)$\nBig Omega: $f(n) \\geq c \\cdot g(n)$\n\n$$1 + a + a^2 + \\dots + a^n = \\frac{1=a^{n+1}}{1-a}$$\n$$1 + 2 + 4 + 8 + \\dots + 2^{n-1} = 2^n - 1 \\in O(2^n)$$\nsum 1 to n of $i^2 \\in O(n^3)$\n\n1. What properties make up the description of an algorithm?\n2. What benefits does pseudocode have over actual program code?\n3. What are some properties of good pseudocode?\n4. What are some primitive operations considered in algorithmic analysis?\n5. Why do we typically prefer to consider worst-case running time?\n6. Why is it difficult to measure average-case running time?\n7. What does it mean for a recurrence relation to be in *closed form*?\n8. Prove $20n^3 + 10n\\lg{n}+ 5 = O(n^3)$.\n9. Prove $n^3 + 2n + 5 = \\Omega(n^3)$.\n10. Prove that $4n^2 + 3n + 1 = \\Theta(n^2)$.\n11. For each of the following algorithms, provide the steps, recurrence relation, and complexity.\n\t1. Linear search\n\t2. Merge Sort\n12. What does it mean for a binary tree to be...\n13. For different sorting algorithms, know:\n\t* stability\n\t* in-place\n\t* recurrence relation (for both worst/best case)\n\n# Algorithms\n* maxmin\n* linear search\n* binary search\n\nJust want to clarify, when you ask for pseudocode\n\n8-9 questions, 5 pages, \n\n\nWrite T(n)\n\n```\nfor i = 0, i \u003c n-1, i++\n```\n\n# Big Questions\n* Definition for every algorithm\n* Pseudocode\n\t* name\n\t* input\n\t* output\n\t* steps\n* Time complexity\n* Recurrence relation","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Overview":{"title":"CS404 - Algorithms","content":"\nThis is a standard course on the basics of algorithm design and analysis.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Quiz-Problems/":{"title":"Quiz Problems","content":"\n* [[CS404 - Algorithms/Quiz Problems/Quiz 2]]","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Quiz-Problems/Quiz-1":{"title":"Quiz 1","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS404-Algorithms/Quiz-Problems/Quiz-2":{"title":"Quiz 2","content":"\n\u003cdetails\u003e\n\u003csummary\u003eWhat is the complexity of linear search?\u003c/summary\u003e\n\n\u003e The recurrence relation of linear search is $T(n) = T(n - 1) + 1$.\n\u003e \n\u003e This is basically just iteration - at each step, you just have a constant-time - $\\Theta(1)$ - comparison.\n\u003e $$T(n) \\in \\Theta(n)$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e \u003csummary\u003eTrue or false: Any polynomial in $n$ of degree $k$ is $\\Theta(n^2)$.\u003c/summary\u003e\n\n\u003e False, it's actually in $\\Theta(n^k)$.\n\u003e \n\u003e A good way to think about this problem is envisioning a polynomial like the following:\n\u003e $$3n^5 + n^4 + \\dots + 1$$\n\u003e This is obviously in $\\Theta(n^5)$, not $\\Theta(n^2)$.\n\u003e \n\u003e For a more rigorous proof, see [[CS404 - Algorithms/Math/Proofs#Any polynomial in $n$ of degree $k$ is $ Theta(n k)$.|here]].\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eTrue or false: $\\lg{(n!)} \\in \\Theta{(n \\lg{n})}$\u003c/summary\u003e\n\n\u003e True, see [[CS404 - Algorithms/Math/Proofs#lg{(n!)} in Theta(n lg{n})|here]] for proof.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eTrue or false: $\\lg{(n!)} \\in \\Omega{(n \\lg{n})}$\u003c/summary\u003e\n\n\u003e True by way of the above answer:\n\u003e $$\\lg{(n!)} \\in \\Theta{(n \\lg{n})}$$\n\u003e Proof [[CS404 - Algorithms/Math/Proofs#lg{(n!)} in Theta(n lg{n})|here]] if you're not convinced.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\u003csummary\u003eWhat is the recurrence relation and complexity of binary search?\u003c/summary\u003e\n\n\u003e This is relatively easy to memorize, but you can use the [[CS404 - Algorithms/Divide and Conquer/Master Theorem]] to verify if you like.\n\u003e \n\u003e $$\\begin{align*}\nT(n) \u0026= T\\left(\\frac{n}{2}\\right) + 1\\\\\nT(n) \u0026\\in O(\\lg{n})\n\\end{align*}$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eTrue or false: $1 + 2 + 3 + \\dots + n \\in O(n^2)$\u003c/summary\u003e\n\n\u003e True.\n\u003e \n\u003e $$1 + 2 + 3 + \\dots + n = \\frac{n(n+1)}{2} \\in \\Theta(n^2)$$\n\u003e \n\u003e Since the sum is in $\\Theta(n^2)$, it's also in $O(n^2)$.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003e$1^k + 2^k + 3^k + \\dots + n^k \\in O(n^{k + 1})$\u003c/summary\u003e\n\n\u003e True, see [[CS404 - Algorithms/Math/Proofs#$1 k + 2 k + 3 k + dots + n k in O(n {k + 1})$|here]] for proof.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the complexity of the MaxMin algorithm?\u003c/summary\u003e\n\n\u003e This is described better in the textbook, but the idea behind the algorithm is to iterate through an array *once*, making two comparisons against the current max/min at each stage for a total of $2n-2$ comparisons in the basic version.\n\u003e \n\u003e $$T(n) \\in O(n)$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the recurrence relation that describes the MaxMin algorithm?\u003c/summary\u003e\n\n\u003e $$T(n) = 2T\\left(\\frac{n}{2}\\right) + 2$$\n\u003e \n\u003e I don't remember covering a recursive version of this algorithm, but the shape of the above relation is pretty much in line with the \"linear + 2 comparisons\" idea above.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the big O complexity of $1 + \\frac{1}{2} + \\frac{1}{3} + \\dots + \\frac{1}{n}$?\u003c/summary\u003e\n\n\u003e I'm not sure this is a totally rigorous explanation, but I estimated it like this:\n\u003e \n\u003e $$\\sum_{i=1}^n{\\frac{1}{i}} \\approx \\int_1^n{\\frac{1}{x}} \\mathrm{dx} = \\lg{n} + c$$\n\u003e \n\u003e which would give $O(\\lg{n})$.\n\u003e \n\u003e More rigorously, this is a partial sum of the [Harmonic series](https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)). We can describe the $n^{th}$ Harmonic number (the partial sum of the series at some $n$) like this:\n\u003e $$H_n = \\ln{n} + \\gamma + \\frac{1}{2n} - \\epsilon_n$$\n\u003e * $\\gamma$ (gamma) is a constant.\n\u003e * $\\frac{1}{2n}$ grows to 0.\n\u003e * $0 \\leq \\epsilon_n \\leq \\frac{1}{8n^2}$, which also grows to 0.\n\u003e \n\u003e That means $\\ln{n}$ defines the growth rate. Changing the base back to 2 and picking $n_0$ and $c$ to prove this is $O(\\lg{n})$ and $\\Omega(\\lg{n})$ (and therefore also $\\Theta(\\lg{n})$) should be straightforward.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\u003csummary\u003eList the big O complexity of $\\sum_{i=1}^{n}{(\\lg{i})}$.\u003c/summary\u003e\n\n\u003e $O(n \\lg n)$\n\u003e \n\u003e I haven't taken the time to write out either proof yet, but I think this is just the $\\lg{(n!)}$ problem in disguise.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eList the big O complexity of $\\sum_{i=1}^{n}{(i)}$.\u003c/summary\u003e\n\n\n\u003e This is just the Euler sum.\n\u003e $$\\frac{n(n+1)}{2} \\in O(n^2)$$\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the recurrence relation of [[CS404 - Algorithms/Algorithms/Insertion Sort]]?\u003c/summary\u003e\n\n\u003e $$T(n) = T(n - 1) + n$$\n\u003e \n\u003e This is *slightly* different in the notes, given as $T(n) = T(n - 1) + (n - 1)$. That's not meaningful for the overall complexity of $O(n^2)$.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eList the big O complexity of $T(n) = 2T(n-1)$, where $T(0) = 1$.\u003c/summary\u003e\n\n\u003e I envisioned this as a binary tree where $T(0)$ was the root. That'd give $T(n)$ describe the total number of nodes present *up to and including* level $n$. Since a binary tree of height $h$ can have a maximum of $2^h - 1$ nodes, this would fall on the order of $O(2^n)$.\n\u003e\n\u003e $$T(n) \\in O(2^n)$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eList the big O complexity of the following: $\\sum_{i=1}^{n}{\\left[\\left(\\frac{1}{2}\\right)^i\\right]}$\u003c/summary\u003e\n\n\u003e There are a few different ways to approach this. The one I like best is multiplying the whole series by 2 and rearranging things.\n\u003e $$\n\t\\begin{align*}\n\t\t\ts_n \u0026= \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\dots + \\frac{1}{2^n}\\\\\\\\\n\t\t\t2s_n \u0026= \\frac{2}{2} + \\frac{2}{4} + \\frac{2}{8} + \\dots + \\frac{2}{2^n}\\\\\\\\\n\t\t\t\u0026= 1 + \\left[ \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\dots + \\frac{1}{2^{n-1}}\\right]\\\\\\\\\n\t\\end{align*}\n\t$$\n\u003e Notice how that last term is just $s_n$ minus the last term, so...\n\u003e $$\n\t\\begin{align*}\n\t\t2s_n \u0026= 1 + \\left[ s_n - \\frac{1}{2^n} \\right]\\\\\\\\\n\t\ts_n \u0026= 1 - \\frac{1}{2^n}\n\t\\end{align*}\n\t$$\n\u003e As $n$ goes to infinity, $\\frac{1}{2^n} \\sim 0$, so our overall complexity trends towards 1 as $n$ gets larger. Since that's a constant, the overall complexity is $\\Theta(1)$!\n\u003c/details\u003e","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/":{"title":"CS441 - Programming Languages","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/10-Data-Abstraction-and-Object-Orientation/":{"title":"10 - Data Abstraction and Object Orientation","content":"\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/10-Data-Abstraction-and-Object-Orientation/Dynamic-Dispatch":{"title":"Dynamic Dispatch","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/10-Data-Abstraction-and-Object-Orientation/Dynamic-Method-Binding":{"title":"Dynamic Method Binding","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/10-Data-Abstraction-and-Object-Orientation/Metaclasses":{"title":"Metaclasses","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/10-Data-Abstraction-and-Object-Orientation/Object-Orientation":{"title":"Object Orientation","content":"\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/10-Data-Abstraction-and-Object-Orientation/Virtual-Method-Table":{"title":"Virtual Method Table","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/13-Concurrency/":{"title":"13 - Concurrency","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/2-Syntax-and-Parsing/":{"title":"Syntax \u0026 Parsing","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/3-Names-Scopes-and-Bindings/":{"title":"Names, Scopes, \u0026 Bindings","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/4-Semantic-Analysis/":{"title":"Semantic Analysis","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/4-Semantic-Analysis/Translation-Schemes":{"title":"Translation Schemes","content":"\n# General Categories\n* **Oblivious**: exploits no special knowledge of the parse tree or attribute grammar.\n* **Dynamic**: tails attribute evaluation order to the *structure* of a given parse tree.\n\t* Typically performs a topological sort of the attribute flow graph and then invokes evaluation rules in an order consistent with the sort.\n* **Static**: based on analysis of the structure of the attribute grammar.\n\n## Action Routines\n* **Action routines** are semantic functions that the programmar instructs the compiler to execute at a particular point in the parse.\n* ","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/6-Control-Flow/":{"title":"Control Flow","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/6-Control-Flow/Tail-Recursion":{"title":"Tail Recursion","content":"\n\n\n\n\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/":{"title":"7 - Type Systems","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Composite-Types":{"title":"Composite Types","content":"\u003e [!attention]\n\u003e \n This is covered in significantly more detail in [[CS441 - Programming Languages/8 - Composite Types/]]\n## Records\nRecords were introduced by [[CS441 - Programming Languages/Languages/Cobol]], similar to tuple\n* Cartesian product of its components\n\n## Unions\n*Variant* records (unions) differ from records\n```c\nunion widget {\n\tint    n;\n\tdouble x;\n\tchar   ch;\n}\n\nwidget character = 'c';\nint x = character + 1; // sure, why not\n```\n* Problem: compiler doesn't discriminate between members of unions\n\n## Sets\n* Powerset of its elements\n* Introduced by [[CS441 - Programming Languages/Languages/Pascal]]\n\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Enumeration-Types":{"title":"Enumeration Types","content":"\nIntroduced in [[CS441 - Programming Languages/Languages/Pascal]]\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Nominal-Type-System":{"title":"Nominal Type System","content":"\nA type system is considered **nominal** if [[CS441 - Programming Languages/7 - Type Systems/Type Compatibility]] and [[CS441 - Programming Languages/7 - Type Systems/Type Equivalence]] are both determined by explicit declarations (the name) of the type.\n\nThis is in contrast to the [[CS441 - Programming Languages/7 - Type Systems/Structural Type System]] approach.","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Structural-Type-System":{"title":"Structural Type System","content":"","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Subrange-Types":{"title":"Subrange Types","content":"\nIntroduced in [[CS441 - Programming Languages/Languages/Pascal]]\nA subrange is a contiguous subset of the values of some discete base type (the parent)\n\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Type-Compatibility":{"title":"Type Compatibility","content":"\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Type-Conversions-Casts":{"title":"Type Conversions \u0026 Casts","content":"\n3 situations\n\n1. Types have the same internal structure\n2. Types have different ranges of values, but there's some overlap\n3. Internal *representation* is different, blue values overlap in some way.\n\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Type-Equivalence":{"title":"Type Equivalence","content":"\nHow do we determine if two things are the same type?\n1. **Structural Equivalence**: two types have the same components put together the same way.\n2. **Name Equivalence**: types defined by different names are probably meant to be incompatible.\n\n## Name Equivalence\n\n\u003e [!question]\n\u003e \n\u003e ```c\n\u003e typedef old_type new_type;\n\u003e ```\n\u003e \nAre `old_type` and `new_type` distinct?\n\n\nA language in which alias types are considered..\n* distinct? ***strict* name equivalence**\n* the same? ***loose* name equivalence**\n\n","lastmodified":"2022-11-21T22:32:27.85632739Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/":{"title":"8 - Composite Types","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Arrays":{"title":"Arrays","content":"\n## Overview\n* Arrays are the most common composite type, go back to Fortran I.\n* **Idea**: map a discrete index type to a component or element type.\n## Slicing\n\n## Dimensions, Bounds, Allocation\n* *Static* allocation is pretty simple, just allocate some amount of space at startup which is known at compile time.\n* *Dynamic* allocation is a little more tough\n\t* **Dope Vector**\n\t\t* ![[images/Drawing 2022-10-21 11.35.46.excalidraw.png]]\n\t\t* [Dope Vector - Wikipedia](https://en.wikipedia.org/wiki/Dope_vector)\n\n## Heap Allocation\n* Arrays that can change size or shape at arbitrary times are said to be *fully dynamic*\n* If number of dimensions is statically known, the dope vector can be stored on the *stack*.\n* Unless garbage collection is in place, heap memoyr must be reclaimed when space is no longer used.\n\t* Failing to do so causes a *memory leak*.\n\n## Memory Layout\n* 1-Dimensional: elements are layed out contiguously\n\t* May result in small holes so elements align on word boundaries\n* 2-dimensional: can either use *row-major* or *column-major* order.\n\t* **Row-Major**: Elements of first *row* are laid out contiguously, followed by second row, third, etc.\n\t* **Column-Major**: Elements of the first *column* are contiguous, followed by second column, third, etc.\n\n### Row-Pointer Layout\n* Some languages only requier rows to be contiguous, but each row can be anywhere in memory.\n* An auxiliary array of pointers or references is created, one per row.\n\n## Address Calculation\nAt *some* point we're going to need to translate an array reference to a specific address. #study\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Dope-Vector":{"title":"Dope Vector","content":"\n**Dope vectors** are used by the compiler to hold information about the sizing and memory layout of data objects (especially [[CS441 - Programming Languages/8 - Composite Types/Arrays|arrays]], or composite types which *contain* arrays).\n\nSay we have an array of 10 elements, each 8 bytes. We need $10 \\cdot 8 = 80$ bytes to store the array in memory, but the array itself doesn't have any place to hold that information. That's where the *dope vector* comes in. Putting this sort of structure in place can also ","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Garbage-Collection":{"title":"Garbage Collection","content":"\n# Reference Counting\n\n**Idea**: keep a count of references pointing to objects in memory, deallocate the memory once that count reaches 0.[^1].\n\nReference counts can work well if we're using a **tombstone** system.\n\n[^1]: This isn't so simple! Cyclic pointers break basic reference counts.\n\n# Smart Pointers\n* `unique_ptr` guarantees no other name points to the object.\n* `shared_ptr` manages reference counting\n* `weak_ptr` does **not** use reference counting\n\n# Other Methods\n\n## Tracing Collectors\n\n### Mark and Sweep\n\n**Idea**: start at some pointer and follow it through the heap\n\n1. Initially mark **everything** as potentially garbage.\n2. Walk through the whole reference tree.\n3. At the end of the process, anything you haven't been able to reach is *still* garbage - go ahead and deallocate!\n\n![[Excalidraw/Drawing 2022-10-26 11.23.45.excalidraw.png]]\n\n**Problems**: requires a stack as large as the longest path through the heap #study\n\n### Pointer Reversal\n\n**Problems**: doesn't do anything about fragmentation\n\n### Stop and Copy\n\n1. Divide the heap into two areas of roughly equal size\n2. Use one half for **all** allocation.\n\t* When this half is nearly full, perform a mark/sweep\n3. Copy each *reachable* block into the other half.\n\t* Since we have total knowledge over what's reachable, we can accomplish allocation with no external fragmentation\n\t* Overhead is proportional to the number of non-garbage blocks we have.","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/List":{"title":"List","content":"\nIn garbage collected languages, list elements typically have to be the same type.\n\nTwo pointers:\n1. data\n2. next node in list\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Pointers-and-Recursive-Types":{"title":"Pointers and Recursive Types","content":"\nRecords of some type $T$ can easily contain a reference to another record of $T$.\n* Reference model? No big deal, variables are *already* references\n* Value model? This is when you need the idea of a *pointer*, introduced in [[CS441 - Programming Languages/Languages/PL-I]]\n\n## Pointers \u0026 Arrays in C\n\n```c\nint n;      // integer\nint *p, *q; // 2 pointers to integer\nint b[20];  // integer array\n```\n\n## Stack Smashing\nC's lack of bounds checking is a *major* source of program bugs and security holes.\n* **Buffer overrun** attacks\n* **Stack-smashing** attacks\n\n## Dangling References\nA **dangling reference** is a live pointer to an object that's no longer valid.\n\n### Tombstones\n* When an object is reclaimed, the indirection word is marked with a value invalidating future references to it.\n### Locks and Keys\n* Every pointer and object on the heap has a word added to it.\n* These words must match for the pointers to be valid.\n* This is simple to implement, but only works for objects on the heap.","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Sets":{"title":"Sets","content":"\nA **set** is an unordered collection of distinct values, usually of the same type.\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Strings":{"title":"Strings","content":"\n* Some languages just view strings as arrays of characters\n* Others provide features like substring extraction \u0026 pattern matching with regular expressions\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/9-Subroutines-and-Control-Abstraction/":{"title":"9 - Subroutines and Control Abstractions","content":"\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/9-Subroutines-and-Control-Abstraction/Coroutines":{"title":"Coroutines","content":"\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/9-Subroutines-and-Control-Abstraction/Dope-Vector":{"title":"Dope Vector","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/9-Subroutines-and-Control-Abstraction/Exceptions":{"title":"","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Definitions":{"title":"Definitions","content":"\n# 1 - Introduction\n* scanner\n* lexer\n* parser\n* lexical analysis\n* semantic analysis\n* parse tree\n* syntax tree\n* static semantics\n* dynamic semantics\n# 2 - Syntax\n* regular expression\n- Kleene closure\n- terminal\n- nonterminal\n- BNF\n- metasymbol\n- production\n- sentential form\n- syntax analysis\n- token\n- keyword\n- reserved word\n- LL(n)\n- LR(n)  \n* predictive parser\n* bottom-up parser\n* shift-reduce parser\n* recursive descent parser\n* epsilon production\n# 3 - Names, Scopes, and Binding\n* binding time\n* referencing environment\n* compile-time constant\n* elaboration-time constant\n* prologue/epilogue\n* stack frame\n* frame pointer\n* displacement addressing\n* heap fragmentation\n* free list\n* buddy system\n* Fibonacci heap\n* scope\n* forward reference\n* inheritance\n* aliases\n# 4 - Semantic Analysis\n* unsafe optimization\n* speculative optimization\n* conservative compiler\n* optimistic compiler\n* attribute grammar test\n* semantic function\n* S-attributed grammar\n* L-attributed grammar\n* well-defined attribute grammar","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Final-Exam-Review":{"title":"","content":"# Chapter 10\n\n1. What order must destructors be called in \n2. Some languages don't let you extend an existing class. What's a reason why you might *want* to?\n\n# Chapter 13\n\n1. What does *vector-parallel* mean?\n2. What is the difference between *implicit* and *explicit* parallelism?\n3. Describe the process of using timer signals for preemptive multithreading.\n4. Why do thread libraries typically disable signal delivery during scheduler calls?\n5. How does a **reader-writer lock** work?","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/":{"title":"Specific Languages","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/ALGOL":{"title":"ALGOL","content":"\n# ALGOL-W\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/C":{"title":"","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/C-Sharp":{"title":"C#","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Clu":{"title":"Clu","content":"\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Cobol":{"title":"Cobol","content":"\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Eiffel":{"title":"Eiffel","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Euclid":{"title":"Euclid","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/LISP":{"title":"LISP","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/ML":{"title":"ML","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Modula-3":{"title":"Modula-3","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/PL-I":{"title":"PL-I","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Pascal":{"title":"Pascal","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Prolog":{"title":"Prolog","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Python":{"title":"Python","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Ruby":{"title":"Ruby","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/SIMULA":{"title":"SIMULA","content":"\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Languages/Smalltalk":{"title":"Smalltalk","content":"# Overview\nFirst fully object-oriented language, used a \"message-based\" programming model.\n\n# Legacy\n\n## Influence\n\nSmalltalk changed the entire world of \n\n## Issues\n\nSmalltalk wasn't really as used as its influence would suggest.\n\n* Dynamic typing made it slow to report errors.\n* Terminology and syntax were both unusual.\n* Language was tightly integrated into a particular GUI, so porting was difficult","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/":{"title":"Lectures","content":"\nPart of [[CS441 - Programming Languages/Overview]]\n\n* [[CS441 - Programming Languages/Lectures/2022-10-26]]\n* [[CS441 - Programming Languages/Lectures/2022-10-28]]\n* [[CS441 - Programming Languages/Lectures/2022-10-31]]\n* [[CS441 - Programming Languages/Lectures/2022-11-02]]\n* [[CS441 - Programming Languages/Lectures/2022-11-04]]\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-10-26":{"title":"2022-10-26","content":"\n# Recap\n\n* Dangling References\n\t* [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Tombstones | Tombstones]] ([Wikipedia](https://en.wikipedia.org/wiki/Tombstone_(programming)))\n\t\t* [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types]]\n\t\t* Rather than pointing directly to a value, we use \n\t* [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Locks and Keys | Locks and Keys]] ([Wikipedia](https://en.wikipedia.org/wiki/Locks-and-keys))\n\t\t* Handy if we're only ever allocating pointers on the heap, otherwise not so much\n* [[CS441 - Programming Languages/8 - Composite Types/Garbage Collection]]\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-10-28":{"title":"2022-10-28","content":"\n# Logistics\n- Overview of [[CS441 - Programming Languages/Wiki Project/Wiki Project - SQL]]\n- Need to set an exam date soon\n- Chapters 6 and 7 are fair game for quizzes\n- Definitely some garbage collection material on exam 2 \n- \n\n# Lecture\n## Garbage Collection\n- Mark and Sweep\n\t- Mark everything as garbage\n\t- Walk the heap, anything we reach is *not* garbage (clear the mark)\n\t- All garbage blocks get moved to the *free list*\n\t- **Problem**: doesn't address fragmentation\n\t- **Solution**: Stop \u0026 Copy\n- Stop and Copy\n\t- similar to mark and sweep, but as we find reachable (live) memory, we copy it down to the region of the stack to build a non-fragmented region of live heap memory.\n\t- Mark and sweep is one of stop and copy's *building blocks*\n- Generational collection\n\t- This is basically stop and copy with a twist\n\t- Stop and copy ends up with a nice defragmented heap\n\t- With each block, also keep track of which cycle we moved it there on.\n\t\t- If it's lived more than a couple 1 or 2 cycles, move it into a special *long-term* region where we presumably won't need to rearrange things as often.\n\t\t- Key idea being that program entities tend to either be very transient or very long-lived\n\t- Requires a pretty strong type system - we benefit quite a bit from static knowledge of the layout of everything in memory\n\t- What if our language isn't strongly typed?\n\t\t- not likely that any random bit of data would happen to have a bit pattern that *looks like* a pointer\n\t\t- step through static data one step at a time, if it *looks* like a pointer we go ahead and mark that memory as reachable\n\t\t- we aren't checking type\n\t\t- will never reclaim a useful block *as long as the programmer never obscures a pointer*\n- Reference counting\n\t- Have to keep an extra piece of data on *every object* - this ~~is~~ can be pretty significant overhead\n\t- **Problem**: can't handle cycles\n* Lists\n\n## Extra - MapReduce\n\nMap an operation over every element in a list, then fold a particular operation over the mapped list (reduce).\n\n```scheme\n\u003e (map sqr '(1 2 3 4 5))\n\u003e '(1 4 9 16 24)\n\u003e (reduce + (map sqr '(1 2 3 4 5)))\n\u003e 54\n```\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-10-31":{"title":"2022-10-31","content":"\n# Logistics\n* [[CS441 - Programming Languages/Wiki Project/Wiki Project - SQL]]\n\t* Page now editable, link at above page\n* Exam will go through Chapter 8\n\n# Chapter 9\n\n[[CS441 - Programming Languages/9 - Subroutines and Control Abstraction/_index|Main Link]]\n\n## Stack Layout (Review)\n\nEach subroutine gets a **stack frame** at the top of the stack with\n* arguments\n* return values\n* bookkeeping information\n\t* return addresses\n\t* saved registers\n* local and temporary variables\n* stack pointer contains the address of the last used location at the top of the stack (or first unused location depending on convention)\n* Frame pointer register contains an address *within* the frame\n\n## Calling Sequences\n\nThe code executed by the caller immediately before and after a function call is the **calling sequence**.\n* **Prologue**:\n\t* Parameters must be passed\n\t* Save return address\n\t* Update program counter\n\t* Stack pointer changed to allocate space\n\t* save registers (including frame pointer) that contain values that may be overwritten\n\t* initialize data/objects that require it\n* **Epilogue**: undo everything in the reverse order\n* All the code in the prologue is attached to the body of the subroutine\n* **Problem**: we have a fixed number of registers. How do we know which registers we need to save?\n\t* Ideally, save only what's live in the caller *and* what will be needed by the callee.\n\t\t* This is usually difficult or impossible to determine (because of separate compiilation).\n\t* Ideas:\n\t\t* Caller saves anything they'll need\n\t\t* Callee saves and restores anything it's going to overwrite\n\n## Maintaining Static Links\n\nThe caller has to do *some* of the work to maintain static chain. Usually the caller computes the callee's static link and passes it as an extra (hidden) parameter.\n* Two subcases:\n\t* Callee nested *inside* the caller\n\t* Callee is $k \\geq 0$ scopes \"out\".\n\t\t* Every scope that sur\n* Generally want to precompute at compile time\n\t* Some languages use dynamic scoping which traces back through functions that have actually been called, but not common anymore\n\n\u003e [!Warning] EXAM\n\u003e \n\u003e Memorize the stack frame diagram, it *will* be on an exam.\n![[images/Pasted image 20221031112313.png]]\n\n## Putting It All Together\n\n1. The *caller*:\n2. Before the call (during the prologue) the *callee*:\n3. After the call (during the epilogue) the *callee*:\n4. Finally, the *caller*:\n\n## Inline Expansion\n\nInlining function calls avoids the overhead of stack allocation entirely! No saving/restoring registers, maintaining the static chain, etc.\n\n[[CS441 - Programming Languages/6 - Control Flow/Tail Recursion]]: instead of allocating a new stack frame, just reuse the same variables in memory\n\n## Parameter Passing\n\n* **Formal Parameters**: parameters that appear in the *declaration* of a subroutine.\n* **Actual Parameters (arguments)**: variables and expressions which are passed to a subroutine at *runtime*.\n\n### Parameter Modes\n\n* **Pass-by-Value**: $p(x)$ is given a *copy* of $x$'s value.\n* **Pass-by-Reference**: $p(x)$ is given $x$'s *location in memory*.\n\nWhy pass by reference?\n* Copying actuals to formals takes time, especially for large data structures.\n* It's faster to just send the sarting address of an array rather than a copy of the whole thing.\n\n\n### Variations\n\n* [[CS441 - Programming Languages/Languages/ALGOL#ALGOL-W]] introduced *call-by-value/result*\n\t* In this method, the value of the argument is copied into the subroutine.\n* [[CS441 - Programming Languages/Languages/Clu]] introduced **Call-by-Sharing**\n\n### Hybrid Types\n\n(slides)\n\n### `READONLY` parameters\n\n* Introduced by [[CS441 - Programming Languages/Languages/Modula-3]]\n* Provides the efficiency of pass-by-reference with the *safety* of pass-by-value\n* `READONLY` parameters can't be changed by the subroutine\n\t* could only be passed to other subroutines if `READONLY` was maintained\n* C has an equivalent with the ability to pass `const` pointers\n\t* C++ has `const` references\n\n### R-Value References\n\nC++ introduced **r-value references**, the ability to pass an r-value (such as a built-up expression) by *reference*.\n\n### Closures as Parameters\n\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-11-02":{"title":"2022-11-02","content":"\n# Recap\n\nCall by sharing[^1][^2] - very similar to pass by reference\n* Differences are subtle\n\n# Lecture\n\n## Closures as Parameters\n* **Closure**: a reference to a subroutine together with its referencing environment that can be passed as a parameter.\n\t* Needs referencing environment because if nested subroutines are allowed, we must ensure the environment available to the routine is the same as when it was called.\n* Call by Name: A language must pass a closure whenever the eventual use of the parameter requires a particular referencing environment\n\t* Closures passed as parameters \n## Summary of Calling Methods\n\nDon't have to memorize everything, but at least know the gist for the common languages\n\n## Default (Optional) Parameters\n\nSubroutine can always assume it has all of the parameters whether the caller provided them or not\n* At compile time, any parameters not provided by the caller are plugged in by the compiler\n\n## Named Parameters\n\nMost languages consider parameters positionally.\n\n## Variable Numbers of Arguments\n\n```c\nvoid printf(char* fstring, ...) {};\n```\n\nWhile this isn't type-safe for statically-typed languages, dynamically-typed languages like Common Lisp and scripting languages can manage variable numbers of arguments in a type-safe way.\n\n## Function Returns\n\nEarly imperative languages would sometimes implement function returns by assigning a value to the *function name*.\n* If some nested declaration farther down the line shadowed the function name, that function *would never be able to return!*\n\nFunctional languages consider the value of a function to be the value its body evaluates to, avoiding the problem entirely.\n\nGo, in all its infinite wisdom, makes you declare a mutable variable at the start which is automatically returned at the end.\n\n## Exceptions\n\n### Exception Handling\n\n**Exceptions** (introduced in [[CS441 - Programming Languages/Languages/PL-I|PL-I]]) are *unexpected* runtime conditions. Sometimes the hardware will detect the exception directly, or the language/programmer can define scenarios where exceptions should be raised.\n\nThree options:\n1. Invent a value that can be used by the caller when the real value can't be returned.\n2. Return an explicit \"status\" variable to the caller, who must check it to see if the value returned is good.[^3]\n\t* Status variables can be (and often *are*) ignored, add overhead, and clutter the program's control flow.\n\t* The tests have to be checked *every single time* even though they're almost always passed.\n3. Rely on the caller to pass a closure for an error handling routine that can fire if there's a problem.\n\n[[CS441 - Programming Languages/Languages/PL-I]]'s early implementation of exceptions was confusing and error-prone. These days, exception handlers are *lexically bound* to blocks of code and can propagate up the call stack.\n\nException handlers should ideally try and compensate for the exception: clean up memory, close connections, etc., before continuing execution or re-raising the exception. Worst-case, the handler should *at least* print out an error message before crashing out.\n\n### Defining Exceptions\n\n*Dynamic semantic errors* are often predefined as exceptions.\n* Arithmetic overflows, EOF, etc.\n\nThese can arise in totally valid programs, so they aren't fatal errors. Other errors may be inherently fatal, such as a function returning without a specified return value.\n\n### Propagating Exceptions\n\nMost languages allow exceptions to have a whole slew of handlers, which allows for programmers to define specialized subtype handlers. Exceptions are typically handled by the first handler that matches its type.\n\nMost languages also allow a catch-all `final` clause that'll deal with any other exception regardless of type.\n\nConcurrent programs have to consider what might happen if an exception propagates outside of the current thread[^4]. Different languages handle this in different ways, there's not an inherently obvious solution.\n\n### Cleanup\n\nIf an exception propagates up the stack, the stack *unwinds*.\n\n### Implementation\n\n\n[^1]: https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing\n[^2]: https://pmg.csail.mit.edu/papers/thetaref/node34.html\n[^3]: This chapter has a lot of Go slander, huh?\n[^4]: Solution: don't write multithreaded programs. :)","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-11-04":{"title":"2022-11-04","content":"\n# Logistics\n\n**Exam**\n* Know each different method of garbage collection and how it works\n* Know what conservative compiler means\n\n# Chapter 9 (cont.)\n## Exceptions (cont.)\n\n### Implementation\n\nObvious choice is a linked-list stack of exception handlers.\n* When a protected block is entered, the handler for that block is pushed onto the *head* of the list.\n* If an exception occurs, the runtime system pops the innermost handler off the list and calls it.\n\nThe issue with this approach is that we must manage the handler stack in every case, even though it isn't used in the common case.\n\nAnother approach is to produce contiguous blocks (more in slides)\n\n## Coroutines\n\nA **coroutine** is represented by a closure (code address \u0026 referencing environment) into which we can jump via a nonlocal `goto`. This is called a *transfer*.\n\nWhen we transfer into a coroutine, the old program counter is saved.\n* So if we perform a goto in the coroutine several times, each will start at the same location.\n* If we transfer into the coroutine several times, each will start where the previous one left off.\n\nThis behavior is what gives us the `yield` generator behavior in Python.\n\nAll coroutines *exist* concurrently, but only one executes at a time. Transfer between coroutines is transferred explicitly by name.\n\nThey can be used to implement iterators and threads, and are also useful in their own right.\n\n### Stack Allocation for Coroutines\n\n```dialogue\n\u003c Why can't coroutines share a single stack?\n\u003e They don't execute LIFO\n```\nIf all coroutines are at the same level of scope, then the stacks for each are totally disjoint.\n\nThis is tough - most languages let you increase the size of the one shared program stack, not allocate an arbitrary number of them! You can instead allocate stack frames from the heap, which avoids those problems.\n\nIf coroutines can be created at arbitrary levels of lexical nesting, a *cactus stack* occurs.\n\n### Handling the Transfer\n\n1. Change the program counter\n2. Update the stack pointer\n3. Change the contents of registers\n\nThe data structure handling these operations is called a *context block*.\n\n## Events\n\nAn **event** is something that a running program must respond to, but occurs *outside* of the program at an *unpredictable* time.\n\nBasic code often assumes I/O is synchronous and blocking; that is, it happens at a specified time and the program will wait for it to happen. That doesn't really work with GUI programs, however.\n\nA better approach is setting up a handler, a special subroutine, to execute when a certain event occurs. This is called a **callback**.\n\n# Chapter 10 - Data Abstraction \u0026 Object Orientation\n\n[[CS441 - Programming Languages/10 - Data Abstraction and Object Orientation/|Index for Chapter 10]]\n\n## Development\n\n* Static \n\nClasses allow the programmer to define *families* of related abstractions\n* Create and destroy routines typically exported from amodule become constructors and destructors for instances.\n* Invoking a routine on a specific object type replaces calling a module sub\n\nClasses build on modules by also providing *inheritance* and *dynamic method binding*.\n\nEncapsulation, inheritance, and dynamic binding have their roots in [[CS441 - Programming Languages/Languages/SIMULA]]. It was weak, however, in information hiding - this is where Clu, Modula, and Euclid made important contributions.\n\nThe first *fully* object-oriented language was [[CS441 - Programming Languages/Languages/Smalltalk]], which used a message-based programming model.\n\n## Object Oriented Programming\n\nOO tries to enable safe code reuse by defining new abstractions as *extensions* or *refinements* of existing abstractions.\n\nMost object-oriented languages have a keyword to refer to the object to which the currently executing method belongs. Things like `self`, `this`, etc.\n\nObjects have **constructors** (called automatically when created) and generally at least *allow* a **destructor** (called automatically when objected is deleted or goes out of scope).\n\n### Public vs. Private\n\nThe `public` label identifies methods that are available to other objects - parts of the interface that are exported from the class.\n\n### Derived Classes\n\nThe constructor of the *parent* class has to be called first so that its information is set up and ready when the constructor of the *child* is called.\n\nCleanup should happen in reverse order, the child's destructor should be cleaned up before the parent's.\n\nChild classes can shadow methods defined in the parent, original methods are typically still accessible with explicit scoping with something like `ParentClass::method()`.\n\n### Classes and Generics\n\nSay we have a `LinkedList` class, but we want it to contain multiple types.\n\n```rust\nstruct Node\u003cT\u003e {\n\tvalue: T,\n\tnext: Ref\u003cNode\u003cT\u003e\u003e\n}\n```\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-11-07":{"title":"2022-11-07","content":"\nContinuing [[CS441 - Programming Languages/10 - Data Abstraction and Object Orientation/Object Orientation]]\n\n# Encapsulation \u0026 Inheritance\n * [[CS441 - Programming Languages/Languages/Euclid]] and [[CS441 - Programming Languages/Languages/ML]] introduced *module types* whose implementation resembles a record.\n\t * If all data in a module is of fixed size, then it can be assigned at a fixed offset within the record.\n\t * If some isn't known until runtime, fixed data is allocated and a [[CS441 - Programming Languages/9 - Subroutines and Control Abstraction/Dope Vector]] is supplied for dynamic data.\n\t * Modules share a single implementation of methods with the `this` parameter passed in implicitly.\n\n# Classes\n\nObject oriented languages have some additional issues that require changes to scoping rules.\n\nDerived classes can *restrict* visibility, but never *increase* it.\n\n# Variations\n\nDifferent languages have different rules here.\n* [[CS441 - Programming Languages/Languages/Eiffel]] *does* allow derived classes to increase visibility of base class methods.\n* [[CS441 - Programming Languages/Languages/Python]] requires dunder notation to reach certain elements but nothing is truly 'private'\n* In [[CS441 - Programming Languages/Languages/Ruby]], everything is private.\n\n# Inner Classes\n\nIf `Inner` is a member of `Outer`, can `Inner` see `Outer`'s  members? If so, which instances?\n\n```python\nclass Outer:\n\tx = \"some value\"\n\tclass Inner:\n\t\tdef __init__(self):\n\t\t\tprint(x)\n```\n\n# Extending Without Inheritance\n\nWhat happens if inheritance isn't an option?\n* [[CS441 - Programming Languages/Languages/C-Sharp|C#]] provides *extension* methods, which give the *appearance* of extending a pre-existing class.\n* Some scripting languages let the programmer add new methods to existing classes or individual objects.\n\n# Initialization\n\nMost OO languages provide some sort of method to initialize an object when it's first created. The language has already *allocated* that space, but the initializer, well, initializes it.\n* Some languages also provide a *destructor* to allow the programmer to specify how an object should be cleaned up at the end of its lifetime.\n\nIssues\n* multiple constructors\n* are variables references or values?\n* runtime order of parent/child constructors and destructors\n* if a class has members that are themselves classes, constructors of each member must be called\n\nSome languages like [[CS441 - Programming Languages/Languages/Smalltalk]], [[CS441 - Programming Languages/Languages/Eiffel]], C++, [[CS441 - Programming Languages/Languages/C-Sharp]], and Java all allow more than one constructor for a class.\n\n# References \u0026 Values\n\nSome languages use variables that are *references* to objects. Others (C++, Ada) allow variables to have values that are *themselves* objects.\n* With references, every variable *must* refer to something - no problem!\n* With values, an object may need to be created at elaboration time.\n\nSpace for the temporary object is likely to be allocated at a statically known offset in the stack frame of the caller.\n\n# Execution Order\n\nAn object *must* be initialized before it's used. Keep in mind the dependencies between parent and child - a parent's initialization routine *must* run before the child's.\n\n# Garbage Collection\n\nChildren's destructors are called *before* their parent's. T\n\nStorage management is often facilitated by *smart pointers*. Part of the destructor's routine involves smart pointers making sure nothing is left pointing to the object and only reclaiming storage if they're the last such pointer.\n\nLanguages with garbage collection often have less of a need for destructors.\n\n# Dynamic Method Binding\n\nMain: [[CS441 - Programming Languages/10 - Data Abstraction and Object Orientation/Dynamic Method Binding]].\n\n**Liskov Substitution Principle**: An instance of some derived class $D$, provided it doesn't hide or alter any public methods of its parent class $P$, can be used in place of any instance of $P$.\n* This is an instance of *subtype polymorphism*.\n\n# Semantics \u0026 Performance\n\nThe problem with static binding is that it denies the child control over its own state.\n\nIf a function is passed a reference to a parent object and calls a method on that object, it should get the correct method call for the object that got passed.\n\nThis adds some runtime overhead in the form of a table-lookup. This isn't *much*, but can make a difference in performance-critical applications.\n\n# Virtual Methods\n\n**Virtual Methods** are a way for programmers to specify that particular methods should use dynamic binding. Calls to these virtual methods are [[CS441 - Programming Languages/10 - Data Abstraction and Object Orientation/Dynamic Dispatch|dispatched]] to the appropriate implementation at runtime.\n\n# Abstract Methods\n\n# Member Lookup\n\nStatic method binding allows the compiler to *always* tell which version of a method should be called depending on the type being used.\n\nWith [[CS441 - Programming Languages/10 - Data Abstraction and Object Orientation/Dynamic Method Binding]], the object referred to by the reference must have enough information to allow the code generated by the compiler to find the right version at runtime.\n\nThe most common method uses a [[CS441 - Programming Languages/10 - Data Abstraction and Object Orientation/Virtual Method Table]].\n\n\n# Object Closures\n\n# Mix-In Inheritance\n\n# Interfaces\n\n# Implementation\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-11-09":{"title":"2022-11-09","content":"\n# Review for Midterm 2\n\n[[CS441 - Programming Languages/Midterm 2 Review|Main midterm review page here]]\n\n## Garbage Collection\n\n- Lock and Key\n\t- Each *heap object* gets a numeric key that is stored with the object\n\t- Each *pointer* becomes a `(key, address)` pair.\n\t- When the object is deallocated, the object's key is set to a specific \"nope\" value (so pointers will no longer match)\n- Tombstone\n\t- Rather than pointing directly to an object, pointers will point to an intermediate \"tombstone\"\n\t- Problems\n\t\t- Extra step of indirection on *every single pointer access*\n\t\t- As the program continues to run, tombstones keep piling up\n\t\t- Whether a tombstone will ever be used again is generally undecidable, tricky even in small/specific cases\n- Mark and Sweep\n\t- Initially, mark *everything* as garbage\n\t- Sweep through our program, mark everything that we can still reach as *not* garbage\n\t- Add garbage to *free list* - when new objects are allocated, you can use slots in memory\n\t- Problem: more of a \"stop-the-world\" approach. We've gotten better about this, it's not as disruptive as it used to be, but still.\n- Reference Counting\n\t- Allocate a small amount of extra data\n\t- Problem\n\t\t- Reference counting will fail to catch cyclic references (tracing collectors *will* catch them)\n\t\t  ![[images/ref-counting.svg]]\n\t\t- Doesn't deal with external fragmentation\n- Stop and Copy\n\t- Similar to Mark and Sweep\n\t\t- Start the mark, go through the sweep, but then copy all the used data down into a particular *used* half of the heap. This solves the fragmentation problem.\n- Generational\n- Conservative\n\t- Instead of going through and looking through pointers, use some low-level asm instructions that let you blast through the stack really fast\n\t\t- Look for a bit pattern that looks like it *might* be a pointer to something on the heap\n\t\t- If it *looks* like a pointer, be safe and mark that block as being *in-use*\n\t- Faster, but may leave some garbage uncollected\n\nWith garbage collection, memory is typically either very ephemeral or very long-lived. The best predictor for how long it'll be needed is how long it's already been in existence.\n\n## Passing Semantics\n\n* Pass by value: value goes in and *cannot* be changed\n* Pass by value-result: value goes in, then *whatever the value is at the end of the function gets copied back*.\n* Pass by reference: \n* Pass by sharing\n* Parameters can be in, out, or in-out\n\t* In: has to have a value assigned to it, function can read that value but not assign anything *to* it\n\t* Out: it doesn't have to be defined when you call it, the function can only write to it. Can always assign a new value, but can't see what value it has now.\n\t* In-out: more like standard call-by-reference\n\n## Array Calculation\n\n![[images/array-address-calculation.svg]]\n\nNumber of elements = $U - L + i$\n\n$$sizeof(element) \\cdot (U_i - L_i + i) \\cdot (U_H - L_H + i) + (U_i - L_i) \\cdot size$$\n\nBenefits of a highly-orthogonal type system: no real need for coercion. If you have better rules about how things interact, you can check more things at compile-time.\n\n```dialogue\n\u003c What are universal reference types?\n\u003e Void pointers!\n\u003c What are the advantages?\n\u003e They can be anything!\n\u003c What are the disadvantages?\n\u003e They can be anything!\n```\n\nSpeaking of universal reference types, they're a big red flag that a type system is *not* orthogonal.\n\nStack smashing attack: stack forced to overflow\n\nDope vector: pass an array size as a function parameter\n* problem: dont' know at compile time how much that is\n* keep usual housekeeping stuff on the stack\n* allocate *dope vector* - don't know how big the array is gonna be, but I *do* know how much space I need to store metadata (upper bound, lower bound, element size, etc.)\n\t* Remember: addressing everything as an offset from the frame pointer","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-11-14":{"title":"2022-11-14","content":"\n\n\u003e [!NOTE] NOTE\n\u003e \n\u003e This lecture is in Goodnotes.\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-11-16":{"title":"2022-11-16","content":"\n# Concurrency\n\n* Without threads, a program (such as a web browser) must either adopt a sequential approach or centralize the problem of delay-inducing events in a single **dispatch loop**.\n\t* The problem with this is that the complexity of dividing tasks and saving state hides the *actual algorithmic structure* of the program.\n\t* This approach makes the management of the tasks *explicit* and control flow *within* tasks becomes implicit. This is inside out!\n* Solid interactivity must ensure that no single operation takes too long.\n\n## Multiprocessor Architecture\n\n* A **distributed system** is characterized by interactions among separate programs running on separate machines.\n* A parallel but *nondistributed system* (a single program running on a single machine) can still be very large.\n\t* Historically, most parallel but nondistributed systems were homogenous - their processors were identical.\n* Main memory - uniform vs. non-uniform\n\n## Memory Coherence\n\nCaches introduce a special problem for shared-memory machines: unless we do something, a core that has cached a given memory location may go an arbitrarily long time without seeing changes made by other cores.\n\nThis problem - how to keep cached copies of a memory location *consistent* - is the **coherence** problem.\n* Solution is easy on a bus-based system. It's broadcast-based, so cache controllers can snoop on the memory traffic of other cores. This is used by most commercial microprocessors.\n* What if there's no broadcast bus? How do we make sure things update in the order they're supposed to?\n\n## Supercomputers\n\nCache complexity causes large, shared-memory computers to be difficult to build.\n\n## Concurrent Programming\n\nWe usually use the term *thread* to refer to the active entity that the programmer thinks of as running concurrently to other threads.\n\n* A **heavyweight** process has its own address space.\n* A collection of **lightweight** processes may share an address space.\n\nA *task* is a well-defined unit of work that must be done by some thread. Threads will often share a bag of tasks, each thread repeatedly removing and executing tasks from the shared bag.\n\n## Communication and Synchronization\n\nTwo most crucial issues: communication and synchronization between threads. This is either based on **shared memory** or **message passing**.\n* Shared memory: some or all of a program's variables are accessible to multiple threads.\n* Message passing: threads have no shared state; one thread must carry out an explicit `send` operation to send data to the other.\n\nFor both types, synchronization can be implemented using either **spinning** (busy-waiting) or **blocking**.\n* Spinning: thread runs in a loop in which it keeps re-evaluating some condition until that condition becomes true.\n\t* Examples: message queue is non-empty, shared variable has a particular value, etc.\n\t* Presumably waiting on some other thread to complete some operation.\n\n## Languages and Libraries\n\n* Implicit vs. explicit parallelism\n\n## Creation Syntax\n\n\u003e [!NOTE] Further Reading\n\u003e \n \u003e Read pages 638-639 in the text!\n\n## Launch at Elaboration\n\n## Fork/Join\n\nCo-begin, parallel loops, and launch-at-elaboration all lead to a pattern where thread executions are properly nested. The fork operation is more general; it makes thread creation an *explicit* operation.\n* Fork: start a new thread\n* Join: wait for that thread to finish, grab its values.\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-11-18":{"title":"2022-11-18","content":"\n# Early Reply\n\n# Thread Implementation\n\n* At one extreme, every thread could get its own process.\n* At the other, we could multiplex all of a program's threads on top of a *single* process.\n* Intermediate: potentially large number of threads running on a smaller but nontrivial number of processes.\n\nThe typical thread implementation begins with [[CS441 - Programming Languages/9 - Subroutines and Control Abstraction/Coroutines|coroutines]]. Turning coroutines into threads has three main steps:\n1. Hide the argument to transfer control by implementing a *scheduler* that chooses which thread will run next when the current thread yields the core.\n2. Implement a pre-emption mechanism that suspends the current thread automatically on a regular basis so every thread gets a chance to run.\n3. Allow the data structures describing our collection of threads to be shared by more than one OS process, possibly on separate cores so threads can run on any of the processes.\n\n\u003e [!NOTE] Further Reading\n\u003e \n\u003e The textbook has a section on *uniprocessor scheduling* - worth a read.\n\n## Preemption\n\nWe want to multiplex each core...\n* *fairly*\n* at a relatively *fine grain*\n* without requiring threads to explicitly call `yield` at frequent intervals (or at all)\n\nMany languages use **timer signals** for preemptive multithreading.\n* When switching threads we ask the OS to deliver a signal to the thread at a specified time in the future.\n* OS delivers the signal by saving the context (program counter, registers) of the process and transferring control to a previously specified handler in the language runtime.\n* When called, the handler modifies the state of the currently running thread to make it appear the thread had just executed a call to `yield` and was about to execute its prologue.\n* The handler then \"returns\" into `yield`, which transfers control to some other thread, as if the running thread had just voluntarily relinquished control.\n\nThread libraries typically disable signal delivery during scheduler calls.\n\n## Multiprocessor Scheduling\n\nSingle-processor thread implementations can be extended to run on more than one OS process by arranging for processes to share the ready list and related data structures.\n\n# Implementing Synchronization\n\nSynchronization is the **primary challenge** for shared-memory concurrency.\n\nWe must prevent operations on different threads from interfering with each other and either...\n* make some operations atomic\n* delay the operation until appropriate preconditions hold.\n\nMost often achived using **mutual exclusion locks**, which ensure that only one thread is only one thread is in a critical section at some point in time.\n\n**Condition synchronization** lets a thread wait on some condition.\n* It's important to note that this doesn't provide the *consensus* between threads required by mutual exclusion locks.\n\nThe implementation of parallel threads we've seen so far depends on atomicity and condition synchronization.\n* Atomicity of operations on the ready list and related data structures ensures that they always satisfy a set of invariants.\n\n\u003e [!NOTE] Note\n\u003e \n\u003e In general, we don't want to over-synchronize.\n\n# Strategies\n\n* **Busy-wait** synchronization\n* **Spin Locks** provide mutual exclusion and *barriers*, which ensure that no thread passes beyond a given point in the program until *all* threads have reached that point.\n* **Test and Set** uses logic that looks something like this:\n  ```python\ndef test_and_set(flag: bool):\n\told_value: bool = flag\n\tflag = True\n\treturn (old_value == False)\n```\n\nThis is an atomic operation, appearing to happen all at once.\n\nContention-reduction strategies:\n* `test_and_test_and_set` lock, which spins with ordinary reads until the lock is free.\n* Compare-and-swap\n\t* takes a location (or flag), the value we think it has now, and the new value.\n\t* Returns `true` or `false` to indicate whether or not a change was made.\n\t* If it has the value we expected, set it and return true to indicate a change was made. Otherwise, return false to indic.\n* Reader-writer lock\n\t* Several threads are allowed to *read* the same location at the same time.\n\t* If any thread wants to write data, it needs to wait until *all current readers* finish.\n\t* All new readers must wait until writing is complete, and only one thread can write at a time.\n\n","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Midterm-2-Review":{"title":"Midterm 2 Review","content":"\n\n\u003e [!NOTE] More Study Material\n\u003e \n\u003e A lot of this is blank, but I've transcribed the textbook's Check Your Understanding questions [here](https://docs.google.com/document/d/1ZgcKM5S-UDpNt3W2zfN1GRL4OKKvxSPegRuUUzRs-uM/edit?usp=sharing). If you're looking for more study material, that's the best place to start.\n\u003e \n\u003e It's read-only, so go ahead and make a copy to fill in yourself. I'd love to share answers, but it *really* sticks better when you write them yourself.\n\n\n# Chapter 6\n\n* **Value Model**: a variable is just a *named container* for a value\n\t- **l-value**: a left-hand side expression representing a *location*\n\t- **r-value**: a left-hand side expression representing a *value*\n- **Reference Model**: a variable is a *named reference* to a value\n\n# Chapter 7\n\n\u003e todo\n\n# Chapter 8\n* Describe the purpose of a [[CS441 - Programming Languages/8 - Composite Types/Dope Vector|dope vector]] and what information it typically contains.\n* Know how to calculate array bounds\n1. Describe the following [[CS441 - Programming Languages/8 - Composite Types/Garbage Collection|garbage collection]] strategies:\n\t* Tombstones\n\t* Locks and Keys\n\t* Mark and Sweep\n\t* Stop and Copy\n\t* Generational Collection\n2. Describe *conservative* garbage collection\n\t* If it looks like a pointer, leave it alone\n3. What are two problems associated with reference-counting garbage collectors?\n4. Describe the difference between the *reference* and *value* models of variables when it comes to pointers and recursive types.\n\n# Chapter 9\n1. Describe the actions taking during the calling sequence.\n\t* Prologue\n\t* Epilogue\n2. Draw and label the stack frame diagram.\n3. Describe the four steps of a typical calling sequence.\n4. What is the difference between *formal* parameters and *actual* parameters?\n5. How does *inline expansion* differ from *macro expansion*?\n6. Describe the difference between **pass-by-value** and **pass-by-reference**.\n7. What are the benefits of pass-by-reference? What are the dangers?\n\n\n\n# Brain Dump\n\nIn a stack frame, addressing is done relative to the **frame pointer** because the compiler can't know the exact memory address of the frame until runtime.","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Overview":{"title":"CS441 - Programming Languages","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Wiki-Project/Wiki-Project-Draft":{"title":"Wiki Project Draft","content":"\n# Overview\n\nSQL (Structured Query Language) is a declarative programming language designed for interacting with databases.\n\n# History\n\nSQL was introduced in a 1974 paper by recent PhD graduates Donald Chamberlin and Raymond Boyce. Originally named SEQUEL (Structured English Query Language),\n\n# Features\n\n\n\n\n\n* Native data types\n\t* Character: CHAR, VARCHAR, CLOB(?)\n\t* Numeric\n\t\t* Exact: NUMERIC, DECIMAL, INTEGER (and variants)\n\t\t* Approximate: FLOAT, REAL, DOUBLE PRECISION\n\t\t* Decimal: DECFLOAT\n\t\t* Datetime: DATE, TIME, TIMESTAMP\n\t\t* Interval: INTERVAL\n\t\t* Boolean\n\t\t* Structured: XML, JSON\n\n\n* Control structures\n\t* Iteration\n\t\t* Procedural extensions\n\t* Selection\n\t* Concurrency?\n* Declarative\n* Statically, strongly typed\n* Other unique features\n\t* Anything arcane?\n\n* Basic evaluation (support each point)\n\t* How readable? How writeable?\n\t* Reliability\n\t\t* Note transaction processing facilities and ACID guarantees\n\t* Orthogonality (not very orthogonal - SQL is hard to compose)\n\t\t* Example is trying to select a table name with a query for use in another query - not possible\n\t* Expressiveness (very expressive - say what you want, not how to do it)\n\t* How well does it support abstraction?\n\t* Execution speed\n\n# Example Code\n\nSQL provides mechanisms for defining and altering table schemas, operating as a data *definition* language. Note that the `SERIAL` type creates an automatically-incrementing integer counter, which can be helpful for identifier fields.\n\n```sql\nCREATE TABLE employee (\n    id \t  \t    SERIAL \tPRIMARY KEY,\n\tdept_id     INT \tNOT NULL,\n    name \t  \tTEXT \tNOT NULL,\n    salary  \tINT \tNOT NULL\n);\n\nCREATE TABLE department (\n    id \t\t\tINT \tPRIMARY KEY,\n    name \t\tTEXT\n);\n\nALTER TABLE employee\nADD CONSTRAINT fk_emp_dept\nFOREIGN KEY (dept_id)         -- an employee's `dept_id` field...\nREFERENCES department (id);   -- references a department's `id` field.\n```\n\nSQL also operates as a data *manipulation* language, allowing you to create, update, or read individual rows in the tables you've created.\n\n```sql\nINSERT INTO department (id, name)\nVALUES\n\t(1, 'Retail'),\n    (2, 'Operations'),\n    (3, 'Sales');\n    \nINSERT INTO employee (dept_id, name, salary)\nVALUES\n\t(1, 'Alice', 50000),\n\t(1, 'Bob',   57000),\n    (1, 'Carol', 60000),\n    (2, 'Dave',  55000),\n    (2, 'Eve',   70000),\n    (3, 'Frank', 65000),\n    (3, 'Grace', 55000);\n```\n\nYou can use `SELECT` statements to read data from the database. The following query:\n\n```sql\nSELECT\n\temp.name AS employee_name,\n    emp.salary,\n    dept.name AS department_name\nFROM employee AS emp\n\tJOIN department AS dept \n    ON emp.dept_id = dept.id\nORDER BY salary DESC;\n```\n\n...produces a set of results that looks like this:\n\n| employee_name | salary | department_name |\n| :-----------: | :----: | :-------------: |\n| Eve           | 70000  | Operations      |\n| Frank         | 65000  | Sales           |\n| Carol         | 60000  | Retail          |\n| Bob           | 57000  | Retail          |\n| Dave          | 55000  | Operations      |\n| Grace         | 55000  | Sales           |\n| Alice         | 50000  | Retail          |\n\nSQL also supports aggregate functions like `SUM`, `AVG`, and more. For example, to find the average salary per department, we could write a query like the following:\n\n```sql\nSELECT dept.name, ROUND(AVG(salary), 0) as avg_salary\nFROM employee AS emp\n\tJOIN department AS dept\n\tON emp.dept_id = dept.id\nGROUP BY dept.id\nORDER BY avg_salary DESC;\n```\n\n| name       | avg_salary |\n| :--------: | :--------: |\n| Operations | 62500      |\n| Sales      | 60000      |\n| Retail     | 55667      |\n\n# Summary\n\n\n\n# Further Reading\n\n1. Donald D. Chamberlin. 2012. Early History of SQL. IEEE Annals Hist. Comput. 34, 4 (October 2012), 78–82. DOI:https://doi.org/10.1109/MAHC.2012.61\n2. Donald D. Chamberlin, Morton M. Astrahan, Michael W. Blasgen, James N. Gray, W. Frank King, Bruce G. Lindsay, Raymond Lorie, James W. Mehl, Thomas G. Price, Franco Putzolu, Patricia Griffiths Selinger, Mario Schkolnick, Donald R. Slutz, Irving L. Traiger, Bradford W. Wade, and Robert A. Yost. 1981. A history and evaluation of System R. Commun. ACM 24, 10 (October 1981), 632–646. DOI:https://doi.org/10.1145/358769.358784\n3. Donald D. Chamberlin and Raymond F. Boyce. 1974. SEQUEL: A structured English query language. In Proceedings of the 1974 ACM SIGFIDET (now SIGMOD) workshop on Data description, access and control (SIGFIDET ’74), Association for Computing Machinery, New York, NY, USA, 249–264. DOI:https://doi.org/10.1145/800296.811515\n4. E. F. Codd. 1970. A relational model of data for large shared data banks. Commun. ACM 13, 6 (June 1970), 377–387. DOI:https://doi.org/10.1145/362384.362685\n5. SQL. Wikipedia. Retrieved October 31, 2022 from https://en.wikipedia.org/w/index.php?title=SQL\u0026oldid=1119270475","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS441-Programming-Languages/Wiki-Project/Wiki-Project-SQL":{"title":"Wiki Project - SQL","content":"\n# Logistics\n\n**Due date**: Sunday 2022-11-20\n\n* [Project Description](https://umsystem.instructure.com/courses/128558/pages/wiki-content-assignment)\n* [Roster - Who's Doing What](https://umsystem.instructure.com/courses/128558/pages/wiki-assignment-whos-doing-what)\n* [Timeline](https://umsystem.instructure.com/courses/128558/pages/some-programming-languages-a-timeline)\n\t* Need to fill in *at least* two entries\n* [Example of a high-quality page with notes from Hare](https://umsystem.instructure.com/courses/128558/pages/some-programming-languages-c++)\n* [Actual page to edit](https://umsystem.instructure.com/courses/128558/pages/some-programming-languages-sql)\n* Draft at [[CS441 - Programming Languages/Wiki Project/Wiki Project Draft]]\n\n# Components\n\n## Overview\n\n- [ ] Type of language\n- [ ] When/where the language was written\n- [ ] Why the language was written\n- [ ] Primary uses for the language\n- [ ] Notable features\n\n## History\n\n**Big Idea**: talk about why someone thought the language was needed, what went into it, and how it worked out.\n\n- [ ] Primary design features\n- [ ] Original language goals\n- [ ] Design process\n- [ ] What need was it built to address?\n- [ ] What sets the language apart from what came before it?\n- [ ] What changes were made from ancestor languages (if there were any)?\n- [ ] How widely was it used, and in what areas?\n- [ ] Is the language still in use? Why/why not?\n- [ ] What were the major versions or revisions (if any)?\n- [ ] Were parts of it adopted into other languages, or did it become a dead end? Why?\n\n## Features\n\n- [ ] Description (in some detail)\n- [ ] Bare minimum requirements\n\t- [ ] Native data types\n\t- [ ] Control structures\n- [ ] Classify based on the following criteria:\n\t- [ ] Imperative/object-oriented/functional/declarative/etc.\n\t- [ ] Strong vs. weak typing\n\t- [ ] Static vs. dynamic typing\n\t- [ ] How are iteration/selection handled (if at all)?\n\t- [ ] What features does it support?\n- [ ] Where does the language really shine?\n- [ ] What are its biggest drawbacks?\n- [ ] Does the language have any particularly arcane features?\n\n## Feature Evaluation\n\n**Big Idea**: Answer each question, but more importantly *support each position*.\n\n- [ ] How readable is the language?\n- [ ] How writeable?\n- [ ] Is the language highly orthogonal?\n- [ ] How expressive is the language?\n- [ ] How well does it support abstraction?\n- [ ] How does its execution speed compare to other languages of the same era?\n\n## Examples\n\n* Ideas\n\t* CTEs\n\t* JOINs\n\n## Summary Evaluation\n\n**Big idea**: cover your overall view and 2-3 things a user needs to know/ought to consider about the language\n\n- [ ] Final conclusions/comments about the language\n- [ ] Has the language been a success?\n- [ ] What's the language best at?\n- [ ] What are the language's drawbacks?\n- [ ] What are the significant tradeoffs? Were they worthwhile?\n\n## Further Reading\n\n\u003e Use  [ACM Reference Formatting](https://www.acm.org/publications/authors/reference-formatting)","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS461-Artificial-Intelligence/":{"title":"CS461 - Artificial Intelligence","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/1-Introduction/":{"title":"1 - Introduction","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS461-Artificial-Intelligence/10-Decision-Trees/":{"title":"10 - Decision Trees","content":"","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS461-Artificial-Intelligence/10-Decision-Trees/ID3-Algorithm":{"title":"ID3 Algorithm","content":"\nIntroduced in [[CS461 - Artificial Intelligence/Lectures/2022-11-09]]'s lecture.\n\nFind the variable that comes *closest* to dividing the data into two equal subsets.\n\nPartition set $S$ on attribute $A$.\n\n$$Gain(S, A) = Entropy(S) - \\Sigma{\\frac{\\left|S_v\\right|}{\\left|S\\right|}} \\cdot Entropy(S_v)$$","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS461-Artificial-Intelligence/11-Neural-Networks/":{"title":"11 - Neural Networks","content":"\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/11-Neural-Networks/Neural-Networks":{"title":"Neural Networks","content":"\nIntroduced in [[CS461 - Artificial Intelligence/Lectures/2022-11-09]]'s lecture","lastmodified":"2022-11-21T22:32:27.860327419Z","tags":null},"/CS461-Artificial-Intelligence/2-Uninformed-Search/":{"title":"2 - Uninformed Search","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/3-Informed-Search/":{"title":"3 - Informed Search","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/3-Informed-Search/Constraint-Satisfaction":{"title":"AC-3","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/4-Adversarial-Search/":{"title":"4 - Adversarial Search","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/4-Adversarial-Search/Genetic-Algorithms":{"title":"Genetic Algorithms","content":"\n# Steps\n## Initial population\nRandomly generate some initial population.\n## Selection\nThere are a number of ways to handle selection, but the idea is to pick the parents of the next generation according to some fitness function.\n## Reproduction/Crossover\nA crossover point is selected\n## Mutation\nIntroduce \n## Culling","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/4-Adversarial-Search/Monte-Carlo-Tree-Search":{"title":"Monte Carlo Tree Search","content":"\n# Steps\n## Selection\n## Expansion\n## Simulation\n## Back-Propagation\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/4-Adversarial-Search/Normalization":{"title":"Normalization","content":"\n# Types of Normalization\n## L1\n$$\\frac{x_i}{\\sum{x_i}}$$\n\n## L2\n$$\\frac{x^2_i}{\\sum{x^2_i}}$$\n\u003e [!NOTE] Note\n\u003e In general, $L_k$ normalization involves $x^k$\n## Softmax\n$$\\frac{e^{x_i}}{\\sum{x_i}}$$\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/4-Adversarial-Search/Simulated-Annealing":{"title":"Simulated Annealing","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/5-Logic/":{"title":"5 - Logic","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/5-Logic/Backward-Chaining":{"title":"Backward Chaining","content":"\n**Backward chaining** is an inference method characterized by working *backwards* from a goal to find some series of antecedents that support that goal.\n\nThis method contrasts [[CS461 - Artificial Intelligence/5 - Logic/Forward Chaining]].","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/5-Logic/Forward-Chaining":{"title":"Forward Chaining","content":"\n**Forward chaining** is an inference method characterized by its forward-moving development of new facts from inference rules until a particular goal is reached.\n\nThis method contrasts [[CS461 - Artificial Intelligence/5 - Logic/Backward Chaining]].","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/5-Logic/Overview":{"title":"5 - Logic (Overview)","content":"\n# Types\n* [[CS461 - Artificial Intelligence/5 - Logic/Predicate Logic]]\n* [[CS461 - Artificial Intelligence/5 - Logic/Propositional Logic]]\n# Other Logics\nEverything we've seen so far is **monotonic**: once it's in the knowledge base, it can't be removed\n## Second-Order Logic\n*\"A predicate must exist that satisfies these properties\"*\n* Gives you enough power to approach Godel's Incompleteness Theorem\n* First order logic will not let you say *\"all statements with an inductive proof are true\"\n\n## Fuzzy Logic\nAllows us to express degrees of uncertainty about the truth value of something\n\n## Modal Logic\nDeals with beliefs, moral imperatives\n* \"Ought implies can\"\n* \"It is possible...\"\n* \"It is necessary...\"\n\n## Temporal Logic\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/5-Logic/Predicate-Logic":{"title":"Predicate Logic","content":"\n# Overview\nPredicate logic allows us to make statements about *categories*\n# Features\n* Arity:\n\t* **Arity 0:** $win()$\n\t* **Arity 1:** $Student(\\text{Bill})$\n\t* **Arity 2:** $Parent(\\text{John}, \\text{Martha})$\n* Also allows us to use existential ($\\exists$) and universal ($\\forall$) quantifiers\n\t* *All aliens drive flying saucers*\n\t* $\\forall{x}: \\text{Alien}(x) \\implies \\text{DrivesSaucer}(x)$\n\t* How would we prove $\\neg{(\\forall{x}: \\text{Alien}(x) \\implies \\text{DrivesSaucer}(x)})$?\n\t\t* Start by putting it in *clausal form*: $p \\implies q \\equiv \\neg{p} \\vee q$\n\t\t* $\\neg{(\\forall{x}: \\neg{\\text{Alien}(x)} \\vee \\text{DrivesSaucer}(x)})$\n\t\t* $\\exists{x}: \\text{Alien}(x) \\wedge \\neg{\\text{DrivesSaucer}(x)}$\n# Resolution (Unification)\n\n\u003e [!NOTE] NOTE\n\u003e \n\u003e [[CS461 - Artificial Intelligence/5 - Logic/Propositional Logic]] refers to this as resolution, called *unification* in predicate logic\n\n* **Rule 1:** predicates must match\n\t* $setting(sun) \\wedge \\neg{setting(moon)}$ ~ different variables, no relationship\n\n# Example\n* All genies ride flying carpets.\n\t* $\\forall x: \\text{Genie}(x) \\implies \\text{FlyingCarpet}(x)$\n\t* **Clausal form:** $\\forall x: \\neg{\\text{Genie}(x)} \\vee \\text{FlyingCarpet}(x)$\n* Aladdin rides a flying carpet.\n\t* $\\text{FlyingCarpet}(\\text{Aladdin})$\n* Is Aladdin a genie?\n\t* Try to find a contradiction, start with $\\neg{\\text{Genie}(\\text{Aladdin})}$\n\t* We don't have enough information! Need biconditional.\n\t\t* $\\forall x : G(x) \\iff FC(x)$\n\t\t\t* $\\forall x : G(x) \\implies FC(x)$\n\t\t\t\t* **1:** $\\forall x: \\neg{G(x)} \\vee FC(x)$\n\t\t\t* $\\forall x : FC(x) \\implies G(x)$\n\t\t\t\t* **2:** $\\forall x: \\neg{FC(x)} \\vee G(x)$\n\t\t\t* **3:** $FC(Aladdin)$\n\t\t\t* **4:** $\\neg{G(Aladdin)}$\n\t\t* Resolution through **2** and **3** produces $G(Aladdin)$\n\t\t* Resolution through **4** and **5** produces $\\emptyset$ - contradiction\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/5-Logic/Propositional-Logic":{"title":"Propositional Logic","content":"\nAn expression in propositional logic is in **clausal form** if there is no:\n1. implication\n2. conjunction\n3. double negative","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/":{"title":"6 - Knowledge Representation","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/Agents":{"title":"Agents","content":"\nIndependent programs/systems that each specialize in small tasks\n**Focus:** *what can be done?*\n\n## Goals\n* How does an agent perceive its environment?\n* How does it make decisions?\n* Can it act autonomously?\n* How does it interact with other agents (if at all)?\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/Concept-Maps":{"title":"Concept Maps","content":"\nExtension of [[CS461 - Artificial Intelligence/6 - Knowledge Representation/Semantic Networks]]\n\n**Key idea:** show relationships between entities, tracing backwards/forwards to show how you arrived at a certain concept\n\n## Problems\n* Often lack the formalism of semantic networks\n* Do not assume subset inclusions","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/Conceptual-Graph":{"title":"Conceptual Graph","content":"\n**Conceptual Graphs** are a formalism for knowledge representation introduced by John F. Sowa[^1].\n\n[^1]: The original paper introducing conceptual graphs can be found at the author's website [here](https://www.jfsowa.com/cg/cg_hbook.pdf).\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/Frames":{"title":"Frames","content":"\nExtension of [[CS461 - Artificial Intelligence/6 - Knowledge Representation/Object Orientation]]\n\n\u003e Frames are an artificial intelligence data structure used to divide knowledge into substructures by representing \"stereotyped situations\". They were proposed by Marvin Minsky in his 1974 article \"A Framework for Representing Knowledge\". Frames are the primary data structure used in artificial intelligence frame languages; they are stored as ontologies of sets.\n\u003e\n\u003e Frames are also an extensive part of knowledge representation and reasoning schemes. They were originally derived from semantic networks and are therefore part of structure-based knowledge representations. According to Russell and Norvig's \"Artificial Intelligence: A Modern Approach\", structural representations assemble \"[...]facts about particular objects and event types and arrange the types into a large taxonomic hierarchy analogous to a biological taxonomy\".\n\u003e\n\u003e [Wikipedia](https://en.wikipedia.org/wiki/Frame%20(artificial%20intelligence)\n\n## Problems\n* World isn't neatly packaged\n* Definitions are important, getting them right is hard\n* Cancelling default values is harder than it looks, changes must *percolate*\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/Object-Orientation":{"title":"Object Orientation","content":"\n# Key Ideas\n* Inheritance\n* Encapsulation\n* Polymorphism\n* Separate interface/implementation\n# Languages\n## Simula 67\n## Smalltalk\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/Scripts":{"title":"Scripts","content":"\n## Idea\nExtension of [[CS461 - Artificial Intelligence/6 - Knowledge Representation/Frames]]\n* adds information about sequences of events and planning\n\n**Key concept:** conceptual dependency\n* Classify relations between objects and properties\n\nScripts can be arranged hierarchically and used in [[CS461 - Artificial Intelligence/6 - Knowledge Representation/Production Systems]]\n\n## Problems\n* Lack important concepts\n\t* \"What color shoes was Lincoln wearing during the Gettysburg address?\"\n\t* Script didn't know Lincoln being in Gettysburg meant his feet were in Gettysburg!\n* Can be very effective in microworlds but are very limited in general understanding.\n\n\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/6-Knowledge-Representation/Semantic-Networks":{"title":"Semantic Networks","content":"\n**Semantics:** meaning\n\n**Key idea:** Model relationships between concepts, ideas, objects, events, or situations.\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/7-Production-Systems/":{"title":"7 - Production Systems","content":"\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/7-Production-Systems/Production-Systems":{"title":"","content":"y---\ntitle: \"Production Systems\"\ndate: 2022-11-04\nwikipedia: \"https://en.wikipedia.org/wiki/Production_system_(computer_science)\"\n---\n\nIdea: *if-then* rules\nProduction systems require:\n* control system (rules interpreter)\n- database","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/8-Uncertainty/":{"title":"8 - Uncertainty","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/8-Uncertainty/Bayes-Theorem":{"title":"Bayes' Theorem","content":"\n\n\n$$\\begin{align*}\nP(A \\mid B) \u0026= \\frac{P(A \\cap B)}{P(B)}, \\text{ if } P(B) \\neq 0\\\\\n\u0026= \\frac{P(B \\mid A)\\cdot P(A)}{P(B)}, \\text{ if } P(B) \\neq 0\n\\end{align*}$$\nThis is super cool if variables are discrete, but what about continuous variables?\n* *Calculus baby!*\n\n## Joint Probability Distribution\nConsider:\n* $P(\\text{rain} \\wedge \\text{high winds})$\n* $P(\\text{scholarship} \\wedge \\text{dean's list})$\n* $P(\\text{cavity} \\wedge \\text{rain})$\n\n$$P(\\neg{a}) = 1 - P(a)$$\n$$P(a \\vee b) = P(a) + P(b) - P(a \\wedge b)$$\n## Marginal Probability\nSuppose we have a simple $2 \\times 2 \\times 2$ distribution:\n* Cavity\n* Toothache\n* Dental pick catches on cavity\nWe'll perform *marginalization*, or *summing out*, to calculate the marginal probability.\n\n![[images/Pasted image 20221024134153.png]]\n\n$$P(\\text{cavity} \\mid \\text{toothache}) = P(\\text{cavity, ache, catch}) \\cdot \\alpha$$\n\n**THIS ISN'T DONE YET! VIEW SLIDES**\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/8-Uncertainty/Fuzzy-Logic":{"title":"Fuzzy Logic","content":"\n# Fuzzy Sets\nCrisp set: $\\\\{0, 1\\\\}$\nFuzzy set: $\\\\{0, \\dots, 1\\\\}$\n\n* With a crisp set, we choose a strict cutoff value and make no accomodations.\n* Fuzzy sets can have *degrees* of membership.\n* $\\\\{\u003c 5'6, \\dots, 6'3 \u003e\\\\}$ with a ramp function in between\n\n## Fuzzy Set Membership\n* $X \\cup Y = max(X, Y)$\n* $X \\cap Y = min(X, Y)$\n\t* Say someone has membership in...\n\t\t* $tall$ of 0.85\n\t\t* $rich$ of 0.20\n\t* What's their membership in the set $tall \\cup rich$?\n\t\t* $max(tall, rich) = 0.85$\n\t* What about $tall \\cap rich$?\n\t\t* $min(tall, rich) = 0.20$\n* $\\overline{X} = 1 - X$\n* What about the symmetric difference?\n\t* Usually take the definition from crisp sets, $(A \\cap \\overline{B}) \\cup (\\overline{A} \\cap B)$\n\t* $A \\text{ (tall)} = 0.85, \\overline{A} = 0.15$\n\t* $B \\text{ (rich)} = 0.2, \\overline{B} = 0.8$\n\t* $A \\oplus B = (0.85 \\cap 0.8) \\cup (0.15 \\cap 0.2) = 0.8 \\cup 0.15 = 0.8$\n\n## Law of the Excluded Middle\nAlways true in crisp sets, but for fuzzy sets it's a *membership function*\n* $P \\cap \\neg{P} = min(P, 1 - P)$\n\n# Fuzzy Inference\n* Fuzzy [[CS461 - Artificial Intelligence/6 - Knowledge Representation/Production Systems]] look pretty much like the normal kind, except...\n\t* the variables are fuzzy\n\t* the $\\text{AND}/\\text{OR}$ operations are fuzzy\n* So instead of rules firing directly, they fire *to some extent*","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/8-Uncertainty/Probability":{"title":"Probability","content":"\nWhere does uncertainty *come from*?\n* Partial observability\n* Nondeterminism\n* Both?\n\n\u003e eventually the last proton will decay\n\u003e \n\u003e - brian hare\n\nWe could track some sort of *belief state* - out of every possible state, which one might we be in? Except...\n* Pretty large search space\n* We'd like a pretty reasonable plan for every contingency\n\n**Rational Decision**: Maximum likelihood of success *at acceptable cost*\n* In other words, maximum expected utility.\n* $$E(x) = \\sum{x} \\cdot P(x)$$\n**Diagnostic Problem**: \n**Ontological Commitment**: what is *true*\n* There are rules that do or do not hold in any particular case\n**Epistemological Commitment**: What is or can be *known*\n* What we can *know* about particular rules is limited\n\n## Utility Theory\n**Idea**: every decision has some utility\n* $$\\text{utility} = \\sum{\\text{gains}} - \\sum{\\text{costs}}$$Every agent sets their own utility function\n\t* Doesn't have to match anybody else's!\n\n## Terminology\n* ***Possible worlds**\n\t* Mutually exclusive\n\t* Exhaustive\n\t* *\"Every possible world exists and is distinct from each other\"*\n\t* $$0 \\leq P(\\omega) \\leq 1$$\n\t* $$\\sum_\\omega{P(\\omega)} = 1$$\n\t* $$P(\\text{event}) = \\sum{P(\\text{worlds where event occurs})}$$\n\t* ","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/8-Uncertainty/Uncertainty":{"title":"Uncertainty","content":"\nhttps://www.tylervigen.com/spurious-correlations\n\nHow do we figure out whether something is a *causal* connection or just coincidence?\n\n\n\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/9-Expert-Systems/":{"title":"9 - Expert Systems","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/9-Expert-Systems/DENDRAL":{"title":"DENDRAL","content":"\n**DENDRAL** is considered the first [[CS461 - Artificial Intelligence/9 - Expert Systems/Expert Systems|expert system]]. It was written in [[LISP]] with the goal of helping organic chemists identify unknown molecules.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/9-Expert-Systems/Expert-Systems":{"title":"Expert Systems","content":"\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/9-Expert-Systems/Knowledge-Engineering":{"title":"Knowledge Engineering","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/9-Expert-Systems/MYCIN":{"title":"MYCIN","content":"\n**MYCIN** was an [[CS461 - Artificial Intelligence/9 - Expert Systems/Expert Systems|expert system]] derived from [[CS461 - Artificial Intelligence/9 - Expert Systems/DENDRAL]] and written in [[CS441 - Programming Languages/Languages/LISP]]. It used [[CS461 - Artificial Intelligence/5 - Logic/Backward Chaining]] to identify infectious bacteria and recommend antibiotics (many of whose names ended in *-mycin*).","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/9-Expert-Systems/PROSPECTOR":{"title":"PROSPECTOR","content":"\n**PROSPECTOR** was an early [[CS461 - Artificial Intelligence/9 - Expert Systems/Expert Systems|expert system]] designed for the U.S. Geological Survey to aid geologists in mineral exploration[^1].\n\n[^1]: https://www.sri.com/hoi/prospector-computer-based-expert-system/","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/":{"title":"Lectures","content":"\n* [[CS461 - Artificial Intelligence/Lectures/2022-10-26]]\n* [[CS461 - Artificial Intelligence/Lectures/2022-10-28]]\n* [[CS461 - Artificial Intelligence/Lectures/2022-10-31]]\n* [[CS461 - Artificial Intelligence/Lectures/2022-11-02]]\n* [[CS461 - Artificial Intelligence/Lectures/2022-11-04]]","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-10-26":{"title":"2022-10-26","content":"\n# Independence\n$$\nP(A \\wedge B) = P(A) \\cdot P(B)\n$$\n$$\n\\begin{align*}\nP(A \\mid B) \u0026= P(A)\\\\\nP(B \\mid A) \u0026= P(B)\n\\end{align*}\n$$\n\n# Bayes' Theorem\n\nMain page: [[CS461 - Artificial Intelligence/8 - Uncertainty/Bayes' Theorem]]\n\n$$\n\\begin{align*}\nP(A \\wedge B) \u0026= P(A \\mid B)P(B) = P(B \\mid A)P(A)\\\\\\\\\n\\frac{P(A \\mid B)P(B)}{P(A)} \u0026= P(B \\mid A)\\\\\\\\\n\u0026= \\frac{P(A \\mid B)P(B)}{P(A \\mid B)P(B) + P(A \\mid \\neg{B})P(\\neg{B})}\n\\end{align*}\n$$\n\n## Example\n\nConsider the problem of a brain tumor and associated headaches.\n\n* $P(BT) = \\frac{1}{10,000}$\n* $P(H \\mid BT) = 0.78$\n* $P(H \\mid \\neg{BT}) = \\frac{1}{400}$\n\nWhat's the probability of a brain tumor given severe headaches?\n$$\n\\begin{align*}\nP(BT \\mid H) \u0026= \\frac{P(H \\mid BT) \\cdot P(BT)}{P(H \\mid BT) \\cdot P(BT) + P(H \\mid \\neg{BT}) \\cdot P(\\neg{BT})}\\\\\\\\\n\u0026= \\frac{(0.78)(0.0001)}{(0.78)(0.0001) + (0.0025)(1 - 0.0001)}\\\\\\\\\n\u0026= \\frac{0.000078}{0.002775}\\\\\\\\\n\u0026\\approx 0.03 \\text{ or 3}\\\\%\n\\end{align*}\n$$\n\n**Note**: this will be on a quiz, only need to get through step 2.\n\n## Example 2\n\nPretend there are 20 potential terrorists in the country at any given moment.\n* $P(T) = \\frac{20}{300M} = 6.66 \\cdot 10^{-8}$\n\nWhat's the probability that someone *is* detected given they *are* a terrorist?\n* $P(D \\mid \\neg{T})$\n\nWhat's the probability that someone is *not* detected given they *are* a terrorist?\n* $P(\\neg{D} \\mid T)$\n* \n* $P(D \\mid T) = 0.95$\n* $P(\\neg{D} \\mid \\neg{T})$\n\nWhat's the overall probability that somebody is flagged regardless?\n$$\\begin{align*}\nP(D) \u0026= P(D \\mid T) \\cdot P(T) + P(D \\mid \\neg{T}) \\cdot P(\\neg{T})\\\\\n\u0026= (0.95)(6.66\\cdot 10^{-8}) + (1-0.999)(1-6.66\\cdot 10^{-8})\\\\\n\u0026\u003c 0.00099999 + \\dots\\\\\n\u0026\\dots \\text{ nearly 100}\\\\%\n\\end{align*}$$\n\n# Enter: The Naive Idiot\n\nCan we generalize [[CS461 - Artificial Intelligence/8 - Uncertainty/Bayes' Theorem]] to multiple variables?\n\n**Naive (Idiot) Bayes'**: we *assume* the variables are conditionally independent *even if that's not quite true*!\n* Why? We can stand some minor inaccuracies.\n* We know there will be some error, but *in some cases* a nearly-correct answer is better than no answer.\n\n# Sources of Uncertainty\n\n* **Frequentist View** ([Wikipedia](https://en.wikipedia.org/wiki/Frequentist_probability)): probabilities can be found by a repeatable, objective process.\n\t* Think law of large numbers\n* **Objectivist View**: probability is a fundamental *property* of a thing.\n* **Subjectivist View**: we can *decide* what is or isn't relevant on a case-by-case basis.\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-10-28":{"title":"2022-10-28","content":"\n# Logistics\n\n* **Midterm 2**\n\t* Monday November 7th\n\t* Chapters 5 - 9\n\t* [[CS461 - Artificial Intelligence/Midterm 2 Review]]\n\n# Lecture\n\n## Chapter 9 - Expert Systems\n\nThe first real use of AI\n\n* Early uses\n\t* Seismographs used for oil detection\n\nWhat makes somebody an expert?\n* Practice\n* Rules\n* Analysis/conclusion\n* Meta-knowledge (knowledge *about* knowledge)\n* Explicit redundancies and constrants\n\t* Pattern recognitions\n\n1. **Novice**\n2. **Advanced Beginner**\n3. **Competent**\n\t* starting to be able to recognize patterns\n\t* able to adjust what you're doing based on conditions\n\t* developing intuition, starting to get a feel for it\n4. Proficient\n\t* Recognizes situation and best choices\n\t* Devises solution\n5. Expert\n\t* \"Just knows\" what to do\n\nDouglas Hofstadter - *Godel, Escher, Bach*\n* argues that machines must recognize letters from their features (strokes, serifs, etc.) and not some holistic idea of similarity\n* argues that computers can't generate fundamentally new examples\n\n\n\u003e [!QUOTE] An Eternal Golden Braid\n\u003e \n\u003e Douglas Hofstadter argues that machines must recognize letters from their features (strokes, serifs, etc.) and not use holistic judgments of similarity.\n\u003e \n\u003e *\"Nobody can posess the 'secret recipe' from which all the (infinitely many) members of a category such as 'A' can in theory be generated. In fact, my claim is that no such recipe exists.\"*\n\n\n* Humans can:\n\t* solve problems\n\t* explain problems and solutions\n\t* continue learning\n\t* restructure knowledge\n\t* adapt to new situations\n\t* break rules\n\t* know limitations\n\t* degrade gracefully\n* Machines can\n\n| | Humans | Machines |\n|:-:|:-:|:-:|\n| solve problems | x | x |\n| explain problems and solutions | x | |\n| continue learning | x | ? |\n| restructure knowledge | x | |\n| adapt to new situations | x | |\n| break rules | x | |\n| know limitations | x | x |\n| degrade gracefully | x | x |\n\nExpert systems have a few features that humans don't!\n* Separate knowledge base from inference engine\n* Uniform representation\n* Inference engine - simple as possible\n* Redudancy\n\nExpert systems in general have *shallow* knowledge - a limited universe.\n* Not generally able to generalize or deduce new knowledge\n* Lack context: maybe they know the boiling point of water, but not that steam can drive turbines.\n\n## So you want to build an expert system\n\n1. Can the problem be solved easily with convential programming?\n\t* If so, don't use an expert system! Just solve it!\n2. Is the domain well-bounded?\n\t* More sharply-defined domains are better. If solving a problem requiers knowledge of multiple domains, an expert system will be hard to construct.\n3. Is there a need or desire for the system? (market)\n4. Are one or more experts available?\n5. Are decisions mostly heuristic?\n\t* Expert systems work best with inexact knowledge, uncertainty.\n6. Can we handle some incorrectness/incompleteness/contradiction?\n\t* These systems will almost always give *some* answer, even if it's wrong.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-10-31":{"title":"2022-10-31","content":"\n# Expert Systems\n\nWe've been talking about how to put together an [[CS461 - Artificial Intelligence/9 - Expert Systems/Expert Systems|Expert System]]\n* This is a problem of [[CS461 - Artificial Intelligence/9 - Expert Systems/Knowledge Engineering]]\n* It's hard for an expert to distill *why* they know something\n\n## Types of Knowledge\n\n* **Procedural**: what to do (rules, strategies)\n* **Declarative**: facts, concepts\n* **Meta-knowledge**: knowledge about knowledge\n* **Heuristic knowledge**: rules of thumb\n* **Structural knowledge**: rulesets, concept relations, how parts fit together\n\n## Building a Knowledge System\nOkay, how do we *build* knowledge systems?\n\n* **Generate and Test**\n* **Situation-Action Rules**\n\t* if-then\n\t* needs to be large enough to be meaningful, small enough to be managable\n* **Domain-Specific Knowledge**\n\t* We need to know enough about the problem domain to actually produce results consistent with the space.\n* **Flexibility of Knowledge Base**\n* **Line of Reasoning**\n\t* Solution and strategies for producing it should make sense to an expert.\n* **Multiple Sources of Knowledge**\n\t* Do we need auxiliary information unrelated to the task we're actually trying to solve?\n* **Explainability**\n\t* Should be able to explain \n\n\n\u003e [!NOTE] Paradox of Knowledge Engineering\n\u003e \n\u003e The more competent the experts, the less likely they'll be able to *explain* how they came to a conclusion.\n\u003e \n\u003e *further reading: page 271-277*\n\n## Examples\n\n* **DENDRAL**\n* **MYCIN**\n\t* Issue: 400 rules - how do we figure out which one to apply next?\n\t\t* **Demon Rules** don't participate in the inference process, just monitor memory looking for some triggering condition. When a trigger is satisfied, the conclusion is placed into memory.\n\t\t* **Rete (net) algorithm** lets us do a quick search of the rules by taking advantage of some properties of the KB.\n\t\t\t* **Temporal Redundancy**\n\t\t\t\t* Firing a rule usually only changes facts\n\t\t\t\t* Any given fact is usually only affected by the same rules\n\t\t\t\t* We have an index, can only look at the things we know are affected\n\t\t\t* **Structural Similarity**\n* **PROSPECTOR**\n\t* Fuzzy logic\n\t* First system to use [[CS461 - Artificial Intelligence/8 - Uncertainty/Bayes' Theorem]]\n\n# Case-Based Learning\n\nLooking at previous cases can help us develop *heuristics*, but we need to be careful about wh\n\nHow? Keep a data structure called a **case base** providing the following operations:\n* Retrieve\n* Reuse\n* Revise\n* Retain\n\n*This is complex* - we need to decide what to store, how to store it, how to manage indices, etc.\n\nWhat cases should we look at?\n* **Goal-directed**: organize results partially by goal\n* **Salient Features**: can we prioritize certain features?\n\t* example: in a medical diagnosis, try and identify people with similar symptoms.\n* **Specific Features**: maybe we don't need to *prioritize* features, just count them.\n* **Frequency**: are certain features occurring more frequently than others?\n* **Recency**: have certain features been observed more recently than others?\n* **Adaptibility**: maybe we should select the features that are easiest to change\n\nCase-based systems aren't usually great at identifying *why* a particular case was chosen.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-11-02":{"title":"2022-11-02","content":"\n# Machine Learning\n\n* **Unsupervised**\n\t* Clustering is a common goal: tell us what category things fall into\n* **Supervised**: we generally have at least *some* idea of what we're looking for or a task we want to carry out\n* **Reinforcement**: ask the system to make choices, at some point give feedback on how good that choice was\n* **Decision Trees**\n\n\u003cdiv class=\"svg\"\u003e\n\n![[Excalidraw/Drawing 2022-11-02 13.19.08.excalidraw.svg]]\n\n\u003c/div\u003e\n\n\u003e [!ERROR] ERROR\n\u003e \n\u003e Textbook calls the **test** set a *validation* set - this is incorrect!\n\n* Training Data\n* Test Data\n\t* Used to measure error while training a model\n\t* Helps prevent *overfitting*\n* Validation Data\n\t* No machine learning model **ever** sees this stuff!\n\t* Makes sure you came out with something consistent\n\nThe **target function** - thing we're trying to measure - should also have a small number of variables.\n\nWe might also have missing data, input errors, etc.\n\nWe may also have conflating factors. How do we just pick *one* variable?\n* **Information Gain**\n\t* [Hartley Function](https://en.wikipedia.org/wiki/Hartley_function) - if the base of the logarithm is 2, then the unit of uncertainty is the *bit*. $$H(p) = \\sum{-p\\lg{p}}$$\n\nNo matter how much data we have, it's not all the data there is.\n\n**Key Idea**: Information gain\n* $H_0 =$ no info. This follows a $\\chi^2$ distribution.\n* This gives us *some* way of estimating what is and isn't noise.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-11-04":{"title":"2022-11-04","content":"\n# Logistics\n\nExam is Monday 2022-11-07\n\n* 5-9 is all fair game, 8 is pretty hard\n* Will have resolutions\n\t* Forward/backward chaining\n\t\t* Advantages/disadvantages of each\n\t\t* How to use each when proving a statement from a KB\n\t* Know why some pair will or won't resolve\n\t  $$\\begin{align*}\n\t  a \u0026\\vee b \\vee c\\\\\n\t  \\neg{a} \u0026\\vee \\neg{b} \\vee c\\\\\n\t  \\hline\n\t  \u0026\\text{doesn't resolve}\n\t  \\end{align*}$$\n* Gotta know Bayes' Theorem (and how to convert English statements to probabilistic statements)\n  $$\\begin{align*}\n  P(B \\mid A) = \\frac{P(A \\mid B) P(B)}{P(A \\mid B)P(B) + P(A \\mid \\neg{B})P(\\neg{B})}\n  \\end{align*}$$\n\t* $P(tumor) = 1\\cdot 10^{-5}$\n\t* $P(test \\mid tumor) = 0.999$\n\t* $P(test \\mid \\neg{tumor}) = 0.001$\n\t* $P(tumor \\mid test) = ?$\n* Some first-order logic\n\t* All $x$ are $y$ becomes $\\forall{n}: x(n) \\implies y(n)$\n\t* Some $A$'s are $B$ becomes $\\exists{x}: A(x) \\wedge B(x)$\n\t* Example:\n\t\t* All genies ride carpets\n\t\t\t* $\\forall{x}: G(x) \\implies C(x) \\equiv \\neg{G(x)} \\vee C(x)$\n\t\t* Aladdin rides carpets\n\t\t\t* $C(Aladdin)$\n\t\t* Therefore, Aladdin is a genie.\n\t\t\t* Try to \n\t\t\t* $\\neg{G}(Aladdin) \\vee C(Aladdin)$\n\t\t\t\t* We want to show Aladdin is a genie, so add a clause saying he isn't and find a resolution.\n\t\t\t* $\\neg{G}(Aladdin) \\vee C(Aladdin)$\n\t\t\t* $\\neg{G(Aladdin)}$\n\t\t\t\t* ..nothing to resolve here!\n\t\t* What if we say all genies *and only genies* ride carpets?\n\t\t\t* $\\forall{x} : G(x) \\iff C(x)$\n\t\t\t\t* $G(x) \\implies C(x) \\equiv \\neg{G(x)} \\vee C(x)$\n\t\t\t\t* $C(x) \\implies C(x) \\equiv \\neg{C}(x) \\vee G(x)$\n\t\t\t* Now our predicates:\n\t\t\t\t* $\\neg{G(Aladdin)} \\vee C(Aladdin)$\n\t\t\t\t* $\\neg{C(Aladdin)} \\vee G(Aladdin)$\n\t\t\t\t* $C(Aladdin)$\n\t\t\t* Take 2 and 3 - resolves to show $G(Aladdin)$.\n* Know high-level ideas of specific technologies like DENDRAL/MYCIN/PROSPECTOR (but we're not going deep into history)\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-11-09":{"title":"2022-11-09","content":"\n# Recap\n\nWe were talking about decision trees and the issue of what decision to make next\n\n$$H(p) = \\Sigma{(-p\\lg{p})}$$\nExample:\n* 58 students in class\n* 37 got a B or higher. $\\frac{37}{58} \\approx 0.6379$\n* 21 got a C or lower. $\\frac{21}{58} \\approx 0.3621$\n* 26.452 bits of information\n\n\n* Review session\n\t* 18/22 got B or above\n\t* 4/22 got a C or lower\n\t* *Information: 6.059 bits*\n* Not review session\n\t* $\\frac{19}{36}$ got a B or lower\n\t* $\\frac{17}{36}$ got a B or lower\n\t* *Information: 17.953 bits*\n* Total of 23.9842 bits\n* Where'd the 2 bits go?\n\t* Explained by whether or not a student went to the review session\n\n\n\u003e [!NOTE] QUIZ\n\u003e \n\u003e Hare won't ask us to calculate this, but will want us to understand what we're doing and why.\n\nAdvantages:\n* simple\n* straightforward\n* easy to calculate\n* works reasonably well\n\nBriefly covered [[CS461 - Artificial Intelligence/10 - Decision Trees/ID3 Algorithm]]\n\n# Neural Networks\n\n*Inspired by* biology - not *modeling*. There are some similarities to how actual neurons work, but it's mostly a good analogy.\n\nIf a neuron activates (exceeds its electrical activation threshold), sends signal down the *axon*.\n\n![[images/weights-and-biases.svg]]\n\nSigmoid can either be normal(?) or hyperbolic tangent\n\n![[images/fully-connected-network.svg]]\n\nAt some point, we'll have an output layer. This is typically *one neuron per category*.\n\n* Perceptron Learning\n\t* Find derivative of total sum as function of the weights: $\\frac{dF}{dw}$\n\t* Take what we*got* vs what we *should have got*: $y^\\prime - y = erv$\n\t* What we do to avoid overcorrecting: set a *learning rate* $\\alpha$\n\t  $$\\frac{dF}{dw}\\cdot \\alpha$$\n\t* Given an output and a target output, we know the sign, direction, and magnitude of the change we need to make to any given weight\n\t* If our data is *linearly separable*, we'll be good! That's a **big caveat** though\n* Linearly Separable\n\t* For a visual metaphor, think of a bunch of red and blue on a graph. Can you draw a clear line between the two color categories?\n\t* If data is **not** linearly separable, a perceptron can't distinguish between them\n\n* Gradient Descent\n\t* Need a partial derivative\n\t* Imagine we have a function $F(x, y, z)$.\n\t* The gradient of $F$, notated $\\nabla{F}$, is\n\t  $$\\nabla{F} = \\frac{\\delta{F}}{\\delta{x}} + \\frac{\\delta{F}}{\\delta{y}} + \\frac{\\delta{F}}{\\delta{z}}$$\n\t* The gradient signifies the vector and direction of steepest descent on our error curve","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-11-14":{"title":"2022-11-14","content":"\n# Videos\n\n1. [Deep Neural Networks are Easily Fooled](https://www.youtube.com/watch?v=M2IebCN9Ht4)\n\nConsider the following videos assigned:\n* [Playlist](https://www.youtube.com/watch?v=aircAruvnKk\u0026list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi)\n\t* But What *Is* a Neural Network?\n\t* Gradient Descent: How Neural Networks Learn\n\t* What is Backpropagation Really Doing?\n\t* Appendix: Backpropagation Calculus\n* [How Convolutional Neural Networks Work](https://www.youtube.com/watch?v=FmpDIaiMIeA)\n\n# Lecture\n\nConvolutional neural networks\n* It's useful to image a pixel grid for an image, but the idea is \"multidimensional\"\n* Essentially build up a filter\n\nLoss Function\n* Blocking a legitimate email is 10x as bad as letting a spam email through\n\nOvertraining is *always* a risk - how do we reduce it?\n1. Lower the learning rate.\n\t* Any time we find an adjustment we need to make, we multiple it by some constant $0 \u003c \\alpha \u003c 1$.\n\t* During training, we can gradually reduce the learning rate.\n\t\t* Each epoch, set $\\alpha \\gets 0.999\\alpha$\n2. Add noise to training data.\n\t* Rather than seeing the same image every single time, it's seeing a dozen similar but distinct images.\n\t  ![[images/add-noise-strategy.svg]]\n3. Mini-batch training\n4. Remove some amount of parameters\n5. \"Optimal brain damage\"\n\t* Doesn't scale up well\n6. Dropout\n\t* Closely related to optimal brain damage\n\t* For each batch, some specified proportion are just dropped out at random\n\t* At each batch, you're training a *slightly* different network\n7. More data!\n8. Regularization\n\t* $L_1$ - tends to push smaller weights down faster (*sparse network*)\n\t* $L_2$ - tends to lead to weights getting uniformly small\n\n[Tensorflow Playground](https://playground.tensorflow.org)\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-11-16":{"title":"2022-11-16","content":"\nStarted with a discussion on [Greg Rutkowski's unwanted influence in AI image generation.]([https://www.technologyreview.com/2022/09/16/1059598/this-artist-is-dominating-ai-generated-art-and-hes-not-happy-about-it/](https://www.technologyreview.com/2022/09/16/1059598/this-artist-is-dominating-ai-generated-art-and-hes-not-happy-about-it/)[](https://www.technologyreview.com/2022/09/16/1059598/this-artist-is-dominating-ai-generated-art-and-hes-not-happy-about-it/))\n\n* [Shoshana Zuboff - The Age of Surveillance Capitalism](https://en.wikipedia.org/wiki/The_Age_of_Surveillance_Capitalism)\n\nThree questions\n* **Knowledge**: *what* is known and *who* knows it?\n* **Legitimacy**: who says it's *okay* for them to know it?\n* **Power**: who controls that legitimacy?\n\nMost often we use our network for classification. One neuron per output. 1-hot classification if we want a solid answer, softmax if we want a probability distribution.\n\nThis isn't bad, but every network has a chance of error. What if we train a network to identify misclassifications by another network? This is what's called an **ensemble** method.\n* First practical applications were mail-sorting by reading handwritten digits.\n* Instead of *a* neural network, train 3 networks.\n\t* Train the *first* network on the full data set, then test on the full data set.\n\t* Train the *second* network on the cases that the first network *missed*, test on the full data set.\n\t* Train the *third* network on cases that the first and second networks differed (tie-breaker).\n* If you can get 2 out of 3 networks to agree, you've got yourself a classification!\n* Assume your training is good. Increase weights of things that were *misclassified*, decrease correct classifications.\n\n![[CS461 - Artificial Intelligence/Lectures/Untitled Diagram.svg]]\n\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-11-18":{"title":"2022-11-18","content":"\n# Introduction\n\n**Temporal Difference Learning**: the score at position $n$ ought to help predict the score at position $n+1$.\n\n*Any* linear function can be represented by a single hidden layer (of some  sufficient size).\nNonlinear functions have to have multiple hidden layers\n\n# Teaching a Network\n* Initially randomized\n\t* Gaussian with mean 0\n\t* SD 1\n\t* Uniform in $(-1, 1)$\n* Present network with training cases\n* Repeat until all training cases are properly\n\n# Backpropagation\n\n* Compare known and expected values\n* If predicted value was too high:\n\t* input weights leading to higher values are decreased, lower increased\n\n# Backgammon\n\nBackgammon is well-suited to neural networks because...\n* Stalemate is impossible - every game eventually results with a win or loss\n* Evaluation function can be treated as continuous and locally linear\n\t* In general, NNs do better with broad strategy vs. sharp tactics\n* Dice force exploration of different parts of the game tree\n\t* Some randomness helps reduce the chance of a quirky evaluation function reinforcing \"oddball\" moves\n\n## Building a Backgammon Network\n\nMost of this is based on Tesauro's work in the 1990s. He'd already written an earlier program (Neurogammon) that leveraged extensive game strategy knowledge.\n\nHe was interested in seeing how well a neural network could learn given *no* game knowledge.\n\n## Training the Network\n\nConfiguration:\n* 40 neurons in 1 hidden layer\n* 4 output neurons representing game or gammon for each color\n* weights initialized uniformly in $(-0.5, 0.5)$\n\nNetwork was set to play against *itself*\n* Initially, it's obviously picking moves more or less at random\n* After the first 100-200 games, both play and learning began improving quickly\n\nLinear functions were learned first, more advanced/abstract strategy picked up over longer periods of time.\n\n# Temporal Difference Learning\n\nEvaluation at time $t$ should be a reasonably good predictor of evaluation at time $t+1$.\n* Thus, we can use $t+1$'s output as the value that $t$ *should have* produced.\n\t* Learn with parameter $\\lambda$\n* Likewise, state $t-1$ should have been a (weaker) prediction of $t+1$.\n\t* Learn with parameter $\\lambda^2$\n* Moving back $k$ steps uses $\\lambda^k$ until that falls below some small positive constant.\n* When the game is completed, use output vector (e.g., $(1, 0, 0, 0)$) for each position in same process.\n\n# How Did it Work?\n\nThe system played 200,000 games against itself and eventually reached the level of a strong casual player (\"intermediate\" rating).\n* Remember, it did this with *no* strategy knowledge built-in!\n* It only knew a representation of the board position.\n* Neurons were found that corresponded to particular game strategies.\n\nOnce strategy knowledge was added explicitly, it ranked among the top human players in the world. Some neurons included:\n* Number of blots within range 1-6 of opponent's pieces (direct shots)\n* Number of blots within range 7-12 of oppenents pieces or hittable by 4/4, 5/5, or 6/6 (indirect shots)\n* Possession of doubling cube\n\nThe next version...\n* refined game knowledge\n* added lookahead\n\t* forward pruning, provided good tactical analysis\n* moved to 6 output neurons (to represent backgammons)\n\n# Current State\n\nSoftware can now beat *any human player*. These programs are used for practice, training, and analysis.\n\nProgrammers noted that computer programs tended to make certain moves (splitting back pair) sooner than theory said they should. That was assumed to be a quirk of the program until multiple versions showed the same quirk! A follow-up detailed rollout analysis showed that theory was lacking, the computer's play was superior.\n\n# Quantifying Luck\n\nThis is the basis of *variance reduction* in rollout analysis.\n* Over many games, dice will even out, but within one game they can be very uneven.\n* A running total of net luck gives us a way of assessing the role of luck within a game.\n* This can make 1 game played with variance reductiona s useful for analysis as 20-25 games played without it.\n\nAside: how does a program weaken its play?\n* Add some Gaussian randomness to each move's evaluation, then resort the moves.\n\nAside 2: \"this program cheats on dice rolls!\"\n* The effect of \"good play\" is to increase the number of future rolls on which something useful can be done, and decrease the number of rolls the opponent can do anything with. This might look like the computer gives themselves extra luck or fudges the dice rolls to perform better, but really it's just strategy farther in advance than we can recognize.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Midterm-2-Review":{"title":"Midterm 2 Review","content":"\n# Chapters Covered\n\n* [[CS461 - Artificial Intelligence/5 - Logic]]\n\t* Forward Chaining\n\t* Backward Chaining\n* [[CS461 - Artificial Intelligence/6 - Knowledge Representation]]\n* [[CS461 - Artificial Intelligence/7 - Production Systems]]\n* [[CS461 - Artificial Intelligence/8 - Uncertainty]]\n\t* Fuzzy Logic\n* [[CS461 - Artificial Intelligence/9 - Expert Systems]]\n\n# Questions\n\n## 5 - Logic\n\n## 6 - Knowledge Representation\n\n## 7 - Production Systems\n\n## 8 - Uncertainty\n\n## 9 - Expert Systems","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/CS461-Artificial-Intelligence/Overview":{"title":"CS461 - Introduction to Artificial Intelligence","content":"\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/11-The-Dynamic-Planet/":{"title":"7 - The Dynamic Planet","content":"\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/":{"title":"4 - Energy Balance \u0026 Temperature","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Albedo":{"title":"Albedo","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Chapter-4-Questions":{"title":"Chapter 4 Questions","content":"\n1. Explain the **Greenhouse Effect**.\n2. What factors explain the lower atmosphere's blue color?\n3. What process determines the red/orange colors of a sunset?\n4. What is **heat**?\n5. Describe the difference between **heat** and **temperature**.\n6. What is **transmission** with respect to radiation?\n7. Explain the difference between **scattering** and **refraction**.\n8. Explain the **Rayleigh Scattering Principle**.\n9. What is **latent heat**?\n10. What is **sensible heat**?\n11. What is **specific heat**?\n12. Describe the difference between **convection** and **advection**.\n13. Describe the difference between **conduction** and **radiation**.\n14. What are the two most prevalent **greenhouse gases**?\n15. What are the four **principle temperature controls**? Explain each.\n16. What are the **nonradiative** processes by which energy transfers from Earth's surface to the atmosphere?\n17. What is an **isotherm**?\n18. What is the **thermal equator**?\n19. What is **continentality**?\n20. How does the specific heat of land compare to the specific heat of water? What does this mean for the speed at which each heats?\n21. How do **marine** effects on temperature differ from **continental** effects on temperature?\n22. Explain **polar amplification** and the mechanism that causes it.\n23. What are the principle causes of the **urban heat island** effect?\n24. Explain the difference between **cloud-albedo forcing** and **cloud-greenhouse forcing**.\n25. How are physical greenhouses different from the **greenhouse effect**?\n26. What is a **dust dome**? How does it relate to the **urban heat island** effect?\n27. Why does the **thermal equator** shift position anually?\n28. How does temperature differ in cities as compared to rural areas? Explain the difference.\n29. Is the temperature on a cloudy night likely to be warmer or colder than a clear night? Explain why.\n30. What two factors determine the **wind-chill** temperature index?\n31. What two factors determine the **heat index**?","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Energy-Pathways":{"title":"Energy Pathways","content":"\nThe four energy pathways are:\n1. Reflection and [[ENV110 - Environmental Science/4 - Energy Balance and Temperature/Albedo]]\n2. Scattering [[ENV110 - Environmental Science/4 - Energy Balance and Temperature/Rayleigh Scattering]]\n3. Refraction\n4. Absorption\n\n# Reflection and Albedo\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Heat-Transfer":{"title":"","content":"**Radiation**: transfer of heat in electromagnetic waves.\n**Convection**: \n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Overview":{"title":"4 - Energy Balance and Temperature (Overview)","content":"\n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Principle-Temperature-Controls":{"title":"","content":"# Latitude\n\n# Altitude\n\n# Cloud Cover\n\n# Land/Water Heating Differences\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Rayleigh-Scattering":{"title":"Rayleigh Scattering","content":"\nThe **Rayleigh Scattering Principle** refers to shorter wavelengths of light experiencing more scattering.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/The-Greenhouse-Effect":{"title":"The Greenhouse Effect","content":"\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/4-Energy-Balance-and-Temperature/Vocabulary":{"title":"","content":"1. Radiation\n2. Convection\n3. Conduction\n4. Advection\n5. Sensible Heat\n6. Latent Heat\n7. Reflection\n8. Albedo\n9. Scattering\n10. Rayleigh Scattering Principle\n11. Refraction\n12. Absorption\n13. Energy Surplus \u0026 Deficit\n14. Continentality\n15. Specific Heat Capacity of Land and Water\n16. Thermal Equator\n17. Temperature Range\n18. Annual Temperature Patterns\n19. Wind Chill\n20. Heat Index","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/5-Atmospheric-and-Oceanic-Circulation/":{"title":"5 - Atmospheric \u0026 Oceanic Circulation","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/5-Atmospheric-and-Oceanic-Circulation/Chapter-5-Questions":{"title":"Chapter 5 Questions","content":"\n1. What is the relationship between **air pressure** and **density**? What about **air pressure** and **temperature**?\n2. What is the difference between an **isotherm** and an **isobar**?\n3. What are **geostrophic winds**? What are their two components?\n4. What are the three components of **surface winds**?\n5. How does the spacing of **isobars** on a weather map relate to wind speed?\n6. How would surface winds travel on a non-rotating Earth?\n7. In which direction does the Earth rotate?\n8. How does the **Coriolis force** appear to deflect atmospheric and oceanic circulations?\n9. Describe how the **Coriolis force** changes as a function of latitude.\n10. As you travel from the *North Pole* to the Equator, does the **Coriolis force** push you East or West? Why?\n\t* How is this different from travelling from the Equator to the North Pole?\n\t* How do these answers change if you travel from/to the *South Pole* instead?\n11. Why do high- and low-pressure areas exist in the atmosphere?\n12. How is upper-air circulation, especially the *ridges* and *troughs*, related to surface-pressure systems?\n13. Why is *warm* air typically associated with *low*-pressure areas? Why is *cold* air typically associated with *high*-pressure areas?\n14. At the surface, **prevailing westerly winds** are most often located in which latitudinal zone?\n15. During the day, people on the coast of Florida will usually experience a *cool sea breeze*. Describe the mechanisms that cause this effect.\n16. During the day, people in a mountain valley will usually experience a *cool mountain breeze*. Describe the mechanisms that cause this effect.\n17. Areas with *low* atmospheric pressure are typically warmer and wetter than areas with *high* atmospheric pressure. Why?\n18. What does it mean for air to **converge**? **Diverge**?\n19. When air **converges**, does it typically rise or fall? What weather pattern does this create?\n20. How does atmospheric convergence/divergence relate to *surface* air temperature?\n21. Explain the connection between **divergence aloft** and **suface lows**.\n22. Explain the connection between **convergence aloft** and **surface highs**.\n23. The intertropical convergence zone (ITCZ) is characterized by **convergence** and **uplift** of warm surface air. Explain why this is the case.\n24. What is a **Rossby wave**? What force causes it?\n25. Describe the **jet streams**.\n\t* What conditions cause jet streams to form?\n\t* How might they affect airline schedules for the trip from New York to San Francisco?\n\t* How might they affect the return trip to New York?\n26. Explain the causes of changing wind patterns between night and day in *coastal* areas.\n\t* What similar patterns develop in mountains and valleys?\n27. Describe the seasonal pressure patterns that produce the Asian **monsoon** circulation.\n28. What force causes the wind to flow from east to west instead of pole to equator?\n29. Imagine a polar bear swimming South from polar regions to find land. He can either go to Alaska or Russia. Where will he land?\n30. Are **Polar Cells** thermally *direct* or thermally *indirect*? Why?\n31. Are **Ferrel Cells** thermally *direct* or thermally *indirect*? Why?\n32. Due to the rotation of the Earth, wind in the Northern Hemisphere is deflected to the (East/West) of its original movement. What is the name for this effect?\n33. What is the main atmospheric driver of oceanic **surface currents**?\n34. What drives **thermohaline circulation**? Describe the correlation between temperature, density, and salinity.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/5-Atmospheric-and-Oceanic-Circulation/Global-Atmosphere-Circulation":{"title":"Global Atmosphere Circulation","content":"\n# Wind\n**Primary Circulation**: general global circulation\n**Secondary Circulation**: related to migratory high-/low-pressure systems\n**Tertiary Circulation**: local winds, temporal weather patterns\n* Meridional flows move along meridians\n* Zonal flows move along parallels\n* Winds are named for the direction from which they *originate*\n\n## Driving Forces\n* **Pressure gradient** force (main driver)\n\t* Wind results from a *horizontal* difference in air pressure\n\t* Isobar: equal pressure line\n\t* \n* **Coriolis** force: deflection\n\t* Due to rotation of the Earth\n\t* Northern Hemisphere deflects to the *right*\n\t* Southern Hemisphere deflects to the *left*\n* **Friction** force: slowing-down\n\n## Models\n### Single-Cell Model\n* Strong heating at the equator causes\n\t* less dense air to rise\n\t* diverge towards the pole\n\t* sink back to surface\n\t* then return to equator\n* **Problem**: predicts that surface winds would flow straight towards the equator\n### Single-Cell with Rotation\n* Also called the **Coriolis Effect**\n\t* Hadley described this model 100 years before the Coriolis force was mathematically expressed in 1835\n* ITCZ: Intertropical Convergence Zone\n* Even with rotation, the single-cell model doesn't explain the winds blowing from the west in mid-latitudes and the subtropical desert.\n### Three-Cell Model\n* Idea: divide the circulations in each hemisphere into three cells:\n\t* **Hadley** Cell (tropics/subtropics)\n\t\t* *thermally direct* - driven by thermal energy\n\t\t* Strong solar heating leads to rising air, diverges towards the poles\n\t\t\t* creates *equatorial lows* (low pressure), lots of precipitation\n\t\t* Higher air moves towards the poles, gradually acquiers a west-to-east motion\n\t\t* Air descends towards 30$^\\circ$ latitudes to form *subtropical highs* - desert conditions\n\t* **Ferrel** Cell (middle latitudes)\n\t\t* Air flows away from subtropical highs towards subpolar lows, acquires a large westerly component due to the Coriolis force\n\t* **Polar** Cell (high latitudes/polar regions)\n\t\t* Surface air moves from polar highs (extremely cold) to subpolar lows (relatively warm)\n* Is this realistic? Yes and no!\n\t* Yes\n\t* No\n\t\t* Doesn't take into account land-sea contrasts, topography information\n## Trade Winds\n* ","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/5-Atmospheric-and-Oceanic-Circulation/Jet-Streams":{"title":"Jet Streams","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/5-Atmospheric-and-Oceanic-Circulation/Monsoons":{"title":"Monsoons","content":"\n**Monsoon**: seasonal shifting winds that determines precipitation, due to heat capacity difference between land and sea\n* Remember: water has a higher heat capacity, less dramatic changes\n* **Summer**\n\t* warm humind winds blowing from ocean\n\t* convective lifting over mountain barrier causes precipitation\n\t* Continental *low* pressure, oceanic *high* pressure\n* **Winter**\n\t* Dry cool winds blowing seaward from continent\n\t* Strong center of high pressure over continents\n\t* Continental *high* pressure, oceanic *low* pressure","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/5-Atmospheric-and-Oceanic-Circulation/Overview":{"title":"5 - Atmospheric and Oceanic Circulation (Overview)","content":"\n* **Trade Winds** (easterly)\n\t* Converge toward *equatorial low pressure* from regions of *subtropical high pressure*\n\t* Warm, moist, *rising* air\n* **Westerlies**\n\t* Generated in subtropics\n\t* Clockwise rotation\n\t* Cool, dry, descending air\n\t* Predominant surface wind pattern for the mid-latitudes (us)\n* **Polar Easterlies**\n\t* Generated at the poles; predominant surface wind pattern\n\t* Polar easterlies, air mass conflict with Westerlies, source of winter storms","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/5-Atmospheric-and-Oceanic-Circulation/Rossby-Waves":{"title":"Rossby Waves","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/6-Atmospheric-Moisture/":{"title":"6 - Atmospheric Moisture","content":"\nPart of [[ENV110 - Environmental Science/Overview]]","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/6-Atmospheric-Moisture/Chapter-6-Questions":{"title":"Chapter 6 Questions","content":"\n1. Describe the molecular structure of water's three physical states: **ice**, **water**, and **water vapor**.\n2. What are the six processes behind water's three **phase changes**?\n\t* For each, what is the heat exchange (absorption vs. release)?\n3. What is the relationship between temperature and **humidity**?\n4. What does it mean for air to be at **saturation**?\n5. Describe the following *expressions* of humidity.\n\t* **Vapor Pressure**\n\t* **Specific Humidity**\n\t* **Relative Humidity**\n\t* **Dew-Point Temperature**\n6. What is **latent heat**? How is it involved in the phase changes of water?\n7. Where is most **freshwater** contained?\n8. What is meant by **dew-point temperature** and how does it relate to the formation of dew?\n9. How does the daily trend in **relative humidity** values compare with the daily trend in air temperature?\n10. What are **cloud-condensation nuclei**?\n11. What are the basic forms of clouds?\n12. Describe the composition of clouds at different altitudes.\n13. What type of cloud is **fog**?\n14. Describe the mechanism by which fog is formed.\n15. Describe the **collision-coalescence process**.\n16. What is a **mixed-phase** cloud?\n17. Describe the process of ice crystal growth that commonly occurs in **cold** and **mixed-phase** clouds.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/6-Atmospheric-Moisture/Vocabulary":{"title":"","content":"1. Water vapor pressure\n2. Relative humidity (RH)\n3. RH vs. temperature\n4. Maximum specific humidity\n5. Saturation\n6. Dew-point temperature\n7. Cloud condensation nuclei (CCN)\n8. Condensation\n9. Cloud/fog formation\n10. Cloud seeding\n11. Precipitation processes\n\t1. in warm clouds\n\t2. in cold clouds","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/7-Weather/Fronts":{"title":"Fronts","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/7-Weather/Midlatitude-Cyclones":{"title":"Midlatitude Cyclones","content":"","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/7-Weather/Orographic-Lifting":{"title":"Orographic Lifting","content":"\nOro means \"mountain\"\n**Orographic lifting** occurs when air is forced to ascend upslope as it is pushed against a mountain.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/7-Weather/Tornados":{"title":"Tornados","content":"\nA **tornado** is a violently rotating column of air extending downwards from a cumulonimbus - deep convection - cloud.\n\n* Tornados can range from a few meters to over 4 kilometers in diameter and can last anywhere from a few seconds to tens of minutes.\n* Energy comes from the condensation of a large amount of water vapor in clouds.\n\n# Development\n\nWind shears occur when stronger winds higher in the atmosphere overtake weaker winds closer to the surface, causing a rolling motion along the horizontal axis.\n\nAs a thunderstorm forms, air is pulled up (updraft). Surface air flows in on the surface and continues to rotate and lift into a *supercell*.\n* Clouds form an *anvil* structure above the top of the thunderstorm.\n![[images/development-of-tornados.png]]\n# EF Scale\n\n* **EF-0 (Gale)**: \"minor\" damage\n\t* 65-85mph winds, about highway speed\n* **EF-1 (Weak)**: \"moderate\" damage\n* **EF-2 (Strong)**\n* **EF-3 (Severe)**\n* **EF-4 (Devastating)**\n* **EF-5 (Incredible)**\n\t* up to 200mph wind\n\n# Tornado Alley\n\nThe **tornado alley** phenomenon is a result of the convergence of cold, dry air and warm, moist air converging on the American midwest.\n\nOver the last several decades, we've noticed a dramatic increase in tornados to the East of what we typically consider Tornado Alley[^1]. We still don't have a perfect explanation for this expansion, but the warming climate trend seems to be a good fit.\n\n# Seasonality\n\n**Tornado Season** typically runs from April to July with a peak in May (followed closely by June). This trend has *increased* in recent decades.\n\n\n\n[^1]: [Spatial trends in United States tornado frequency](https://www.nature.com/articles/s41612-018-0048-2?utm_source=commission_junction\u0026utm_medium=affiliate)","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/7-Weather/Tropical-Cyclones":{"title":"Tropical Cyclones","content":"\n**Tropical Cyclones** are rotating storm systems which originate over warm, tropical waters.\n\n# Energy Source\n\nTropical cyclones are powered by the **latent heat** of condensation. The warmer the ocean and atmosphere, the more powerful the storm.\n\n\n\u003e [!Question] Equatorial Hurricanes\n\u003e \n\u003e Why don't we see hurricanes form along the equator?\n\u003e \n\u003e Tropical cyclones are *rotational* storms - this requires energy contribution by the Coriolis Force, which is very weak along the Equator.\n\n\n# Classification\n\n* **Tropical Distrubance**\n* **Tropical Depression**\n* **Tropical Storm**\n* Highest level has different names:\n\t* **Hurricane** (Atlantic/East Pacific)\n\t* **Typhoon** (West Pacific)\n\t* **Cyclone** (Indian Ocean, Australia)\n\t* **Super Typhoon** (West Pacific)\n\n# Formation\n\nThe central area of a hurricane is called the **eye**, which is quiet and warm.\n\nAround the eye is the **eyewall**, which is the region with the most intense precipitation.\n\n# Hurricane Scale\n\n* Category 1: some damage to homes\n* Category 2: extensive damage to homes, major roof and siding damage\n* Category 3: devastating damage, removal of roofs and gables\n* Category 4: catastrophic damage, severe damage to roofs and walls\n* Category 5: catastrophic damage, total roof failure/wall collapse on high percentage of homes\n\n# Seasonality\n\n**Hurricane Season** typically runs from June through November.","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/Lectures/":{"title":"Lectures","content":"\nPart of [[ENV110 - Environmental Science/Overview]]\n\n* [[ENV110 - Environmental Science/Lectures/Lecture 19]]\n* [[ENV110 - Environmental Science/Lectures/Lecture 20]]","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/ENV110-Environmental-Science/Lectures/Lecture-19":{"title":"Lecture 19","content":"\n1. What causes the wind to flow from east to west instead of pole to equator\n\t* Rotation of the earth\n2. Are Polar Cells thermally direct or thermally indirect?\n\t* Thermally *direct* - air rises in warm areas while sinking in cold areas\n3. Imagine a polar bear swimming South from polar regions to find land. He can either go to Alaska or Russia. Where will he land?\n\t* He'll follow the polar easterlies and head West to Russia.\n4. Are Ferrel cells thermally direct or thermally indirect?\n\t* Thermally *indirect* - warm air sinks\n\t* Think of Ferrel cells as a *consequence* of the thermally direct Hadley/Polar cells\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/Lectures/Lecture-20":{"title":"Lecture 20","content":"\n# Three States of Water \u0026 Energy Transfer\n\n| Release | Absorption |\n|:-:|:-:|\n| Freezing | Melting |\n| Condensing | Evaporating |\n| Depositing | Sublimiation |\n\n\u003e [!QUESTION] QUESTION\n\u003e \n\u003e If you go from gaseous water to liquid water, is energy absorbed or released?\n\u003e \n\u003e * **How to Answer**: gas particles have higher energy than particles in liquids, think of the gas particles bouncing around a bunch.\n\n# Atmospheric Moisture\n\n**Water Vapor Pressure** is the pressure of water vapor in the air, expressed in terms of *partial pressure*.\n\n## Humidity\n\n**Humidity** refers to water vapor content in the air.\n\n* Primarily a function of air temperature.\n\t* moisture condenses in cool air\n\t* warm air has more moisture capacity\n\n**Relative Humidity** refers to the ratio of water vapor prsent to maximum *potential* to hold water vapor.\n$$\\text{relative humidity} = \\frac{\\text{actual water vapor in the air}}{\\text{maximum possible (at that temperature)}} \\cdot 100\\\\%$$\n\nSince warmer air has a higher maximum capacity for water vapor, the same *actual* humidity will have different *relative* humidities at different temperatures and times of day.\n\n**Specific Humidity** is the mass of water vapor per unit mass of air.\n* The maximum specific humidity is positively correlated with temperature.\n* Key idea: warmer air holds mor ewater vapor.\n\n### Saturation and Dew-Point Temperature\n\n**Saturation** refers to the state at which relative humidity is 100%.\n\n**Dew-Point Temperature** is the temperature at which:\n* a given mass of air becomes saturated\n* net condensation begins to form water droplets.\n\n\u003e [!NOTE] NOTE\n\u003e \n\u003e Dew-point temperature is always *less than or equal to* the actual temperature.\n\n\n\u003e [!QUESTION] QUESTION\n\u003e \n\u003e A kilogram of air at $40 ^\\circ C$ has a specific humidity of $12g$, so what is the *relative humidity*?\n\u003e \n\u003e * **How to Answer**: use the maximum specific humidity chart.\n\u003e \n\u003e What is the *dew-point temperature*?\n\u003e\n\u003e * **How to Answer**: find the point on the curve where the maximum specific humidity is $12g$. In this case, the answer is somewhere around $15 ^\\circ C$.\n\n\nHow are temperature and humidity related?\n\nAir temperature determines ability to evaporate or condense vapor.\n\n* Air temperature and \u003cu\u003erelative\u003c/u\u003e humidity are *inversely* related.\n\t* **Daily**: Remember, as temperature increases the air gains a higher capacity for water vapor. As the day warms up, the *relative* humidity will drop.\n\t* **Seasonally**: Winter has a lower overall temperature\n* Air temperature and \u003cu\u003emaximum specific\u003c/u\u003e humidity are *positively correlated*.\n\nAtmospheric moisture content has a large impact on the meteorological prediction of clouds and precipitation.\n\n## Clouds\n\n### Cloud Formation Processes\n\nA **cloud** is a group of water droplets and ice crystals.\n* Warm clouds are above $0^\\circ C$.\n* Cold clouds can be below $-40 ^\\circ C$.\n* Mixed-phase clouds have both water droplets and ice crystals.\n\n\n\u003e [!NOTE] How to Build a Cloud\n\u003e 1. Air is cooled by vertical lift.\n\u003e 2. Air parcel cools to the dew-point temperature.\n\u003e 3. Air parcel becomes saturated.\n\u003e 4. Condensation occurs.\n\nCondensation requires a certain amoun t of foreign particles larger than $10^{-4}mm$ called **cloud condensation nuclei (CCN)**.\n* Natural sources\n\t* meteroic dust\n\t* windblown clay and silt\n\t* volcanic material\n\t* smoke from forest fires\n\t* sea salt\n* Anthropogenic sources\n\t* combusting products (sulfur and nitrogen compounds)\n* The concentration of anthropogenic CCN is *much* higher than that of natural sources.\n\n### Cloud Seeding\n\n**Cloud Seeding** is the process of artificially introducing cloud condensation nuclei to increase precipitation.\n\n1. Silver iodide is released by a plane or ground-based generator.\n2. Silver iodide particles reach the targeted cloud.\n3. The silver iodide aids in the formation of ice crystals.\n4. The ice crystals become large enough to fall and create snow.\n\n**Cloud droplets** are extremely small, between 0.0001mm to 0.2mm.\n* in contrast, a typical raindrop is between 0.4mm and 4mm.\n\n### Cloud Types\n\nBy altitude:\n* Low (up to 2000m)\n* \n\n## Fog\n\n**Fog** is a cloud layer in contact with the ground.\n\n* Fog occures when the *air* temperature and *dew-point* temperature on the ground are nearly identical.\n* Near the ground, air is *saturated*.\n\n## Precipitation\n\n**Precipitation** occurs when water droplets or ice crystals become large enough to fall due to gravity.\n* In *warm clouds*, this occurs because of the **drop collision-coalescence** mechanism.\n\t* As cloud droplets fall through a cloud, they'll collide and coalesce with smaller cloud droplets.\n\t* Raindrops grow in size and fall to the ground without evaporating.\n* In *cold clouds*, water vapor \n\n# Summary of Chapter 6\n\nWater's 3 phases, their changes, humidity, cloud actions\n\nReview slides!\n\n# Midterm Review\n\nBoth of these will likely be on the exam in some form, he might switch #2 around a little bit.\n\n1. Most freshwater is contained in\n\t* streams\n\t* lakes\n\t* **ice and glaciers**\n\t* groundwater\n\t* soil moisture\n2. The process of a solid transforming directly into a gas is\n\t* **sublimation**\n\t* condensation\n\t* deposition\n\t* evaporation","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/Lectures/Lecture-23":{"title":"Lecture 23","content":"\n- Rain shadow: a dry area on the leeward side of a mountainous area (away from the wind)\n\t- *Leeward* is the opposite of *windward* - the side of the mountain facing the wind.\n\t- The prevailing wind blown in from the west (Pacific Ocean), it blows precipitation \n- Frontal lifting\n\t- A **front** is the transition zone between two air masses of different densities.\n\t- Since density differences are most often caused by temperature differences, fronts usually separate air masses with contrasting temperatures\n\t- The leading edge of a cold air mass is called a **cold front**.\n\t\t- Precipitation runs *behind* the cold front.\n\t\t- Indicated by blue triangles on weather maps.\n\t- The leading edge of a warm air mass is called a **warm front**.\n\t\t- Precipitation runs *ahead* of the warm front.\n\t\t- Indicated by red half-circles on weather maps.\n* Midlatitude Cyclonic Systems\n\t* Migrating low-pressure weather systems that occur in the midlatitudes, outside of the tropics\n\t* spin caused by all 3 wind forces (pressure gradient, coriolis, friction)\n* **Nor'easter**: fueled by *warm* air over coastal waters from the Gulf Stream meeting *cold* air over East Coast land\n\t* Typically happen between late Autumn and early Spring\n* Thunderstorms\n\t* energy source is from the *condensation* ofa large amount of water vapor in the clouds.\n* Tornados\n\t* Extends downward from a cumulonimbus cloud (deep convection cloud)\n\t* Energy comes from the *condensation* of a large amount of water vapor in clouds\n\t* \n\n","lastmodified":"2022-11-21T22:32:27.864327448Z","tags":null},"/ENV110-Environmental-Science/Lectures/Lecture-24":{"title":"Lecture 24","content":"\n# In-Class Quiz\n\n1. A cold air mass originating over an ocean is designated:\n\t- [ ] cP\n\t- [x] mP\n\t- [ ] mT\n\t- [ ] cT\n2. Summer afternoon thundershowers in the southeastern United States are more than likely a result of #study\n\t- [x] convection lifting\n\t- [ ] orographic lifting\n\t- [ ] frontal lifting\n\t- [ ] subtropical high pressure disturbance\n3. Orographic lifting is\n\t- [ ] air rising due to convergence at the surface\n\t- [ ] air rising due to heating of the surface\n\t- [ ] air forced to rise along a front between air masses\n\t- [x] air forced to rise over a barrier, such as a mountain range.\n4. A rain shadow is most often associated with which atmospheric lifting mechanism?\n\t- [ ] frontal\n\t- [x] orographic\n\t- [ ] convectional\n\t- [ ] convergence\n5. In the United States, mid-latitude cyclone development is usually the result of\n\t- [x] the interaction of cP and mT air masses\n\t- [ ] orographic lifting\n\t- [ ] heavy rainfall in the southern Pacific Ocean\n\t- [ ] hurricanes becoming extra-tropical cyclones\n\n# Lecture\n\n* [[ENV110 - Environmental Science/7 - Weather/Tornados]]\n* [[ENV110 - Environmental Science/7 - Weather/Tropical Cyclones]]","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/ENV110-Environmental-Science/Lectures/Lecture-25":{"title":"Lecture 25","content":"\n1. Which part of a hurricane consists of dry, descending air?\n\t* **Eye**\n\t* Spiral bands\n\t* Eye wall\n\t* There are no dry conditions in a hurricane\n2. The wind speed and surface pressure have a ??? relationship for a given hurricane.\n\t* Positive\n\t* **Negative**\n\t* No relationship\n3. Highest frequency of tornadoes occurs in ???\n\t* **Oklahoma**\n\t* Kansas\n\t* Nebraska\n\t* Florida\n4. Tropical cyclones do not form exactly on the Equator because\n\t* **There is no Coriolis force at the Equator.**\n5. The Tornado rating scale is the ???. The *Hurricane* rating scale is the ???.\n\t* **Enhanced Fujita Scale**\n\t* **Saffir-Simpson Scale**","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/ENV110-Environmental-Science/Lectures/Lecture-26":{"title":"Lecture 26","content":"\n# Logistics\n\n* Homework #3\n\n# Chapter 11 - The Dynamic Planet\n","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/ENV110-Environmental-Science/Midterm-2-Study-Guide":{"title":"Midterm 2 Study Guide","content":"\n## Chapters\n\n* [[ENV110 - Environmental Science/4 - Energy Balance and Temperature/Chapter 4 Questions]]\n* [[ENV110 - Environmental Science/5 - Atmospheric and Oceanic Circulation/Chapter 5 Questions]]\n* [[ENV110 - Environmental Science/6 - Atmospheric Moisture/Chapter 6 Questions]]\n\n","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/ENV110-Environmental-Science/Overview":{"title":"ENV110 - Understanding the Earth","content":"","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/Excalidraw/Drawing-2022-10-26-11.23.45.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\nP ^xhd1Xqde\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"x\": -174,\n\t\t\t\"y\": -79.0234375,\n\t\t\t\"width\": 50,\n\t\t\t\"height\": 50,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1162324251,\n\t\t\t\"version\": 44,\n\t\t\t\"versionNonce\": 194640981,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ifk3s5Iq3xfrAUcMKKl4b\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"x3RbaNMJ37t3Dx5KEYW_F\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"O1idM-kuAeNhDs3rPgyde\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UiDr-1k0KB4d9U3ptr-JP\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 164,\n\t\t\t\"versionNonce\": 273833851,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -54,\n\t\t\t\"y\": -130.0234375,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 29.455445544554454,\n\t\t\t\"height\": 29.455445544554454,\n\t\t\t\"seed\": 768596405,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"x3RbaNMJ37t3Dx5KEYW_F\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"-L6fPXEazxLq06THIbLzv\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"tfIa-S9WJEyD5Q21ezg9L\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"SBsc7ZbS4VMAwfDZnIFRr\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 289,\n\t\t\t\"versionNonce\": 471968181,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fdNEWamiIbxKdpvC9qmAJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 12.797029702970292,\n\t\t\t\"y\": -183.96403155940595,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1552633781,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"-L6fPXEazxLq06THIbLzv\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 285,\n\t\t\t\"versionNonce\": 1869527067,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jkXqa1gIi7SVkwnXepz8U\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 40.31461008000409,\n\t\t\t\"y\": -156.24879896896965,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 720862075,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"tfIa-S9WJEyD5Q21ezg9L\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 314,\n\t\t\t\"versionNonce\": 235711253,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"2cYAm5AC2VD3Ixa3hiUJr\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 29.224124772420634,\n\t\t\t\"y\": -117.80178323601369,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 571499707,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"SBsc7ZbS4VMAwfDZnIFRr\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 317,\n\t\t\t\"versionNonce\": 649526459,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3LlkBmP-Drd36qXE16JVR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -2.9851485148514882,\n\t\t\t\"y\": -17.478883044554436,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 29.455445544554454,\n\t\t\t\"height\": 29.455445544554454,\n\t\t\t\"seed\": 746222773,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"O1idM-kuAeNhDs3rPgyde\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"TK-njnvA3XvoshAeHMn2W\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 338,\n\t\t\t\"versionNonce\": 30441589,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"D0L3yrxGgmOz7twHb3hjy\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -89.98514851485149,\n\t\t\t\"y\": 34.521116955445564,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 29.455445544554454,\n\t\t\t\"height\": 29.455445544554454,\n\t\t\t\"seed\": 380630613,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UiDr-1k0KB4d9U3ptr-JP\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"m3rT-KDD0ssghJ1sZdXJM\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 358,\n\t\t\t\"versionNonce\": 163191867,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3kqkv4LDKZN_S8BLUv1wE\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -14.775875227579363,\n\t\t\t\"y\": 55.19821676398631,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1160109595,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 393,\n\t\t\t\"versionNonce\": 464591093,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3vgPfcIEMzKn6BNyJWQp3\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -35.77587522757936,\n\t\t\t\"y\": 102.19821676398631,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1780413467,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 409,\n\t\t\t\"versionNonce\": 1886910613,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8bxRgVM1j8ISYqGSKccrO\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -89.77587522757936,\n\t\t\t\"y\": 110.19821676398632,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1005803093,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"m3rT-KDD0ssghJ1sZdXJM\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 363,\n\t\t\t\"versionNonce\": 1838237499,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"nV2LjY3AMtRMepSzEM5VK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 65.22412477242064,\n\t\t\t\"y\": -36.80178323601369,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 567377621,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"TK-njnvA3XvoshAeHMn2W\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 379,\n\t\t\t\"versionNonce\": 1685462517,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Us4T72PhtNydniVmkVD5_\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 61.22412477242064,\n\t\t\t\"y\": 6.198216763986309,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 64097979,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"xhd1Xqde\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -264,\n\t\t\t\"y\": -74.0234375,\n\t\t\t\"width\": 18,\n\t\t\t\"height\": 34,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 103929013,\n\t\t\t\"version\": 115,\n\t\t\t\"versionNonce\": 1950914389,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ifk3s5Iq3xfrAUcMKKl4b\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"P\",\n\t\t\t\"rawText\": \"P\",\n\t\t\t\"fontSize\": 28,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 27,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"P\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"Ifk3s5Iq3xfrAUcMKKl4b\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -238,\n\t\t\t\"y\": -56.0234375,\n\t\t\t\"width\": 58,\n\t\t\t\"height\": 0,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 768486011,\n\t\t\t\"version\": 77,\n\t\t\t\"versionNonce\": 342928667,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t58,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"xhd1Xqde\",\n\t\t\t\t\"focus\": 0.058823529411764705,\n\t\t\t\t\"gap\": 8\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": 0.08,\n\t\t\t\t\"gap\": 6.064449134018133\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"x3RbaNMJ37t3Dx5KEYW_F\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -120,\n\t\t\t\"y\": -69.0234375,\n\t\t\t\"width\": 61,\n\t\t\t\"height\": 37,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 300722299,\n\t\t\t\"version\": 32,\n\t\t\t\"versionNonce\": 705725973,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t-37\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": 0.08858459156351878,\n\t\t\t\t\"gap\": 7.649655434629011\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.15638228715967986,\n\t\t\t\t\"gap\": 7.070400329668313\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"-L6fPXEazxLq06THIbLzv\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -24,\n\t\t\t\"y\": -129.0234375,\n\t\t\t\"width\": 33,\n\t\t\t\"height\": 30,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1892602491,\n\t\t\t\"version\": 24,\n\t\t\t\"versionNonce\": 565334459,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33,\n\t\t\t\t\t-30\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.007845965025772601,\n\t\t\t\t\"gap\": 5.807437909658482\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"fdNEWamiIbxKdpvC9qmAJ\",\n\t\t\t\t\"focus\": -0.04758862012271441,\n\t\t\t\t\"gap\": 9.436352548421509\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"tfIa-S9WJEyD5Q21ezg9L\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -13,\n\t\t\t\"y\": -124.0234375,\n\t\t\t\"width\": 46,\n\t\t\t\"height\": 17,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1857507835,\n\t\t\t\"version\": 27,\n\t\t\t\"versionNonce\": 1184955253,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46,\n\t\t\t\t\t-17\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.06251697350252412,\n\t\t\t\t\"gap\": 12.9563104512263\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"jkXqa1gIi7SVkwnXepz8U\",\n\t\t\t\t\"focus\": 0.20598652413041307,\n\t\t\t\t\"gap\": 7.8239307014552\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"SBsc7ZbS4VMAwfDZnIFRr\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -14,\n\t\t\t\"y\": -110.0234375,\n\t\t\t\"width\": 35,\n\t\t\t\"height\": 0,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1679350037,\n\t\t\t\"version\": 46,\n\t\t\t\"versionNonce\": 748053083,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.35798319327731165,\n\t\t\t\t\"gap\": 11.088646132757406\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"2cYAm5AC2VD3Ixa3hiUJr\",\n\t\t\t\t\"focus\": 0.2856807555267111,\n\t\t\t\t\"gap\": 8.475624888146339\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"O1idM-kuAeNhDs3rPgyde\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -116,\n\t\t\t\"y\": -46.0234375,\n\t\t\t\"width\": 103,\n\t\t\t\"height\": 35,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1801169109,\n\t\t\t\"version\": 31,\n\t\t\t\"versionNonce\": 1480312021,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t103,\n\t\t\t\t\t35\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": -0.12170886225855991,\n\t\t\t\t\"gap\": 8.955853692699293\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3LlkBmP-Drd36qXE16JVR\",\n\t\t\t\t\"focus\": -0.008704304881624901,\n\t\t\t\t\"gap\": 11.361078492183506\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"TK-njnvA3XvoshAeHMn2W\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": 35,\n\t\t\t\"y\": -12.0234375,\n\t\t\t\"width\": 24,\n\t\t\t\"height\": 8,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 79472731,\n\t\t\t\"version\": 26,\n\t\t\t\"versionNonce\": 770662139,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24,\n\t\t\t\t\t-8\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"3LlkBmP-Drd36qXE16JVR\",\n\t\t\t\t\"focus\": -0.09789773865596983,\n\t\t\t\t\"gap\": 10.309908448728937\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"nV2LjY3AMtRMepSzEM5VK\",\n\t\t\t\t\"focus\": -0.016094891625023953,\n\t\t\t\t\"gap\": 7.209095369565741\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"UiDr-1k0KB4d9U3ptr-JP\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -130,\n\t\t\t\"y\": -27.0234375,\n\t\t\t\"width\": 40,\n\t\t\t\"height\": 55,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 546153595,\n\t\t\t\"version\": 41,\n\t\t\t\"versionNonce\": 1920361013,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t55\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": 0.02058600941862662,\n\t\t\t\t\"gap\": 8.015148038438362\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"D0L3yrxGgmOz7twHb3hjy\",\n\t\t\t\t\"focus\": 0.03998579020328832,\n\t\t\t\t\"gap\": 11.153801027313968\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"m3rT-KDD0ssghJ1sZdXJM\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -76.30954682873069,\n\t\t\t\"y\": 70.02305686308284,\n\t\t\t\"width\": 1.9134756164915103,\n\t\t\t\"height\": 32.92895034973071,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1630349365,\n\t\t\t\"version\": 66,\n\t\t\t\"versionNonce\": 1614792603,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.9134756164915103,\n\t\t\t\t\t32.92895034973071\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"D0L3yrxGgmOz7twHb3hjy\",\n\t\t\t\t\"focus\": -0.010510202251304761,\n\t\t\t\t\"gap\": 6.07311991178301\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"8bxRgVM1j8ISYqGSKccrO\",\n\t\t\t\t\"focus\": -0.035769104539474135,\n\t\t\t\t\"gap\": 7.258349456503494\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 335,\n\t\t\t\"versionNonce\": 567127387,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"i7ZZrJiyFeYu8_PbfVq2W\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 23.35203694347625,\n\t\t\t\"y\": -119.99373452970298,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 728150939,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 331,\n\t\t\t\"versionNonce\": 1832036821,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"IWjYC2bC1Hfs_HXbctv70\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 50.869617320510045,\n\t\t\t\"y\": -92.27850193926668,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 709109653,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 358,\n\t\t\t\"versionNonce\": 872761851,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"fYdAt0BESie8IXBNgqchw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 39.779132012926596,\n\t\t\t\"y\": -53.83148620631073,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 690194491,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"SzHkIoC9\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -337,\n\t\t\t\"y\": -36.0234375,\n\t\t\t\"width\": 12,\n\t\t\t\"height\": 25,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1238939611,\n\t\t\t\"version\": 6,\n\t\t\t\"versionNonce\": 1543153627,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"\",\n\t\t\t\"rawText\": \"\",\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 18,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"qIn8Jby8\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -262,\n\t\t\t\"y\": -74.0234375,\n\t\t\t\"width\": 18,\n\t\t\t\"height\": 34,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 217906011,\n\t\t\t\"version\": 56,\n\t\t\t\"versionNonce\": 1135539323,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"P\",\n\t\t\t\"rawText\": \"P\",\n\t\t\t\"fontSize\": 28,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 27,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"P\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"xHliMfbXE_RNXRXR0YB8h\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -239,\n\t\t\t\"y\": -56.0234375,\n\t\t\t\"width\": 61,\n\t\t\t\"height\": 3,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1632427477,\n\t\t\t\"version\": 38,\n\t\t\t\"versionNonce\": 1246028981,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t3\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"xhd1Xqde\",\n\t\t\t\t\"focus\": 0.012218045112781956,\n\t\t\t\t\"gap\": 7\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": -0.09693202615425911,\n\t\t\t\t\"gap\": 4.017236257093817\n\t\t\t},\n\t\t\t\"startArrowhead\": \"triangle\",\n\t\t\t\"endArrowhead\": \"arrow\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"iasmhtPMiLpOipMUGP6g9\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -22,\n\t\t\t\"y\": 70.9765625,\n\t\t\t\"width\": 9,\n\t\t\t\"height\": 23,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1450776949,\n\t\t\t\"version\": 18,\n\t\t\t\"versionNonce\": 439767957,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9,\n\t\t\t\t\t23\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"3kqkv4LDKZN_S8BLUv1wE\",\n\t\t\t\t\"focus\": 1.3854372980370855,\n\t\t\t\t\"gap\": 7.872371917643669\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3vgPfcIEMzKn6BNyJWQp3\",\n\t\t\t\t\"focus\": -1.1623414743244975,\n\t\t\t\t\"gap\": 9.175625204971162\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"uV56wadk82th9y43KdN0V\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -7,\n\t\t\t\"y\": 98.9765625,\n\t\t\t\"width\": 6,\n\t\t\t\"height\": 16,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1855995349,\n\t\t\t\"version\": 21,\n\t\t\t\"versionNonce\": 914584123,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773468,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t-16\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"3vgPfcIEMzKn6BNyJWQp3\",\n\t\t\t\t\"focus\": 1.0830206542285465,\n\t\t\t\t\"gap\": 11.893486407172837\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3kqkv4LDKZN_S8BLUv1wE\",\n\t\t\t\t\"focus\": -0.7928139495870815,\n\t\t\t\t\"gap\": 6.244922108915031\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 0,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 3,\n\t\t\"currentItemFontSize\": 28,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStrokeSharpness\": \"sharp\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"triangle\",\n\t\t\"currentItemLinearStrokeSharpness\": \"sharp\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/Excalidraw/Drawing-2022-11-02-13.19.08.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\nData ^p24ECq3H\n\nTraining ^sRei8MRa\n\nTest ^A1BClb7X\n\nValidation ^vqBSORZN\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 116,\n\t\t\t\"versionNonce\": 1533739030,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"6Qow8b2aHJHlbDYTjTcx2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -17,\n\t\t\t\"y\": -197.0234375,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 193,\n\t\t\t\"height\": 388,\n\t\t\t\"seed\": 104112906,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667413422060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 46,\n\t\t\t\"versionNonce\": 617952330,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"p24ECq3H\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 41,\n\t\t\t\"y\": -237.0234375,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 68,\n\t\t\t\"height\": 34,\n\t\t\t\"seed\": 1550495190,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667413422060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 28,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"Data\",\n\t\t\t\"rawText\": \"Data\",\n\t\t\t\"baseline\": 27,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"Data\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 180,\n\t\t\t\"versionNonce\": 629050710,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"goVsAHAxpHHPP33Z2UuvC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -17,\n\t\t\t\"y\": -15.0234375,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 335,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 250019594,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667413422060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t335,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 95,\n\t\t\t\"versionNonce\": 1635523338,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"sRei8MRa\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 205,\n\t\t\t\"y\": -113.5234375,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 96,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1597682570,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667413422060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"Training\",\n\t\t\t\"rawText\": \"Training\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"Training\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 152,\n\t\t\t\"versionNonce\": 405697174,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"A1BClb7X\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 224,\n\t\t\t\"y\": 11.4765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1821814794,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667413422060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"Test\",\n\t\t\t\"rawText\": \"Test\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"Test\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 182,\n\t\t\t\"versionNonce\": 504900042,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"xjHqCaUQhaUyMJ3CGG6pp\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -16.5,\n\t\t\t\"y\": 63.9765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 335,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 1284054,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667413422060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t335,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 120,\n\t\t\t\"versionNonce\": 238006230,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"vqBSORZN\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 194,\n\t\t\t\"y\": 120.4765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 119,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1108922058,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667413422061,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"Validation\",\n\t\t\t\"rawText\": \"Validation\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"Validation\"\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"transparent\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 0,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 3,\n\t\t\"currentItemFontSize\": 20,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStrokeSharpness\": \"sharp\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"arrow\",\n\t\t\"currentItemLinearStrokeSharpness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/Excalidraw/Drawing-2022-11-03-13.02.01.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\n12 ^mGIXlYpO\n\n20 ^a7KsNexp\n\n10 ^wJC6wmGk\n\n13 ^1TfbrC6f\n\n9 ^ghVvtz2V\n\n7 ^dhaAQRmw\n\n12 ^N2bEgCXS\n\n20 ^wLQSXMJ2\n\n10 ^2XHIAFS7\n\n13 ^Z0LvpcwJ\n\n9 ^LXMHSGsD\n\n7 ^d4opqHR4\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 57,\n\t\t\t\"versionNonce\": 309634249,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"lrdFwTEqNskB_VrMugtkM\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -35.41721449690661,\n\t\t\t\"y\": -137.20979186899228,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 1105079715,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"mGIXlYpO\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 288,\n\t\t\t\"versionNonce\": 2016127047,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Hs-hSvJefP_t6bkPiH60l\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -102.67722578071013,\n\t\t\t\"y\": -75.84297855410409,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 1956590093,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"a7KsNexp\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 319,\n\t\t\t\"versionNonce\": 804725673,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"33k1xu-Q_CRmyjxwlzgWD\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 32.51539689973501,\n\t\t\t\"y\": -75.84297855410409,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 229540163,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"wJC6wmGk\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 516,\n\t\t\t\"versionNonce\": 1228736359,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"6zYQUfv7DF5O9mjMZQBef\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -6.495409644871103,\n\t\t\t\"y\": -11.433570768279651,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 1265068141,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"dhaAQRmw\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 581,\n\t\t\t\"versionNonce\": 981911177,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"bJ2aie7mrCShCUrQt2oly\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -140.00653204322126,\n\t\t\t\"y\": -12.106170881117691,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 259219683,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"1TfbrC6f\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 633,\n\t\t\t\"versionNonce\": 722829959,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fIlbu39sIyLSBQDkk9tOs\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -64.00271929252318,\n\t\t\t\"y\": -12.106170881117691,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 1553584845,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ghVvtz2V\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 9,\n\t\t\t\"versionNonce\": 1558121833,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mGIXlYpO\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -23.41721449690661,\n\t\t\t\"y\": -124.70979186899228,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 817581187,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"12\",\n\t\t\t\"rawText\": \"12\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"lrdFwTEqNskB_VrMugtkM\",\n\t\t\t\"originalText\": \"12\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 9,\n\t\t\t\"versionNonce\": 779196839,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"a7KsNexp\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -90.67722578071013,\n\t\t\t\"y\": -63.34297855410409,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1154478381,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"20\",\n\t\t\t\"rawText\": \"20\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"Hs-hSvJefP_t6bkPiH60l\",\n\t\t\t\"originalText\": \"20\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 9,\n\t\t\t\"versionNonce\": 1582004297,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wJC6wmGk\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 44.51539689973501,\n\t\t\t\"y\": -63.34297855410409,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 625263651,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10\",\n\t\t\t\"rawText\": \"10\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"33k1xu-Q_CRmyjxwlzgWD\",\n\t\t\t\"originalText\": \"10\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 9,\n\t\t\t\"versionNonce\": 410897607,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"1TfbrC6f\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -128.00653204322126,\n\t\t\t\"y\": 0.39382911888230865,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1366508429,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"13\",\n\t\t\t\"rawText\": \"13\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"bJ2aie7mrCShCUrQt2oly\",\n\t\t\t\"originalText\": \"13\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 8,\n\t\t\t\"versionNonce\": 279414569,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ghVvtz2V\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -46.50271929252318,\n\t\t\t\"y\": 0.39382911888230865,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 14,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 620644291,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"9\",\n\t\t\t\"rawText\": \"9\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"fIlbu39sIyLSBQDkk9tOs\",\n\t\t\t\"originalText\": \"9\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 8,\n\t\t\t\"versionNonce\": 1423350759,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"dhaAQRmw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 11.004590355128897,\n\t\t\t\"y\": 1.066429231720349,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 14,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1723681261,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034307,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"7\",\n\t\t\t\"rawText\": \"7\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"6zYQUfv7DF5O9mjMZQBef\",\n\t\t\t\"originalText\": \"7\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 31,\n\t\t\t\"versionNonce\": 2120137225,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fMQz_HOh4m1gB5jDmCx8F\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -29.077417543533585,\n\t\t\t\"y\": -95.22218893520335,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 30.939605190549628,\n\t\t\t\"height\": 26.231404400683402,\n\t\t\t\"seed\": 1711691619,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034308,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-30.939605190549628,\n\t\t\t\t\t26.231404400683402\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 32,\n\t\t\t\"versionNonce\": 663258887,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"i4byEeDtVWX9NxqGZmHoc\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 8.588188775396446,\n\t\t\t\"y\": -96.56738916087943,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 28.921804852035507,\n\t\t\t\"height\": 29.594404964873547,\n\t\t\t\"seed\": 632783949,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034308,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.921804852035507,\n\t\t\t\t\t29.594404964873547\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 22,\n\t\t\t\"versionNonce\": 1483509993,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"b1u7OJ-_tEQUSacwb5QDC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -88.93882758611872,\n\t\t\t\"y\": -28.63477776423781,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 15.469802595274814,\n\t\t\t\"height\": 19.505403272303,\n\t\t\t\"seed\": 1454076675,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034308,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.469802595274814,\n\t\t\t\t\t19.505403272303\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 26,\n\t\t\t\"versionNonce\": 521145895,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"5pw61LLQlYqPu97SoesUJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -65.39782363678748,\n\t\t\t\"y\": -29.97997798991389,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 14.797202482436774,\n\t\t\t\"height\": 20.85060349797908,\n\t\t\t\"seed\": 1379627693,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034308,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.797202482436774,\n\t\t\t\t\t20.85060349797908\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 28,\n\t\t\t\"versionNonce\": 610044873,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wSD2J-oZSHWg2cN8BxyLX\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 45.58119498148838,\n\t\t\t\"y\": -29.30737787707585,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 15.469802595274814,\n\t\t\t\"height\": 20.85060349797908,\n\t\t\t\"seed\": 392960675,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499034308,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.469802595274814,\n\t\t\t\t\t20.85060349797908\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 211,\n\t\t\t\"versionNonce\": 12131431,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"t-37MZXJZCvlz9PGcg72i\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -159.16464378866914,\n\t\t\t\"y\": -227.9505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 813478919,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"N2bEgCXS\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 273,\n\t\t\t\"versionNonce\": 608630663,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"0ZXMLSerRE3-P99roqnHS\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -110.06483555149254,\n\t\t\t\"y\": -227.9505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 702395369,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"wLQSXMJ2\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 261,\n\t\t\t\"versionNonce\": 1269591719,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"uD6bTvu5bgzzT0M05gf1e\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -60.96502731431596,\n\t\t\t\"y\": -227.9505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 855022375,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"2XHIAFS7\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 323,\n\t\t\t\"versionNonce\": 1368785351,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"a9VnQcENsmnLY9UHoy-hB\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -11.865219077139358,\n\t\t\t\"y\": -227.9505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 296832713,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Z0LvpcwJ\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 327,\n\t\t\t\"versionNonce\": 119550183,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"RhAQiw5yWRUPr0Sul6sAg\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 37.234589160037245,\n\t\t\t\"y\": -227.9505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 400989767,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"LXMHSGsD\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 389,\n\t\t\t\"versionNonce\": 1708620807,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"0pPeV325-C38UNJp7KCVh\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 86.33439739721385,\n\t\t\t\"y\": -227.9505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49,\n\t\t\t\"height\": 49,\n\t\t\t\"seed\": 906923433,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"d4opqHR4\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 204,\n\t\t\t\"versionNonce\": 1480753545,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"N2bEgCXS\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -147.16464378866914,\n\t\t\t\"y\": -215.4505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1646869863,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"12\",\n\t\t\t\"rawText\": \"12\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"t-37MZXJZCvlz9PGcg72i\",\n\t\t\t\"originalText\": \"12\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 200,\n\t\t\t\"versionNonce\": 1634429033,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wLQSXMJ2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -98.06483555149256,\n\t\t\t\"y\": -215.4505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 505475209,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"20\",\n\t\t\t\"rawText\": \"20\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"0ZXMLSerRE3-P99roqnHS\",\n\t\t\t\"originalText\": \"20\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 200,\n\t\t\t\"versionNonce\": 1721004873,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"2XHIAFS7\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -48.96502731431596,\n\t\t\t\"y\": -215.4505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 84605063,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10\",\n\t\t\t\"rawText\": \"10\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"uD6bTvu5bgzzT0M05gf1e\",\n\t\t\t\"originalText\": \"10\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 200,\n\t\t\t\"versionNonce\": 1008280105,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Z0LvpcwJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0.13478092286064225,\n\t\t\t\"y\": -215.4505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 25,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1604581225,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"13\",\n\t\t\t\"rawText\": \"13\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"a9VnQcENsmnLY9UHoy-hB\",\n\t\t\t\"originalText\": \"13\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 199,\n\t\t\t\"versionNonce\": 518321417,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"LXMHSGsD\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 54.734589160037245,\n\t\t\t\"y\": -215.4505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 14,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1447579559,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"9\",\n\t\t\t\"rawText\": \"9\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"RhAQiw5yWRUPr0Sul6sAg\",\n\t\t\t\"originalText\": \"9\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 199,\n\t\t\t\"versionNonce\": 577989609,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"d4opqHR4\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 103.83439739721385,\n\t\t\t\"y\": -215.4505875686359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 14,\n\t\t\t\"height\": 24,\n\t\t\t\"seed\": 1289953865,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1667499051249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"7\",\n\t\t\t\"rawText\": \"7\",\n\t\t\t\"baseline\": 19,\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"0pPeV325-C38UNJp7KCVh\",\n\t\t\t\"originalText\": \"7\"\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"transparent\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 0,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 3,\n\t\t\"currentItemFontSize\": 20,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStrokeSharpness\": \"sharp\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": null,\n\t\t\"currentItemLinearStrokeSharpness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2022-11-21T22:32:27.868327476Z","tags":null},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.3\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2022-11-21T22:32:27.876327533Z","tags":null},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2022-11-21T22:32:27.876327533Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n## Docker Support\nIf you don't want to use a hosting service, you can host using [Docker](notes/docker.md) instead!\nI would *not use this method* unless you know what you are doing.\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-11-21T22:32:27.876327533Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, the following\ninstructions guide you through installing the proper dependencies to run it locally.\n\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e [!INFO] Docker Support\n\u003e\n\u003e If you have Docker installed already, open your terminal, navigate to your folder with Quartz and run `make docker`\n\nNow that you are happy with how your Quartz instance looks, let's get it hosted!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2022-11-21T22:32:27.876327533Z","tags":null},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://beta.operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Login or Register for a new Operand account. Click the verification link sent to your email, and you'll be redirected to the dashboard. (Note) You do not need to enter a credit card to create an account, or get started with the Operand API. The first $10 of usage each month is free. To learn more, see pricing. If you go over your free quota, we'll (politely) reach out and ask you to configure billing.\n2. Create your first index. On the dashboard, under \"Indexes\", enter the name and description of your index, and click \"Create Index\". Note down the ID of the index (obtained by clicking on the index name in the list of indexes), as you'll need it in the next step. IDs are unique to each index, and look something like `uqv1duxxbdxu`.\n3. Click into the index you've created. Under \"Index Something\", select \"SITEMAP\" from the dropdown and click \"Add Source\".\n4. For the \"Sitemap.xml URL\", put your deployed site's base URL followed by `sitemap.xml`. For example, for `quartz.jzhao.xyz`, put `https://quartz.jzhao.xyz/sitemap.xml`. Leave the URL Regex empty. \n5. Get your API key. On the dashboard, under \"API Keys\", you can manage your API keys. If you don't already have an API key, click \"Create API Key\". You'll need this for the next step.\n6. Open `data/config.yaml`. Set `enableSemanticSearch` to `true`, `operandApiKey` to your copied key, and `operandIndexId` to the ID of the index we created from earlier..\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nsearch:\n  enableSemanticSearch: true\n  operandApiKey: \"jp9k5hudse2a828z98kxd6z3payi8u90rnjf\"\n  operandIndexId: \"s0kf3bd6tldw\"\n```\n7. Push your changes to the site and wait for it to deploy.\n8. Check the Operand dashboard and wait for your site to index. Enjoy natural language search powered by Operand!","lastmodified":"2022-11-21T22:32:27.876327533Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [oldwinterの数字花园](https://garden.oldwinter.top/)\n- [SethMB Work](https://sethmb.xyz/)\n- [Abhijeet's Math Wiki](https://abhmul.github.io/quartz/Math-Wiki/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2022-11-21T22:32:27.876327533Z","tags":null}}