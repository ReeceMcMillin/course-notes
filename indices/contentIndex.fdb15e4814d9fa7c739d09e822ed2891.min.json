{"/":{"title":"Reece McMillin | Notes","content":"\n# Overview\n\nThis is a collection of my course notes written in Obsidian.\n\n# About Me\n\nI'm currently a computer science student at UMKC working on financial exchange technology.\n\n# Courses\n\n* [[ENV110 - Environmental Science/Overview | ENV110 - Understanding the Earth]]\n* [[CS404 - Algorithms/Overview | CS404 - Introduction to Algorithms]]\n* [[CS441 - Programming Languages/Overview | CS441 - Programming Languages]]\n* [[CS461 - Artificial Intelligence/Overview | CS461 - Introduction to Artificial Intelligence]]\n\n\n","lastmodified":"2022-10-27T22:10:52.519925869Z","tags":null},"/CS404-Algorithms/":{"title":"CS404 - Introduction to Algorithms","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Algorithms/":{"title":"Algorithms","content":"\nPart of [[CS404 - Algorithms/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Algorithms/Bubble-Sort":{"title":"Bubble Sort","content":"\nBubble sort (also known as *sinking sort*) works by repeatedly swapping adjacent elements until the full list is sorted.\n\n# Pseudocode\n```python\ndef bubble_sort(items: List[Comparable]):\n\t\n```\n\n# Analysis\n\n**Recurrence Relation**: $T(n) = T(n - 1) + (n - 1)$\n\n\n\n| | Worst Case | Average Case | Best Case | \n|-|-|-|-| \n| Comparisons | $O(n^2)$ | $O(n^2)$ | $O(n)$ |\n| Swaps | $O(n^2)$ | $O(n^2)$ | $O(1)$ |\n| Space | $O(n)$ | | |\n\n","lastmodified":"2022-10-27T22:10:52.51192587Z","tags":null},"/CS404-Algorithms/Algorithms/Counting-Sort":{"title":"Counting Sort","content":"\n# Overview\n\n**Counting Sort** is an sorting algorithm that uses keys of small positive integers.\n\n# Analysis\n\nGiven the following:\n* $n$ is the total number of elements\n* $k$ is the range of elements (largest element - smallest elements)\n\nComplexity:\n* **Time**: $O(n + k)$\n* **Space**: $O(k)$\n\nGood to know:\n* Worst case is when data is skewed and range is large.\n* Best case is when all elements are the same.\n* Average case is when $n$ and $k$ are equally dominant.\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Algorithms/Insertion-Sort":{"title":"Insertion Sort","content":"\n# Explanation\n\nThe general strategy is to maintain an unsorted and a sorted section of the input array. At each stage, select the last element from the *unsorted* portion and place it into the correct position in the *sorted* portion.\n\n# Pseudocode\n\n```\nfor i = 1 to n\n\tkey = A[i]\n\tj = i - 1\n\n\twhile j \u003e= 0 and A[j] \u003e key:\n\t\tA[j + 1] = A[j]\n\t\tj = j - 1\n\tend while\n\tA[j + 1] = key\nend for\n```\n\n# Analysis\n\n**Worst Case**\n$$\n\\begin{align*}\nT(2) \u0026= 1\\\\\nT(n) \u0026= T(n - 1) + (n - 1)\\\\\nT(n) \u0026\\in O(n^2)\n\\end{align*}\n$$\n\n**Best Case**\n$$\n\\begin{align*}\nT(2) \u0026= 1\\\\\nT(n) \u0026= T(n - 1) + 1\\\\\nT(n) \u0026\\in O(n)\n\\end{align*}\n$$","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Algorithms/Merge-Sort":{"title":"Merge Sort","content":"\n**Merge Sort** uses [[CS404 - Algorithms/Ideas/Divide and Conquer]] to sort arrays.\n\nAt each step, the original array is divided into two halves. This continues recursively until the size of each subarray becomes \n\n## Analysis\n\n**Worst Case**: $\\Theta(n \\lg{n})$\n\n## Pseudocode\n\n```python\ndef MergeSort(A, p, r):\n\tmidpoint = \n\tif p \u003c r:\n\t\tmid = floor((p + r) / 2)\n\telse:\n\t\tmid = \n\tMergeSort(A, p, mid)\n\tMergeSort(A, mid + 1, r)\n\tMergeSort(A, p, mid, r)\n```","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Algorithms/Quicksort":{"title":"Quicksort","content":"\n# Overview\n\n* **Best Case**: $O(n \\lg{n})$\n* **Average Case**: $O(n \\lg n)$\n* **Worst Case**: $O(n^2)$\n\nQuicksort divides an array into subarrays by selecting a pivot element using [[CS404 - Algorithms/Ideas/Divide and Conquer]].\n\nWhile dividing the array, the pivot element should be positioned in such a way that elements less than the pivot are kept on the left side and elements greater than the pivot are kept on the right side.\n\nThe left and right subarrays are also divided using the same approach. This process continues until each subarray contains a single element, which is *trivially sorted*.\n\nFinally, subarrays are recombined to form a sorted array.\n\n# Complexity\n$$T(n) = 2T\\left(\\frac{n}{2}\\right) + \\Theta(n)$$\n\nBy the [[CS404 - Algorithms/Divide and Conquer/Master Theorem]], this gives $T(n) = \\Theta(n \\lg{n})$\n\n# Explanation\n\nYou can think of the *pivot* as the only sorted element.\n* We know that numbers to the left are less than the pivot, but they may as well be unsorted. Same for the right.\n\n1. Choose the highest index value as pivot\n2. Take two variables to point to the left/right of the list (excluding pivot)\n3. Left points to the *low* index\n4. Right point sto the high index\n5. While value at left is less than pviot, move right\n6. While value at right is greater than pivot, move left\n\n# Notes\n1. Quicksort is **in-place**\n2. Quicksort is **not** [[CS404 - Algorithms/Ideas/Stable (Sorting)]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/":{"title":"Divide \u0026 Conquer","content":"\nPart of [[CS404 - Algorithms/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Akra-Bazzi-Theorem":{"title":"Akra-Bazzi Theorem","content":"\n# Overview\n\nThe **Akra-Bazzi Theorem** is a generalized version of the [[CS404 - Algorithms/Divide and Conquer/Master Theorem]] for solving recurrence relations.\n\n# Formula\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Master-Theorem":{"title":"Master Theorem","content":"\n**Note**: the [[CS404 - Algorithms/Divide and Conquer/Akra-Bazzi Theorem]] generalizes this strategy.\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Recursion-Tree-Method":{"title":"Recursion Tree Method","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Divide-and-Conquer/Substitution-Method":{"title":"Substitution Method","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Ideas/":{"title":"Ideas","content":"\nPart of [[CS404 - Algorithms/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Ideas/Big-O-Notation":{"title":"Big O Notation","content":"\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Ideas/Divide-and-Conquer":{"title":"Divide and Conquer","content":"\nDivide and Conquer is an algorithm design paradigm that specializes in solving problems that can be solved recursively.","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Ideas/Stable-Sorting":{"title":"Stable (Sorting)","content":"\nA **stable** sort preserves the existing relative order between equal items.","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Math/":{"title":"Math","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Math/Proofs":{"title":"Proofs","content":"\n## Any polynomial in $n$ of degree $k$ is $\\Theta(n^k)$.\n\n\n\n**Proof** (fill this in soon)\n\n## $(\\lg{n})^k \\in O(n^\\epsilon)$ for $k, \\epsilon \u003e 0$\n\n**Proof** (fill this in soon)\n\n# \\lg{(n!)} \\in \\Theta(n\\lg{n}) \n\n**Proof** (fill this in soon)\n\n## $1^k + 2^k + 3^k + \\dots + n^k \\in O(n^{k + 1})$\n\n**Proof** (fill this in soon)","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Midterm-Study":{"title":"CS404 Midterm Study","content":"\n1. Must know recurrence relation and time complexity of the following:\n\t* [[CS404 - Algorithms/Algorithms/Bubble Sort]]\n\t* [[CS404 - Algorithms/Algorithms/Insertion Sort]]\n\t* [[CS404 - Algorithms/Algorithms/Merge Sort]]\n\t* [[CS404 - Algorithms/Algorithms/Quicksort]]\n\t* [[CS404 - Algorithms/Algorithms/Counting Sort]]\n2. Be able to find the big O complexity of functions using the following methods.\n\t* [[CS404 - Algorithms/Divide and Conquer/Recursion Tree Method]]\n\t* [[CS404 - Algorithms/Divide and Conquer/Substitution Method]]\n\t* [[CS404 - Algorithms/Divide and Conquer/Master Theorem]]\n3. Memorize common sums and series along with their big O complexities.\n4. Make sure you understand how to solve all problems on each quiz.\n\t* [[CS404 - Algorithms/Quiz Problems/Quiz 1]]\n\t* [[CS404 - Algorithms/Quiz Problems/Quiz 2]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Overview":{"title":"CS404 - Algorithms","content":"\nThis is a standard course on the basics of algorithm design and analysis.","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Quiz-Problems/":{"title":"Quiz Problems","content":"\n* [[CS404 - Algorithms/Quiz Problems/Quiz 2]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Quiz-Problems/Quiz-1":{"title":"Quiz 1","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS404-Algorithms/Quiz-Problems/Quiz-2":{"title":"Quiz 2","content":"\n\u003cdetails\u003e\n\u003csummary\u003eWhat is the complexity of linear search?\u003c/summary\u003e\n\n\u003e The recurrence relation of linear search is $T(n) = T(n - 1) + 1$.\n\u003e \n\u003e This is basically just iteration - at each step, you just have a constant-time - $\\Theta(1)$ - comparison.\n\u003e $$T(n) \\in \\Theta(n)$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e \u003csummary\u003eTrue or false: Any polynomial in $n$ of degree $k$ is $\\Theta(n^2)$.\u003c/summary\u003e\n\n\u003e False, it's actually in $\\Theta(n^k)$.\n\u003e \n\u003e A good way to think about this problem is envisioning a polynomial like the following:\n\u003e $$3n^5 + n^4 + \\dots + 1$$\n\u003e This is obviously in $\\Theta(n^5)$, not $\\Theta(n^2)$.\n\u003e \n\u003e For a more rigorous proof, see [[CS404 - Algorithms/Math/Proofs#Any polynomial in $n$ of degree $k$ is $ Theta(n k)$.|here]].\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eTrue or false: $\\lg{(n!)} \\in \\Theta{(n \\lg{n})}$\u003c/summary\u003e\n\n\u003e True, see [[CS404 - Algorithms/Math/Proofs#lg{(n!)} in Theta(n lg{n})|here]] for proof.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eTrue or false: $\\lg{(n!)} \\in \\Omega{(n \\lg{n})}$\u003c/summary\u003e\n\n\u003e True by way of the above answer:\n\u003e $$\\lg{(n!)} \\in \\Theta{(n \\lg{n})}$$\n\u003e Proof [[CS404 - Algorithms/Math/Proofs#lg{(n!)} in Theta(n lg{n})|here]] if you're not convinced.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\u003csummary\u003eWhat is the recurrence relation and complexity of binary search?\u003c/summary\u003e\n\n\u003e This is relatively easy to memorize, but you can use the [[CS404 - Algorithms/Divide and Conquer/Master Theorem]] to verify if you like.\n\u003e \n\u003e $$\\begin{align*}\nT(n) \u0026= T\\left(\\frac{n}{2}\\right) + 1\\\\\nT(n) \u0026\\in O(\\lg{n})\n\\end{align*}$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eTrue or false: $1 + 2 + 3 + \\dots + n \\in O(n^2)$\u003c/summary\u003e\n\n\u003e True.\n\u003e \n\u003e $$1 + 2 + 3 + \\dots + n = \\frac{n(n+1)}{2} \\in \\Theta(n^2)$$\n\u003e \n\u003e Since the sum is in $\\Theta(n^2)$, it's also in $O(n^2)$.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003e$1^k + 2^k + 3^k + \\dots + n^k \\in O(n^{k + 1})$\u003c/summary\u003e\n\n\u003e True, see [[CS404 - Algorithms/Math/Proofs#$1 k + 2 k + 3 k + dots + n k in O(n {k + 1})$|here]] for proof.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the complexity of the MaxMin algorithm?\u003c/summary\u003e\n\n\u003e This is described better in the textbook, but the idea behind the algorithm is to iterate through an array *once*, making two comparisons against the current max/min at each stage for a total of $2n-2$ comparisons in the basic version.\n\u003e \n\u003e $$T(n) \\in O(n)$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the recurrence relation that describes the MaxMin algorithm?\u003c/summary\u003e\n\n\u003e $$T(n) = 2T\\left(\\frac{n}{2}\\right) + 2$$\n\u003e \n\u003e I don't remember covering a recursive version of this algorithm, but the shape of the above relation is pretty much in line with the \"linear + 2 comparisons\" idea above.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the big O complexity of $1 + \\frac{1}{2} + \\frac{1}{3} + \\dots + \\frac{1}{n}$?\u003c/summary\u003e\n\n\u003e I'm not sure this is a totally rigorous explanation, but I estimated it like this:\n\u003e \n\u003e $$\\sum_{i=1}^n{\\frac{1}{i}} \\approx \\int_1^n{\\frac{1}{x}} \\mathrm{dx} = \\lg{n} + c$$\n\u003e \n\u003e which would give $O(\\lg{n})$.\n\u003e \n\u003e More rigorously, this is a partial sum of the [Harmonic series](https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)). We can describe the $n^{th}$ Harmonic number (the partial sum of the series at some $n$) like this:\n\u003e $$H_n = \\ln{n} + \\gamma + \\frac{1}{2n} - \\epsilon_n$$\n\u003e * $\\gamma$ (gamma) is a constant.\n\u003e * $\\frac{1}{2n}$ grows to 0.\n\u003e * $0 \\leq \\epsilon_n \\leq \\frac{1}{8n^2}$, which also grows to 0.\n\u003e \n\u003e That means $\\ln{n}$ defines the growth rate. Changing the base back to 2 and picking $n_0$ and $c$ to prove this is $O(\\lg{n})$ and $\\Omega(\\lg{n})$ (and therefore also $\\Theta(\\lg{n})$) should be straightforward.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\u003csummary\u003eList the big O complexity of $\\sum_{i=1}^{n}{(\\lg{i})}$.\u003c/summary\u003e\n\n\u003e $O(n \\lg n)$\n\u003e \n\u003e I haven't taken the time to write out either proof yet, but I think this is just the $\\lg{(n!)}$ problem in disguise.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eList the big O complexity of $\\sum_{i=1}^{n}{(i)}$.\u003c/summary\u003e\n\n\n\u003e This is just the Euler sum.\n\u003e $$\\frac{n(n+1)}{2} \\in O(n^2)$$\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eWhat's the recurrence relation of [[CS404 - Algorithms/Algorithms/Insertion Sort]]?\u003c/summary\u003e\n\n\u003e $$T(n) = T(n - 1) + n$$\n\u003e \n\u003e This is *slightly* different in the notes, given as $T(n) = T(n - 1) + (n - 1)$. That's not meaningful for the overall complexity of $O(n^2)$.\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eList the big O complexity of $T(n) = 2T(n-1)$, where $T(0) = 1$.\u003c/summary\u003e\n\n\u003e I envisioned this as a binary tree where $T(0)$ was the root. That'd give $T(n)$ describe the total number of nodes present *up to and including* level $n$. Since a binary tree of height $h$ can have a maximum of $2^h - 1$ nodes, this would fall on the order of $O(2^n)$.\n\u003e\n\u003e $$T(n) \\in O(2^n)$$\n\n\u003c/details\u003e\n\n\u003chr\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eList the big O complexity of the following: $\\sum_{i=1}^{n}{\\left[\\left(\\frac{1}{2}\\right)^i\\right]}$\u003c/summary\u003e\n\n\u003e There are a few different ways to approach this. The one I like best is multiplying the whole series by 2 and rearranging things.\n\u003e $$\n\t\\begin{align*}\n\t\t\ts_n \u0026= \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\dots + \\frac{1}{2^n}\\\\\\\\\n\t\t\t2s_n \u0026= \\frac{2}{2} + \\frac{2}{4} + \\frac{2}{8} + \\dots + \\frac{2}{2^n}\\\\\\\\\n\t\t\t\u0026= 1 + \\left[ \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\dots + \\frac{1}{2^{n-1}}\\right]\\\\\\\\\n\t\\end{align*}\n\t$$\n\u003e Notice how that last term is just $s_n$ minus the last term, so...\n\u003e $$\n\t\\begin{align*}\n\t\t2s_n \u0026= 1 + \\left[ s_n - \\frac{1}{2^n} \\right]\\\\\\\\\n\t\ts_n \u0026= 1 - \\frac{1}{2^n}\n\t\\end{align*}\n\t$$\n\u003e As $n$ goes to infinity, $\\frac{1}{2^n} \\sim 0$, so our overall complexity trends towards 1 as $n$ gets larger. Since that's a constant, the overall complexity is $\\Theta(1)$!\n\u003c/details\u003e","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/":{"title":"CS441 - Programming Languages","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/2-Syntax-and-Parsing/":{"title":"Syntax \u0026 Parsing","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/3-Names-Scopes-Bindings/":{"title":"Names, Scopes, \u0026 Bindings","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/4-Semantic-Analysis/":{"title":"Semantic Analysis","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/4-Semantic-Analysis/Translation-Schemes":{"title":"Translation Schemes","content":"\n# General Categories\n* **Oblivious**: exploits no special knowledge of the parse tree or attribute grammar.\n* **Dynamic**: tails attribute evaluation order to the *structure* of a given parse tree.\n\t* Typically performs a topological sort of the attribute flow graph and then invokes evaluation rules in an order consistent with the sort.\n* **Static**: based on analysis of the structure of the attribute grammar.\n\n## Action Routines\n* **Action routines** are semantic functions that the programmar instructs the compiler to execute at a particular point in the parse.\n* ","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/6-Control-Flow/":{"title":"Control Flow","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/":{"title":"Type Systems","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Composite-Types":{"title":"Composite Types","content":"\u003e [!attention]\n\u003e \n This is covered in significantly more detail in [[CS441 - Programming Languages/8 - Composite Types/Composite Types - Overview]]\n## Records\nRecords were introduced by [[CS441 - Programming Languages/Languages/Cobol]], similar to tuple\n* Cartesian product of its components\n\n## Unions\n*Variant* records (unions) differ from records\n```c\nunion widget {\n\tint    n;\n\tdouble x;\n\tchar   ch;\n}\n\nwidget character = 'c';\nint x = character + 1; // sure, why not\n```\n* Problem: compiler doesn't discriminate between members of unions\n\n## Sets\n* Powerset of its elements\n* Introduced by [[CS441 - Programming Languages/Languages/Pascal]]\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Enumeration-Types":{"title":"Enumeration Types","content":"\nIntroduced in [[CS441 - Programming Languages/Languages/Pascal]]\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Subrange-Types":{"title":"Subrange Types","content":"\nIntroduced in [[CS441 - Programming Languages/Languages/Pascal]]\nA subrange is a contiguous subset of the values of some discete base type (the parent)\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Type-Conversions-Casts":{"title":"Type Conversions \u0026 Casts","content":"\n3 situations\n\n1. Types have the same internal structure\n2. Types have different ranges of values, but there's some overlap\n3. Internal *representation* is different, blue values overlap in some way.\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/7-Type-Systems/Type-Equivalence":{"title":"Type Equivalence","content":"\nHow do we determine if two things are the same type?\n1. **Structural Equivalence**: two types have the same components put together the same way.\n2. **Name Equivalence**: types defined by different names are probably meant to be incompatible.\n\n## Name Equivalence\n\n\u003e [!question]\n\u003e \n\u003e ```c\n\u003e typedef old_type new_type;\n\u003e ```\n\u003e \nAre `old_type` and `new_type` distinct?\n\n\nA language in which alias types are considered..\n* distinct? ***strict* name equivalence**\n* the same? ***loose* name equivalence**\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/":{"title":"Chapter 8 - Composite Types","content":"\nPart of [[CS441 - Programming Languages/Overview]]\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Arrays":{"title":"Arrays","content":"\n## Overview\n* Arrays are the most common composite type, go back to Fortran I.\n* **Idea**: map a discrete index type to a component or element type.\n## Slicing\n\n## Dimensions, Bounds, Allocation\n* *Static* allocation is pretty simple, just allocate some amount of space at startup which is known at compile time.\n* *Dynamic* allocation is a little more tough\n\t* **Dope Vector**\n\t\t* ![[images/Drawing 2022-10-21 11.35.46.excalidraw.png]]\n\t\t* [Dope Vector - Wikipedia](https://en.wikipedia.org/wiki/Dope_vector)\n\n## Heap Allocation\n* Arrays that can change size or shape at arbitrary times are said to be *fully dynamic*\n* If number of dimensions is statically known, the dope vector can be stored on the *stack*.\n* Unless garbage collection is in place, heap memoyr must be reclaimed when space is no longer used.\n\t* Failing to do so causes a *memory leak*.\n\n## Memory Layout\n* 1-Dimensional: elements are layed out contiguously\n\t* May result in small holes so elements align on word boundaries\n* 2-dimensional: can either use *row-major* or *column-major* order.\n\t* **Row-Major**: Elements of first *row* are laid out contiguously, followed by second row, third, etc.\n\t* **Column-Major**: Elements of the first *column* are contiguous, followed by second column, third, etc.\n\n### Row-Pointer Layout\n* Some languages only requier rows to be contiguous, but each row can be anywhere in memory.\n* An auxiliary array of pointers or references is created, one per row.\n\n## Address Calculation\nAt *some* point we're going to need to translate an array reference to a specific address. #study\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Garbage-Collection":{"title":"Garbage Collection","content":"\nPart of [[CS441 - Programming Languages/8 - Composite Types]].\n\n# Reference Counting\n\n**Idea**: keep a count of references pointing to objects in memory, deallocate the memory once that count reaches 0.[^1].\n\nReference counts can work well if we're using a **tombstone** system.\n\n[^1]: This isn't so simple! Cyclic pointers break basic reference counts.\n\n# Smart Pointers\n* `unique_ptr` guarantees no other name points to the object.\n* `shared_ptr` manages reference counting\n* `weak_ptr` does **not** use reference counting\n\n# Other Methods\n\n## Tracing Collectors\n\n### Mark and Sweep\n\n**Idea**: start at some pointer and follow it through the heap\n\n1. Initially mark **everything** as potentially garbage.\n2. Walk through the whole reference tree.\n3. At the end of the process, anything you haven't been able to reach is *still* garbage - go ahead and deallocate!\n\n![[Excalidraw/Drawing 2022-10-26 11.23.45.excalidraw.png]]\n\n**Problems**: requires a stack as large as the longest path through the heap #study\n\n### Pointer Reversal\n\n**Problems**: doesn't do anything about fragmentation\n\n### Stop and Copy\n\n1. Divide the heap into two areas of roughly equal size\n2. Use one half for **all** allocation.\n\t* When this half is nearly full, perform a mark/sweep\n3. Copy each *reachable* block into the other half.\n\t* Since we have total knowledge over what's reachable, we can accomplish allocation with no external fragmentation\n\t* Overhead is proportional to the number of non-garbage blocks we have.","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Pointers-and-Recursive-Types":{"title":"Pointers and Recursive Types","content":"\nRecords of some type $T$ can easily contain a reference to another record of $T$.\n* Reference model? No big deal, variables are *already* references\n* Value model? This is when you need the idea of a *pointer*, introduced in [[CS441 - Programming Languages/Languages/PL-I]]\n\n## Pointers \u0026 Arrays in C\n\n```c\nint n;      // integer\nint *p, *q; // 2 pointers to integer\nint b[20];  // integer array\n```\n\n## Stack Smashing\nC's lack of bounds checking is a *major* source of program bugs and security holes.\n* **Buffer overrun** attacks\n* **Stack-smashing** attacks\n\n## Dangling References\nA **dangling reference** is a live pointer to an object that's no longer valid.\n\n### Tombstones\n* When an object is reclaimed, the indirection word is marked with a value invalidating future references to it.\n### Locks and Keys\n* Every pointer and object on the heap has a word added to it.\n* These words must match for the pointers to be valid.\n* This is simple to implement, but only works for objects on the heap.","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Sets":{"title":"Sets","content":"\nA **set** is an unordered collection of distinct values, usually of the same type.\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/8-Composite-Types/Strings":{"title":"Strings","content":"\n* Some languages just view strings as arrays of characters\n* Others provide features like substring extraction \u0026 pattern matching with regular expressions\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Definitions":{"title":"Definitions","content":"\n# 1 - Introduction\n* scanner\n* lexer\n* parser\n* lexical analysis\n* semantic analysis\n* parse tree\n* syntax tree\n* static semantics\n* dynamic semantics\n# 2 - Syntax\n* regular expression\n- Kleene closure\n- terminal\n- nonterminal\n- BNF\n- metasymbol\n- production\n- sentential form\n- syntax analysis\n- token\n- keyword\n- reserved word\n- LL(n)\n- LR(n)  \n* predictive parser\n* bottom-up parser\n* shift-reduce parser\n* recursive descent parser\n* epsilon production\n# 3 - Names, Scopes, and Binding\n* binding time\n* referencing environment\n* compile-time constant\n* elaboration-time constant\n* prologue/epilogue\n* stack frame\n* frame pointer\n* displacement addressing\n* heap fragmentation\n* free list\n* buddy system\n* Fibonacci heap\n* scope\n* forward reference\n* inheritance\n* aliases\n# 4 - Semantic Analysis\n* unsafe optimization\n* speculative optimization\n* conservative compiler\n* optimistic compiler\n* attribute grammar test\n* semantic function\n* S-attributed grammar\n* L-attributed grammar\n* well-defined attribute grammar","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Languages/":{"title":"Specific Languages","content":"\nPart of [[CS441 - Programming Languages/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Languages/Cobol":{"title":"Cobol","content":"\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Languages/PL-I":{"title":"PL-I","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Languages/Pascal":{"title":"Pascal","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Lectures/":{"title":"Lectures","content":"\nPart of [[CS441 - Programming Languages/Overview]]\n\n* [[CS441 - Programming Languages/Lectures/2022-10-26]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Lectures/2022-10-26":{"title":"2022-10-26","content":"\n# Recap\n\n* Dangling References\n\t* [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Tombstones | Tombstones]] ([Wikipedia](https://en.wikipedia.org/wiki/Tombstone_(programming)))\n\t\t* [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types]]\n\t\t* Rather than pointing directly to a value, we use \n\t* [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Locks and Keys | Locks and Keys]] ([Wikipedia](https://en.wikipedia.org/wiki/Locks-and-keys))\n\t\t* Handy if we're only ever allocating pointers on the heap, otherwise not so much\n* [[CS441 - Programming Languages/8 - Composite Types/Garbage Collection]]\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Midterm-Review":{"title":"Midterm Review","content":"\n# Chapter 8\n* Know how to calculate array bounds\n* Lots of garbage-collector stuff! Know how specific methods work\n\t* Tombstone\n\t* Locks and Keys","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS441-Programming-Languages/Overview":{"title":"CS441 - Programming Languages","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Adversarial-Search/":{"title":"Adversarial Search","content":"\nPart of [[CS461 - Artificial Intelligence/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Adversarial-Search/Monte-Carlo-Tree-Search":{"title":"Monte Carlo Tree Search","content":"\n# Steps\n## Selection\n## Expansion\n## Simulation\n## Back-Propagation\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Constraint-Satisfaction-Problems/":{"title":"Constraint Satisfaction Problems","content":"\nPart of [[CS461 - Artificial Intelligence/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Constraint-Satisfaction-Problems/AC-3":{"title":"AC-3","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/":{"title":"Knowledge Representation","content":"\nPart of [[CS461 - Artificial Intelligence/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/Agents":{"title":"Agents","content":"\nIndependent programs/systems that each specialize in small tasks\n**Focus:** *what can be done?*\n\n## Goals\n* How does an agent perceive its environment?\n* How does it make decisions?\n* Can it act autonomously?\n* How does it interact with other agents (if at all)?\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/Concept-Maps":{"title":"Concept Maps","content":"\nExtension of [[Semantic Networks.md]]\n\n**Key idea:** show relationships between entities, tracing backwards/forwards to show how you arrived at a certain concept\n\n## Problems\n* Often lack the formalism of semantic networks\n* Do not assume subset inclusions","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/Frames":{"title":"Frames","content":"\nExtension of [[Object Orientation.md]]\n\n\u003e Frames are an artificial intelligence data structure used to divide knowledge into substructures by representing \"stereotyped situations\". They were proposed by Marvin Minsky in his 1974 article \"A Framework for Representing Knowledge\". Frames are the primary data structure used in artificial intelligence frame languages; they are stored as ontologies of sets.\n\u003e\n\u003e Frames are also an extensive part of knowledge representation and reasoning schemes. They were originally derived from semantic networks and are therefore part of structure-based knowledge representations. According to Russell and Norvig's \"Artificial Intelligence: A Modern Approach\", structural representations assemble \"[...]facts about particular objects and event types and arrange the types into a large taxonomic hierarchy analogous to a biological taxonomy\".\n\u003e\n\u003e [Wikipedia](https://en.wikipedia.org/wiki/Frame%20(artificial%20intelligence)\n\n## Problems\n* World isn't neatly packaged\n* Definitions are important, getting them right is hard\n* Cancelling default values is harder than it looks, changes must *percolate*\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/Object-Orientation":{"title":"Object Orientation","content":"\n# Key Ideas\n* Inheritance\n* Encapsulation\n* Polymorphism\n* Separate interface/implementation\n# Languages\n## Simula 67\n## Smalltalk\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/Production-Systems":{"title":"Production Systems","content":"\nIdea: *if-then* rules\nProduction systems require:\n* control system (rules interpreter)\n- database","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/Scripts":{"title":"Scripts","content":"\n## Idea\nExtension of [[Frames.md]]\n* adds information about sequences of events and planning\n\n**Key concept:** conceptual dependency #key-concept\n* Classify relations between objects and properties\n\nScripts can be arranged hierarchically and used in [[Production Systems.md]]\n\n## Problems\n* Lack important concepts\n\t* \"What color shoes was Lincoln wearing during the Gettysburg address?\"\n\t* Script didn't know Lincoln being in Gettysburg meant his feet were in Gettysburg!\n* Can be very effective in microworlds but are very limited in general understanding.\n\n\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Knowledge-Representation/Semantic-Networks":{"title":"Semantic Networks","content":"\n**Semantics:** meaning\n\n**Key idea:** Model relationships between concepts, ideas, objects, events, or situations.\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/":{"title":"Lectures","content":"\nPart of [[CS461 - Artificial Intelligence/Overview]]\n\n* [[CS461 - Artificial Intelligence/Lectures/2022-10-26]]\n* ","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Lectures/2022-10-26":{"title":"2022-10-26","content":"\n# Independence\n$$\nP(A \\wedge B) = P(A) \\cdot P(B)\n$$\n$$\n\\begin{align*}\nP(A \\mid B) \u0026= P(A)\\\\\nP(B \\mid A) \u0026= P(B)\n\\end{align*}\n$$\n\n# Bayes' Theorem\n\nMain page: [[CS461 - Artificial Intelligence/Uncertainty/Bayes' Theorem]]\n\n$$\n\\begin{align*}\nP(A \\wedge B) \u0026= P(A \\mid B)P(B) = P(B \\mid A)P(A)\\\\\\\\\n\\frac{P(A \\mid B)P(B)}{P(A)} \u0026= P(B \\mid A)\\\\\\\\\n\u0026= \\frac{P(A \\mid B)P(B)}{P(A \\mid B)P(B) + P(A \\mid \\neg{B})P(\\neg{B})}\n\\end{align*}\n$$\n\n## Example\n\nConsider the problem of a brain tumor and associated headaches.\n\n* $P(BT) = \\frac{1}{10,000}$\n* $P(H \\mid BT) = 0.78$\n* $P(H \\mid \\neg{BT}) = \\frac{1}{400}$\n\nWhat's the probability of a brain tumor given severe headaches?\n$$\n\\begin{align*}\nP(BT \\mid H) \u0026= \\frac{P(H \\mid BT) \\cdot P(BT)}{P(H \\mid BT) \\cdot P(BT) + P(H \\mid \\neg{BT}) \\cdot P(\\neg{BT})}\\\\\\\\\n\u0026= \\frac{(0.78)(0.0001)}{(0.78)(0.0001) + (0.0025)(1 - 0.0001)}\\\\\\\\\n\u0026= \\frac{0.000078}{0.002775}\\\\\\\\\n\u0026\\approx 0.03 \\text{ or 3}\\\\%\n\\end{align*}\n$$\n\n**Note**: this will be on a quiz, only need to get through step 2. #study\n\n## Example 2\n\nPretend there are 20 potential terrorists in the country at any given moment.\n* $P(T) = \\frac{20}{300M} = 6.66 \\cdot 10^{-8}$\n\nWhat's the probability that someone *is* detected given they *are* a terrorist?\n* $P(D \\mid \\neg{T})$\n\nWhat's the probability that someone is *not* detected given they *are* a terrorist?\n* $P(\\neg{D} \\mid T)$\n* \n* $P(D \\mid T) = 0.95$\n* $P(\\neg{D} \\mid \\neg{T})$\n\nWhat's the overall probability that somebody is flagged regardless?\n$$\\begin{align*}\nP(D) \u0026= P(D \\mid T) \\cdot P(T) + P(D \\mid \\neg{T}) \\cdot P(\\neg{T})\\\\\n\u0026= (0.95)(6.66\\cdot 10^{-8}) + (1-0.999)(1-6.66\\cdot 10^{-8})\\\\\n\u0026\u003c 0.00099999 + \\dots\\\\\n\u0026\\dots \\text{ nearly 100}\\\\%\n\\end{align*}$$\n\n# Enter: The Naive Idiot\n\nCan we generalize [[CS461 - Artificial Intelligence/Uncertainty/Bayes' Theorem]] to multiple variables?\n\n**Naive (Idiot) Bayes'**: we *assume* the variables are conditionally independent *even if that's not quite true*!\n* Why? We can stand some minor inaccuracies.\n* We know there will be some error, but *in some cases* a nearly-correct answer is better than no answer.\n\n# Sources of Uncertainty\n\n* **Frequentist View** ([Wikipedia](https://en.wikipedia.org/wiki/Frequentist_probability)): probabilities can be found by a repeatable, objective process.\n\t* Think law of large numbers\n* **Objectivist View**: probability is a fundamental *property* of a thing.\n* **Subjectivist View**: we can *decide* what is or isn't relevant on a case-by-case basis.\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Logic/":{"title":"Logic","content":"\nPart of [[CS461 - Artificial Intelligence/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Logic/Logic":{"title":"Logic","content":"\n# Types\n* [[Predicate Logic.md]]\n# Other Logics\nEverything we've seen so far is **[[Monotonic.md]]**: once it's in the knowledge base, it can't be removed\n## Second-Order Logic\n*\"A predicate must exist that satisfies these properties\"*\n* Gives you enough power to approach Godel's Incompleteness Theorem\n* First order logic will not let you say *\"all statements with an inductive proof are true\"\n\n## Fuzzy Logic\nAllows us to express degrees of uncertainty about the truth value of something\n\n## Modal Logic\nDeals with beliefs, moral imperatives\n* \"Ought implies can\"\n* \"It is possible...\"\n* \"It is necessary...\"\n\n## Temporal Logic\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Logic/Predicate-Logic":{"title":"Predicate Logic","content":"\n# Overview\nPredicate logic allows us to make statements about *categories*\n# Features\n* Arity:\n\t* **Arity 0:** $win()$\n\t* **Arity 1:** $Student(\\text{Bill})$\n\t* **Arity 2:** $Parent(\\text{John}, \\text{Martha})$\n* Also allows us to use existential ($\\exists$) and universal ($\\forall$) quantifiers\n\t* *All aliens drive flying saucers*\n\t* $\\forall{x}: \\text{Alien}(x) \\implies \\text{DrivesSaucer}(x)$\n\t* How would we prove $\\neg{(\\forall{x}: \\text{Alien}(x) \\implies \\text{DrivesSaucer}(x)})$?\n\t\t* Start by putting it in *clausal form*: $p \\implies q \\equiv \\neg{p} \\vee q$\n\t\t* $\\neg{(\\forall{x}: \\neg{\\text{Alien}(x)} \\vee \\text{DrivesSaucer}(x)})$\n\t\t* $\\exists{x}: \\text{Alien}(x) \\wedge \\neg{\\text{DrivesSaucer}(x)}$\n# Resolution (Unification)\n```ad-note\nPropositional logic refers to this as resolution, called *unification* in predicate logic\n```\n* **Rule 1:** predicates must match\n\t* $setting(sun) \\wedge \\neg{setting(moon)}$ ~ different variables, no relationship\n\n# Example\n* All genies ride flying carpets.\n\t* $\\forall x: \\text{Genie}(x) \\implies \\text{FlyingCarpet}(x)$\n\t* **Clausal form:** $\\forall x: \\neg{\\text{Genie}(x)} \\vee \\text{FlyingCarpet}(x)$\n* Aladdin rides a flying carpet.\n\t* $\\text{FlyingCarpet}(\\text{Aladdin})$\n* Is Aladdin a genie?\n\t* Try to find a contradiction, start with $\\neg{\\text{Genie}(\\text{Aladdin})}$\n\t* We don't have enough information! Need biconditional.\n\t\t* $\\forall x : G(x) \\iff FC(x)$\n\t\t\t* $\\forall x : G(x) \\implies FC(x)$\n\t\t\t\t* **1:** $\\forall x: \\neg{G(x)} \\vee FC(x)$\n\t\t\t* $\\forall x : FC(x) \\implies G(x)$\n\t\t\t\t* **2:** $\\forall x: \\neg{FC(x)} \\vee G(x)$\n\t\t\t* **3:** $FC(Aladdin)$\n\t\t\t* **4:** $\\neg{G(Aladdin)}$\n\t\t* Resolution through **2** and **3** produces $G(Aladdin)$\n\t\t* Resolution through **4** and **5** produces $\\emptyset$ - contradiction\n* ","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Logic/Propositional-Logic":{"title":"Propositional Logic","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Overview":{"title":"CS461 - Introduction to Artificial Intelligence","content":"\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Stochastic-Search/":{"title":"Stochastic Search","content":"\nPart of [[CS461 - Artificial Intelligence/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Stochastic-Search/Genetic-Algorithms":{"title":"Genetic Algorithms","content":"\n# Steps\n## Initial population\nRandomly generate some initial population.\n## Selection\nThere are a number of ways to handle selection, but the idea is to pick the parents of the next generation according to some fitness function.\n## Reproduction/Crossover\nA crossover point is selected\n## Mutation\nIntroduce \n## Culling","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Stochastic-Search/Normalization":{"title":"Normalization","content":"\n# Types of Normalization\n## L1\n$$\\frac{x_i}{\\sum{x_i}}$$\n\n## L2\n$$\\frac{x^2_i}{\\sum{x^2_i}}$$\n\u003e [!NOTE] Note\n\u003e In general, $L_k$ normalization involves $x^k$\n## Softmax\n$$\\frac{e^{x_i}}{\\sum{x_i}}$$\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Stochastic-Search/Simulated-Annealing":{"title":"Simulated Annealing","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Uncertainty/":{"title":"Uncertainty","content":"\nPart of [[CS461 - Artificial Intelligence/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Uncertainty/Bayes-Theorem":{"title":"Bayes' Theorem","content":"\n$$P(a \\mid b) = \\frac{P(a \\wedge b)}{P(b)}$$\nThis is super cool if variables are discrete, but what about continuous variables?\n* *Calculus baby!*\n\n## Joint Probability Distribution\nConsider:\n* $P(\\text{rain} \\wedge \\text{high winds})$\n* $P(\\text{scholarship} \\wedge \\text{dean's list})$\n* $P(\\text{cavity} \\wedge \\text{rain})$\n\n$$P(\\neg{a}) = 1 - P(a)$$\n$$P(a \\vee b) = P(a) + P(b) - P(a \\wedge b)$$\n## Marginal Probability\nSuppose we have a simple 2 * 2 * 2 distribution:\n* Cavity\n* Toothache\n* Dental pick catches on cavity\nWe'll perform *marginalization*, or *summing out*, to calculate the marginal probability.\n\n![[images/Pasted image 20221024134153.png]]\n\n$$P(\\text{cavity} \\mid \\text{toothache}) = P(\\text{cavity, ache, catch}) \\cdot \\alpha$$\n\n**THIS ISN'T DONE YET! VIEW SLIDES**\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Uncertainty/Fuzzy-Logic":{"title":"Fuzzy Logic","content":"\n# Fuzzy Sets\nCrisp set: $\\{0, 1\\}$\nFuzzy set: $\\{0, \\dots, 1\\}$\n\n* With a crisp set, we choose a strict cutoff value and make no accomodations.\n* Fuzzy sets can have *degrees* of membership.\n* $\\{\u003c 5'6, \\dots, 6'3 \u003e\\}$ with a ramp function in between\n\n## Fuzzy Set Membership\n* $X \\cup Y = max(X, Y)$\n* $X \\cap Y = min(X, Y)$\n\t* Say someone has membership in...\n\t\t* $tall$ of 0.85\n\t\t* $rich$ of 0.20\n\t* What's their membership in the set $tall \\cup rich$?\n\t\t* $max(tall, rich) = 0.85$\n\t* What about $tall \\cap rich$?\n\t\t* $min(tall, rich) = 0.20$\n* $\\overline{X} = 1 - X$\n* What about the symmetric difference?\n\t* Usually take the definition from crisp sets, $(A \\cap \\overline{B}) \\cup (\\overline{A} \\cap B)$\n\t* $A \\text{ (tall)} = 0.85, \\overline{A} = 0.15$\n\t* $B \\text{ (rich)} = 0.2, \\overline{B} = 0.8$\n\t* $A \\oplus B = (0.85 \\cap 0.8) \\cup (0.15 \\cap 0.2) = 0.8 \\cup 0.15 = 0.8$\n\n## Law of the Excluded Middle\nAlways true in crisp sets, but for fuzzy sets it's a *membership function*\n* $P \\cap \\neg{P} = min(P, 1 - P)$\n\n# Fuzzy Inference\n* Fuzzy [[Production Systems.md]] look pretty much like the normal kind, except...\n\t* the variables are fuzzy\n\t* the $\\text{AND}/\\text{OR}$ operations are fuzzy\n* So instead of rules firing directly, they fire *to some extent*","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Uncertainty/Probability":{"title":"Probability","content":"\nWhere does uncertainty *come from*?\n* Partial observability\n* Nondeterminism\n* Both?\n\n\u003e eventually the last proton will decay\n\u003e \n\u003e - brian hare\n\nWe could track some sort of *belief state* - out of every possible state, which one might we be in? Except...\n* Pretty large search space\n* We'd like a pretty reasonable plan for every contingency\n\n**Rational Decision**: Maximum likelihood of success *at acceptable cost*\n* In other words, maximum expected utility.\n* $$E(x) = \\sum{x} \\cdot P(x)$$\n**Diagnostic Problem**: \n**Ontological Commitment**: what is *true*\n* There are rules that do or do not hold in any particular case\n**Epistemological Commitment**: What is or can be *known*\n* What we can *know* about particular rules is limited\n\n## Utility Theory\n**Idea**: every decision has some utility\n* $$\\text{utility} = \\sum{\\text{gains}} - \\sum{\\text{costs}}$$Every agent sets their own utility function\n\t* Doesn't have to match anybody else's!\n\n## Terminology\n* ***Possible worlds**\n\t* Mutually exclusive\n\t* Exhaustive\n\t* *\"Every possible world exists and is distinct from each other\"*\n\t* $$0 \\leq P(\\omega) \\leq 1$$\n\t* $$\\sum_\\omega{P(\\omega)} = 1$$\n\t* $$P(\\text{event}) = \\sum{P(\\text{worlds where event occurs})}$$\n\t* ","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/CS461-Artificial-Intelligence/Uncertainty/Uncertainty":{"title":"Uncertainty","content":"\nhttps://www.tylervigen.com/spurious-correlations\n\nHow do we figure out whether something is a *causal* connection or just coincidence?\n\n# Subsections\n1. [[CS461 - Artificial Intelligence/Uncertainty/Fuzzy Logic]]\n2. [[CS461 - Artificial Intelligence/Uncertainty/Probability]]\n3. \n\n\n\n\n\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-5/":{"title":"Chapter 5","content":"\nPart of [[ENV110 - Environmental Science/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-5/Global-Atmosphere-Circulation":{"title":"Global Atmosphere Circulation","content":"\n# Wind\n**Primary Circulation**: general global circulation\n**Secondary Circulation**: related to migratory high-/low-pressure systems\n**Tertiary Circulation**: local winds, temporal weather patterns\n* Meridional flows move along meridians\n* Zonal flows move along parallels\n* Winds are named for the direction from which they *originate*\n\n## Driving Forces\n* **Pressure gradient** force (main driver)\n\t* Wind results from a *horizontal* difference in air pressure\n\t* Isobar: equal pressure line\n\t* \n* **Coriolis** force: deflection\n\t* Due to rotation of the Earth\n\t* Northern Hemisphere deflects to the *right*\n\t* Southern Hemisphere deflects to the *left*\n* **Friction** force: slowing-down\n\n## Models\n### Single-Cell Model\n* Strong heating at the equator causes\n\t* less dense air to rise\n\t* diverge towards the pole\n\t* sink back to surface\n\t* then return to equator\n* **Problem**: predicts that surface winds would flow straight towards the equator\n### Single-Cell with Rotation\n* Also called the **Coriolis Effect**\n\t* Hadley described this model 100 years before the Coriolis force was mathematically expressed in 1835\n* ITCZ: Intertropical Convergence Zone\n* Even with rotation, the single-cell model doesn't explain the winds blowing from the west in mid-latitudes and the subtropical desert.\n### Three-Cell Model\n* Idea: divide the circulations in each hemisphere into three cells:\n\t* **Hadley** Cell (tropics/subtropics)\n\t\t* *thermally direct* - driven by thermal energy\n\t\t* Strong solar heating leads to rising air, diverges towards the poles\n\t\t\t* creates *equatorial lows* (low pressure), lots of precipitation\n\t\t* Higher air moves towards the poles, gradually acquiers a west-to-east motion\n\t\t* Air descends towards 30$^\\circ$ latitudes to form *subtropical highs* - desert conditions\n\t* **Ferrel** Cell (middle latitudes)\n\t\t* Air flows away from subtropical highs towards subpolar lows, acquires a large westerly component due to the Coriolis force\n\t* **Polar** Cell (high latitudes/polar regions)\n\t\t* Surface air moves from polar highs (extremely cold) to subpolar lows (relatively warm)\n* Is this realistic? Yes and no!\n\t* Yes\n\t* No\n\t\t* Doesn't take into account land-sea contrasts, topography information\n## Trade Winds\n* ","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-5/Monsoons":{"title":"Monsoons","content":"\n**Monsoon**: seasonal shifting winds that determines precipitation, due to heat capacity difference between land and sea\n* Remember: water has a higher heat capacity, less dramatic changes\n* **Summer**\n\t* warm humind winds blowing from ocean\n\t* convective lifting over mountain barrier causes precipitation\n\t* Continental *low* pressure, oceanic *high* pressure\n* **Winter**\n\t* Dry cool winds blowing seaward from continent\n\t* Strong center of high pressure over continents\n\t* Continental *high* pressure, oceanic *low* pressure","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-5/Questions":{"title":"Questions","content":"\n1. What causes the wind to flow from east to west instead of pole to equator\n\t* Rotation of the earth\n2. Are Polar Cells thermally direct or thermally indirect?\n\t* Thermally *direct* - air rises in warm areas while sinking in cold areas\n3. Imagine a polar bear swimming South from polar regions to find land. He can either go to Alaska or Russia. Where will he land?\n\t* He'll follow the polar easterlies and head West to Russia.\n4. Are Ferrel cells thermally direct or thermally indirect?\n\t* Thermally *indirect* - warm air sinks\n\t* Think of Ferrel cells as a *consequence* of the thermally direct Hadley/Polar cells","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-5/Quiz-%233":{"title":"Quiz #3","content":"\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-5/Summary":{"title":"Summary","content":"\n* **Trade Winds** (easterly)\n\t* Converge toward *equatorial low pressure* from regions of *subtropical high pressure*\n\t* Warm, moist, *rising* air\n* **Westerlies**\n\t* Generated in subtropics\n\t* Clockwise rotation\n\t* Cool, dry, descending air\n\t* Predominant surface wind pattern for the mid-latitudes (us)\n* **Polar Easterlies**\n\t* Generated at the poles; predominant surface wind pattern\n\t* Polar easterlies, air mass conflict with Westerlies, source of winter storms","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-5/Topics":{"title":"Topics","content":"\n# Thermal (In)Directness\n**Thermally Direct**: rising branches over warm temperature zones\n## Hadley Cells\n## Polar Cells\n## Ferrel Cell\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Chapter-6/":{"title":"Chapter 6","content":"\nPart of [[ENV110 - Environmental Science/Overview]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Lectures/":{"title":"Lectures","content":"\nPart of [[ENV110 - Environmental Science/Overview]]\n\n* [[ENV110 - Environmental Science/Lectures/Lecture 20]]","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Lectures/Lecture-20":{"title":"ENV110 - Lecture 20","content":"\n# Three States of Water \u0026 Energy Transfer\n\n| Release | Absorption |\n|:-:|:-:|\n| Freezing | Melting |\n| Condensing | Evaporating |\n| Depositing | Sublimiation |\n\n\u003e [!QUESTION] QUESTION\n\u003e \n\u003e If you go from gaseous water to liquid water, is energy absorbed or released?\n\u003e \n\u003e * **How to Answer**: \n\n# Atmospheric Moisture\n\n**Water Vapor Pressure** is the pressure of water vapor in the air, expressed in terms of *partial pressure*.\n\n## Humidity\n\n**Humidity** refers to water vapor content in the air.\n\n* Primarily a function of air temperature.\n\t* moisture condenses in cool air\n\t* warm air has more moisture capacity\n\n**Relative Humidity** refers to the ratio of water vapor prsent to maximum *potential* to hold water vapor.\n$$\\text{relative humidity} = \\frac{\\text{actual water vapor in the air}}{\\text{maximum possible (at that temperature)}} \\cdot 100\\\\%$$\n\nSince warmer air has a higher maximum capacity for water vapor, the same *actual* humidity will have different *relative* humidities at different temperatures and times of day.\n\n**Specific Humidity** is the mass of water vapor per unit mass of air.\n* The maximum specific humidity is positively correlated with temperature.\n* Key idea: warmer air holds mor ewater vapor.\n\n### Saturation and Dew-Point Temperature\n\n**Saturation** refers to the state at which relative humidity is 100%.\n\n**Dew-Point Temperature** is the temperature at which:\n* a given mass of air becomes saturated\n* net condensation begins to form water droplets.\n\n\u003e [!NOTE] NOTE\n\u003e \n\u003e Dew-point temperature is always *less than or equal to* the actual temperature.\n\n\n\u003e [!QUESTION] QUESTION\n\u003e \n\u003e A kilogram of air at $40 ^\\circ C$ has a specific humidity of $12g$, so what is the *relative humidity*?\n\u003e \n\u003e * **How to Answer**: use the maximum specific humidity chart.\n\u003e \n\u003e What is the *dew-point temperature*?\n\u003e\n\u003e * **How to Answer**: find the point on the curve where the maximum specific humidity is $12g$. In this case, the answer is somewhere around $15 ^\\circ C$.\n\n\nHow are temperature and humidity related?\n\nAir temperature determines ability to evaporate or condense vapor.\n\n* Air temperature and \u003cu\u003erelative\u003c/u\u003e humidity are *inversely* related.\n\t* **Daily**: Remember, as temperature increases the air gains a higher capacity for water vapor. As the day warms up, the *relative* humidity will drop.\n\t* **Seasonally**: Winter has a lower overall temperature\n* Air temperature and \u003cu\u003emaximum specific\u003c/u\u003e humidity are *positively correlated*.\n\nAtmospheric moisture content has a large impact on the meteorological prediction of clouds and precipitation.\n\n## Clouds\n\n### Cloud Formation Processes\n\nA **cloud** is a group of water droplets and ice crystals.\n* Warm clouds are above $0^\\circ C$.\n* Cold clouds can be below $-40 ^\\circ C$.\n* Mixed-phase clouds have both water droplets and ice crystals.\n\n\n\u003e [!NOTE] How to Build a Cloud\n\u003e 1. Air is cooled by vertical lift.\n\u003e 2. Air parcel cools to the dew-point temperature.\n\u003e 3. Air parcel becomes saturated.\n\u003e 4. Condensation occurs.\n\nCondensation requires a certain amoun t of foreign particles larger than $10^{-4}mm$ called **cloud condensation nuclei (CCN)**.\n* Natural sources\n\t* meteroic dust\n\t* windblown clay and silt\n\t* volcanic material\n\t* smoke from forest fires\n\t* sea salt\n* Anthropogenic sources\n\t* combusting products (sulfur and nitrogen compounds)\n* The concentration of anthropogenic CCN is *much* higher than that of natural sources.\n\n### Cloud Seeding\n\n**Cloud Seeding** is the process of artificially introducing cloud condensation nuclei to increase precipitation.\n\n1. Silver iodide is released by a plane or ground-based generator.\n2. Silver iodide particles reach the targeted cloud.\n3. The silver iodide aids in the formation of ice crystals.\n4. The ice crystals become large enough to fall and create snow.\n\n**Cloud droplets** are extremely small, between 0.0001mm to 0.2mm.\n* in contrast, a typical raindrop is between 0.4mm and 4mm.\n\n### Cloud Types\n\nBy altitude:\n* Low (up to 2000m)\n* \n\n## Fog\n\n**Fog** is a cloud layer in contact with the ground.\n\n* Fog occures when the *air* temperature and *dew-point* temperature on the ground are nearly identical.\n* Near the ground, air is *saturated*.\n\n## Precipitation\n\n**Precipitation** occurs when water droplets or ice crystals become large enough to fall due to gravity.\n* In *warm clouds*, this occurs because of the **drop collision-coalescence** mechanism.\n\t* As cloud droplets fall through a cloud, they'll collide and coalesce with smaller cloud droplets.\n\t* Raindrops grow in size and fall to the ground without evaporating.\n* In *cold clouds*, water vapor \n\n# Summary of Chapter 6\n\nWater's 3 phases, their changes, humidity, cloud actions\n\nReview slides!\n\n# Midterm Review\n\nBoth of these will likely be on the exam in some form, he might switch #2 around a little bit.\n\n1. Most freshwater is contained in\n\t* streams\n\t* lakes\n\t* **ice and glaciers**\n\t* groundwater\n\t* soil moisture\n2. The process of a solid transforming directly into a gas is\n\t* **sublimation**\n\t* condensation\n\t* deposition\n\t* evaporation","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Midterm-2-Study-Guide":{"title":"Midterm 2 Study Guide","content":"\n[[ENV110 - Environmental Science/pdfs/ENVSCI110_Midterm2_StudyGuide_2022Fall.pdf]]\n\n\n","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/ENV110-Environmental-Science/Overview":{"title":"ENV110 - Understanding the Earth","content":"","lastmodified":"2022-10-27T22:10:52.515925869Z","tags":null},"/Excalidraw/Drawing-2022-10-26-11.23.45.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\nP ^xhd1Xqde\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"x\": -174,\n\t\t\t\"y\": -79.0234375,\n\t\t\t\"width\": 50,\n\t\t\t\"height\": 50,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1162324251,\n\t\t\t\"version\": 44,\n\t\t\t\"versionNonce\": 194640981,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ifk3s5Iq3xfrAUcMKKl4b\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"x3RbaNMJ37t3Dx5KEYW_F\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"O1idM-kuAeNhDs3rPgyde\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UiDr-1k0KB4d9U3ptr-JP\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 164,\n\t\t\t\"versionNonce\": 273833851,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -54,\n\t\t\t\"y\": -130.0234375,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 29.455445544554454,\n\t\t\t\"height\": 29.455445544554454,\n\t\t\t\"seed\": 768596405,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"x3RbaNMJ37t3Dx5KEYW_F\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"-L6fPXEazxLq06THIbLzv\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"tfIa-S9WJEyD5Q21ezg9L\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"SBsc7ZbS4VMAwfDZnIFRr\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 289,\n\t\t\t\"versionNonce\": 471968181,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fdNEWamiIbxKdpvC9qmAJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 12.797029702970292,\n\t\t\t\"y\": -183.96403155940595,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1552633781,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"-L6fPXEazxLq06THIbLzv\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 285,\n\t\t\t\"versionNonce\": 1869527067,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jkXqa1gIi7SVkwnXepz8U\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 40.31461008000409,\n\t\t\t\"y\": -156.24879896896965,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 720862075,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"tfIa-S9WJEyD5Q21ezg9L\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 314,\n\t\t\t\"versionNonce\": 235711253,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"2cYAm5AC2VD3Ixa3hiUJr\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 29.224124772420634,\n\t\t\t\"y\": -117.80178323601369,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 571499707,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"SBsc7ZbS4VMAwfDZnIFRr\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 317,\n\t\t\t\"versionNonce\": 649526459,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3LlkBmP-Drd36qXE16JVR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -2.9851485148514882,\n\t\t\t\"y\": -17.478883044554436,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 29.455445544554454,\n\t\t\t\"height\": 29.455445544554454,\n\t\t\t\"seed\": 746222773,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"O1idM-kuAeNhDs3rPgyde\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"TK-njnvA3XvoshAeHMn2W\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773764,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 338,\n\t\t\t\"versionNonce\": 30441589,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"D0L3yrxGgmOz7twHb3hjy\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -89.98514851485149,\n\t\t\t\"y\": 34.521116955445564,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 29.455445544554454,\n\t\t\t\"height\": 29.455445544554454,\n\t\t\t\"seed\": 380630613,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UiDr-1k0KB4d9U3ptr-JP\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"m3rT-KDD0ssghJ1sZdXJM\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 358,\n\t\t\t\"versionNonce\": 163191867,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3kqkv4LDKZN_S8BLUv1wE\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -14.775875227579363,\n\t\t\t\"y\": 55.19821676398631,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1160109595,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 393,\n\t\t\t\"versionNonce\": 464591093,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3vgPfcIEMzKn6BNyJWQp3\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -35.77587522757936,\n\t\t\t\"y\": 102.19821676398631,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1780413467,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 409,\n\t\t\t\"versionNonce\": 1886910613,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8bxRgVM1j8ISYqGSKccrO\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -89.77587522757936,\n\t\t\t\"y\": 110.19821676398632,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 1005803093,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"m3rT-KDD0ssghJ1sZdXJM\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 363,\n\t\t\t\"versionNonce\": 1838237499,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"nV2LjY3AMtRMepSzEM5VK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 65.22412477242064,\n\t\t\t\"y\": -36.80178323601369,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 567377621,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"TK-njnvA3XvoshAeHMn2W\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 379,\n\t\t\t\"versionNonce\": 1685462517,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Us4T72PhtNydniVmkVD5_\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 61.22412477242064,\n\t\t\t\"y\": 6.198216763986309,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 64097979,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"xhd1Xqde\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -264,\n\t\t\t\"y\": -74.0234375,\n\t\t\t\"width\": 18,\n\t\t\t\"height\": 34,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 103929013,\n\t\t\t\"version\": 115,\n\t\t\t\"versionNonce\": 1950914389,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ifk3s5Iq3xfrAUcMKKl4b\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"P\",\n\t\t\t\"rawText\": \"P\",\n\t\t\t\"fontSize\": 28,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 27,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"P\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"Ifk3s5Iq3xfrAUcMKKl4b\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -238,\n\t\t\t\"y\": -56.0234375,\n\t\t\t\"width\": 58,\n\t\t\t\"height\": 0,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 768486011,\n\t\t\t\"version\": 77,\n\t\t\t\"versionNonce\": 342928667,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t58,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"xhd1Xqde\",\n\t\t\t\t\"focus\": 0.058823529411764705,\n\t\t\t\t\"gap\": 8\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": 0.08,\n\t\t\t\t\"gap\": 6.064449134018133\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"x3RbaNMJ37t3Dx5KEYW_F\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -120,\n\t\t\t\"y\": -69.0234375,\n\t\t\t\"width\": 61,\n\t\t\t\"height\": 37,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 300722299,\n\t\t\t\"version\": 32,\n\t\t\t\"versionNonce\": 705725973,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t-37\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": 0.08858459156351878,\n\t\t\t\t\"gap\": 7.649655434629011\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.15638228715967986,\n\t\t\t\t\"gap\": 7.070400329668313\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"-L6fPXEazxLq06THIbLzv\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -24,\n\t\t\t\"y\": -129.0234375,\n\t\t\t\"width\": 33,\n\t\t\t\"height\": 30,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1892602491,\n\t\t\t\"version\": 24,\n\t\t\t\"versionNonce\": 565334459,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33,\n\t\t\t\t\t-30\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.007845965025772601,\n\t\t\t\t\"gap\": 5.807437909658482\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"fdNEWamiIbxKdpvC9qmAJ\",\n\t\t\t\t\"focus\": -0.04758862012271441,\n\t\t\t\t\"gap\": 9.436352548421509\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"tfIa-S9WJEyD5Q21ezg9L\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -13,\n\t\t\t\"y\": -124.0234375,\n\t\t\t\"width\": 46,\n\t\t\t\"height\": 17,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1857507835,\n\t\t\t\"version\": 27,\n\t\t\t\"versionNonce\": 1184955253,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46,\n\t\t\t\t\t-17\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.06251697350252412,\n\t\t\t\t\"gap\": 12.9563104512263\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"jkXqa1gIi7SVkwnXepz8U\",\n\t\t\t\t\"focus\": 0.20598652413041307,\n\t\t\t\t\"gap\": 7.8239307014552\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"SBsc7ZbS4VMAwfDZnIFRr\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -14,\n\t\t\t\"y\": -110.0234375,\n\t\t\t\"width\": 35,\n\t\t\t\"height\": 0,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1679350037,\n\t\t\t\"version\": 46,\n\t\t\t\"versionNonce\": 748053083,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"txBPiGtM13Y2yTufxqoxU\",\n\t\t\t\t\"focus\": 0.35798319327731165,\n\t\t\t\t\"gap\": 11.088646132757406\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"2cYAm5AC2VD3Ixa3hiUJr\",\n\t\t\t\t\"focus\": 0.2856807555267111,\n\t\t\t\t\"gap\": 8.475624888146339\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"O1idM-kuAeNhDs3rPgyde\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -116,\n\t\t\t\"y\": -46.0234375,\n\t\t\t\"width\": 103,\n\t\t\t\"height\": 35,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1801169109,\n\t\t\t\"version\": 31,\n\t\t\t\"versionNonce\": 1480312021,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t103,\n\t\t\t\t\t35\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": -0.12170886225855991,\n\t\t\t\t\"gap\": 8.955853692699293\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3LlkBmP-Drd36qXE16JVR\",\n\t\t\t\t\"focus\": -0.008704304881624901,\n\t\t\t\t\"gap\": 11.361078492183506\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"TK-njnvA3XvoshAeHMn2W\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": 35,\n\t\t\t\"y\": -12.0234375,\n\t\t\t\"width\": 24,\n\t\t\t\"height\": 8,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 79472731,\n\t\t\t\"version\": 26,\n\t\t\t\"versionNonce\": 770662139,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24,\n\t\t\t\t\t-8\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"3LlkBmP-Drd36qXE16JVR\",\n\t\t\t\t\"focus\": -0.09789773865596983,\n\t\t\t\t\"gap\": 10.309908448728937\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"nV2LjY3AMtRMepSzEM5VK\",\n\t\t\t\t\"focus\": -0.016094891625023953,\n\t\t\t\t\"gap\": 7.209095369565741\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"UiDr-1k0KB4d9U3ptr-JP\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -130,\n\t\t\t\"y\": -27.0234375,\n\t\t\t\"width\": 40,\n\t\t\t\"height\": 55,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 546153595,\n\t\t\t\"version\": 41,\n\t\t\t\"versionNonce\": 1920361013,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t55\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": 0.02058600941862662,\n\t\t\t\t\"gap\": 8.015148038438362\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"D0L3yrxGgmOz7twHb3hjy\",\n\t\t\t\t\"focus\": 0.03998579020328832,\n\t\t\t\t\"gap\": 11.153801027313968\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"m3rT-KDD0ssghJ1sZdXJM\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -76.30954682873069,\n\t\t\t\"y\": 70.02305686308284,\n\t\t\t\"width\": 1.9134756164915103,\n\t\t\t\"height\": 32.92895034973071,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1630349365,\n\t\t\t\"version\": 66,\n\t\t\t\"versionNonce\": 1614792603,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.9134756164915103,\n\t\t\t\t\t32.92895034973071\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"D0L3yrxGgmOz7twHb3hjy\",\n\t\t\t\t\"focus\": -0.010510202251304761,\n\t\t\t\t\"gap\": 6.07311991178301\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"8bxRgVM1j8ISYqGSKccrO\",\n\t\t\t\t\"focus\": -0.035769104539474135,\n\t\t\t\t\"gap\": 7.258349456503494\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 335,\n\t\t\t\"versionNonce\": 567127387,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"i7ZZrJiyFeYu8_PbfVq2W\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 23.35203694347625,\n\t\t\t\"y\": -119.99373452970298,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 728150939,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 331,\n\t\t\t\"versionNonce\": 1832036821,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"IWjYC2bC1Hfs_HXbctv70\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 50.869617320510045,\n\t\t\t\"y\": -92.27850193926668,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 709109653,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 358,\n\t\t\t\"versionNonce\": 872761851,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"fYdAt0BESie8IXBNgqchw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 39.779132012926596,\n\t\t\t\"y\": -53.83148620631073,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.778345736013705,\n\t\t\t\"height\": 21.778345736013705,\n\t\t\t\"seed\": 690194491,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1666801773765,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"SzHkIoC9\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -337,\n\t\t\t\"y\": -36.0234375,\n\t\t\t\"width\": 12,\n\t\t\t\"height\": 25,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1238939611,\n\t\t\t\"version\": 6,\n\t\t\t\"versionNonce\": 1543153627,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"\",\n\t\t\t\"rawText\": \"\",\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 18,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"qIn8Jby8\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -262,\n\t\t\t\"y\": -74.0234375,\n\t\t\t\"width\": 18,\n\t\t\t\"height\": 34,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 217906011,\n\t\t\t\"version\": 56,\n\t\t\t\"versionNonce\": 1135539323,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"P\",\n\t\t\t\"rawText\": \"P\",\n\t\t\t\"fontSize\": 28,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 27,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"P\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"xHliMfbXE_RNXRXR0YB8h\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -239,\n\t\t\t\"y\": -56.0234375,\n\t\t\t\"width\": 61,\n\t\t\t\"height\": 3,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1632427477,\n\t\t\t\"version\": 38,\n\t\t\t\"versionNonce\": 1246028981,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773766,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t3\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"xhd1Xqde\",\n\t\t\t\t\"focus\": 0.012218045112781956,\n\t\t\t\t\"gap\": 7\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"QA1LwsFUvyft0guz29azQ\",\n\t\t\t\t\"focus\": -0.09693202615425911,\n\t\t\t\t\"gap\": 4.017236257093817\n\t\t\t},\n\t\t\t\"startArrowhead\": \"triangle\",\n\t\t\t\"endArrowhead\": \"arrow\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"iasmhtPMiLpOipMUGP6g9\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -22,\n\t\t\t\"y\": 70.9765625,\n\t\t\t\"width\": 9,\n\t\t\t\"height\": 23,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1450776949,\n\t\t\t\"version\": 18,\n\t\t\t\"versionNonce\": 439767957,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773767,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9,\n\t\t\t\t\t23\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"3kqkv4LDKZN_S8BLUv1wE\",\n\t\t\t\t\"focus\": 1.3854372980370855,\n\t\t\t\t\"gap\": 7.872371917643669\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3vgPfcIEMzKn6BNyJWQp3\",\n\t\t\t\t\"focus\": -1.1623414743244975,\n\t\t\t\t\"gap\": 9.175625204971162\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"uV56wadk82th9y43KdN0V\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": -7,\n\t\t\t\"y\": 98.9765625,\n\t\t\t\"width\": 6,\n\t\t\t\"height\": 16,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1855995349,\n\t\t\t\"version\": 21,\n\t\t\t\"versionNonce\": 914584123,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1666801773468,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t-16\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"3vgPfcIEMzKn6BNyJWQp3\",\n\t\t\t\t\"focus\": 1.0830206542285465,\n\t\t\t\t\"gap\": 11.893486407172837\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3kqkv4LDKZN_S8BLUv1wE\",\n\t\t\t\t\"focus\": -0.7928139495870815,\n\t\t\t\t\"gap\": 6.244922108915031\n\t\t\t},\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"triangle\"\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 0,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 3,\n\t\t\"currentItemFontSize\": 28,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStrokeSharpness\": \"sharp\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"triangle\",\n\t\t\"currentItemLinearStrokeSharpness\": \"sharp\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2022-10-27T22:10:52.519925869Z","tags":null}}