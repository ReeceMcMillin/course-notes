<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reece McMillin | Notes on</title><link>https://reecemcmillin.github.io/quartz/</link><description>Recent content in Reece McMillin | Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://reecemcmillin.github.io/quartz/index.xml" rel="self" type="application/rss+xml"/><item><title>2022-10-26</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</guid><description>Recap Dangling References [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Tombstones | Tombstones]] ( Wikipedia) [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types]] Rather than pointing directly to a value, we use [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Locks and Keys | Locks and Keys]] ( Wikipedia) Handy if we&amp;rsquo;re only ever allocating pointers on the heap, otherwise not so much [[CS441 - Programming Languages/8 - Composite Types/Garbage Collection]]</description></item><item><title>2022-10-26</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Lectures/2022-10-26/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Lectures/2022-10-26/</guid><description>Independence $$ P(A \wedge B) = P(A) \cdot P(B) $$ $$ \begin{align*} P(A \mid B) &amp;amp;= P(A)\ P(B \mid A) &amp;amp;= P(B) \end{align*} $$</description></item><item><title>Garbage Collection</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Garbage-Collection/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Garbage-Collection/</guid><description>Part of [[CS441 - Programming Languages/8 - Composite Types]].
Reference Counting Idea: keep a count of references pointing to objects in memory, deallocate the memory once that count reaches 0.</description></item><item><title>AC-3</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Constraint-Satisfaction-Problems/AC-3/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Constraint-Satisfaction-Problems/AC-3/</guid><description/></item><item><title>Agents</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Agents/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Agents/</guid><description>Independent programs/systems that each specialize in small tasks Focus: what can be done?
Goals How does an agent perceive its environment?</description></item><item><title>Akra-Bazzi Theorem</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Akra-Bazzi-Theorem/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Akra-Bazzi-Theorem/</guid><description>Overview The Akra-Bazzi Theorem is a generalized version of the [[CS404 - Algorithms/Divide and Conquer/Master Theorem]] for solving recurrence relations.</description></item><item><title>Arrays</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Arrays/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Arrays/</guid><description>Overview Arrays are the most common composite type, go back to Fortran I. Idea: map a discrete index type to a component or element type.</description></item><item><title>Bayes' Theorem</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Bayes-Theorem/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Bayes-Theorem/</guid><description>$$P(a \mid b) = \frac{P(a \wedge b)}{P(b)}$$ This is super cool if variables are discrete, but what about continuous variables?</description></item><item><title>Cobol</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Languages/Cobol/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Languages/Cobol/</guid><description/></item><item><title>Composite Types</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Composite-Types/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Composite-Types/</guid><description>[!attention]
This is covered in significantly more detail in [[CS441 - Programming Languages/8 - Composite Types/Composite Types - Overview]]</description></item><item><title>Concept Maps</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Concept-Maps/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Concept-Maps/</guid><description>Extension of [[Semantic Networks.md]]
Key idea: show relationships between entities, tracing backwards/forwards to show how you arrived at a certain concept</description></item><item><title>CS404 - Algorithms</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Overview/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Overview/</guid><description>This is a standard course on the basics of algorithm design and analysis.</description></item><item><title>CS441 - Programming Languages</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Overview/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Overview/</guid><description/></item><item><title>Definitions</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Definitions/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Definitions/</guid><description>1 - Introduction scanner lexer parser lexical analysis semantic analysis parse tree syntax tree static semantics dynamic semantics 2 - Syntax regular expression Kleene closure terminal nonterminal BNF metasymbol production sentential form syntax analysis token keyword reserved word LL(n) LR(n) predictive parser bottom-up parser shift-reduce parser recursive descent parser epsilon production 3 - Names, Scopes, and Binding binding time referencing environment compile-time constant elaboration-time constant prologue/epilogue stack frame frame pointer displacement addressing heap fragmentation free list buddy system Fibonacci heap scope forward reference inheritance aliases 4 - Semantic Analysis unsafe optimization speculative optimization conservative compiler optimistic compiler attribute grammar test semantic function S-attributed grammar L-attributed grammar well-defined attribute grammar</description></item><item><title>Divide and Conquer</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Ideas/Divide-and-Conquer/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Ideas/Divide-and-Conquer/</guid><description/></item><item><title>Enumeration Types</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Enumeration-Types/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Enumeration-Types/</guid><description>Introduced in [[CS441 - Programming Languages/Languages/Pascal]]</description></item><item><title>ENV110 - Understanding the Earth</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Overview/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Overview/</guid><description/></item><item><title>Frames</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Frames/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Frames/</guid><description>Extension of [[Object Orientation.md]]
Frames are an artificial intelligence data structure used to divide knowledge into substructures by representing &amp;ldquo;stereotyped situations&amp;rdquo;.</description></item><item><title>Fuzzy Logic</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Fuzzy-Logic/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Fuzzy-Logic/</guid><description>Fuzzy Sets Crisp set: ${0, 1}$ Fuzzy set: ${0, \dots, 1}$
With a crisp set, we choose a strict cutoff value and make no accomodations.</description></item><item><title>Genetic Algorithms</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Stochastic-Search/Genetic-Algorithms/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Stochastic-Search/Genetic-Algorithms/</guid><description>Steps Initial population Randomly generate some initial population.
Selection There are a number of ways to handle selection, but the idea is to pick the parents of the next generation according to some fitness function.</description></item><item><title>Global Atmosphere Circulation</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Global-Atmosphere-Circulation/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Global-Atmosphere-Circulation/</guid><description>Wind Primary Circulation: general global circulation Secondary Circulation: related to migratory high-/low-pressure systems Tertiary Circulation: local winds, temporal weather patterns</description></item><item><title>Logic</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Logic/Logic/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Logic/Logic/</guid><description>Types [[Predicate Logic.md]] Other Logics Everything we&amp;rsquo;ve seen so far is [[Monotonic.md]]: once it&amp;rsquo;s in the knowledge base, it can&amp;rsquo;t be removed</description></item><item><title>Master Theorem</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Master-Theorem/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Master-Theorem/</guid><description>Note: the [[CS404 - Algorithms/Divide and Conquer/Akra-Bazzi Theorem]] generalizes this strategy.</description></item><item><title>Merge Sort</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Merge-Sort/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Merge-Sort/</guid><description>Merge Sort uses [[CS404 - Algorithms/Ideas/Divide and Conquer]] to sort arrays.
At each step, the original array is divided into two halves.</description></item><item><title>Midterm Review</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Midterm-Review/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Midterm-Review/</guid><description>Chapter 8 Know how to calculate array bounds Lots of garbage-collector stuff! Know how specific methods work Tombstone Locks and Keys</description></item><item><title>Monsoons</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Monsoons/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Monsoons/</guid><description>Monsoon: seasonal shifting winds that determines precipitation, due to heat capacity difference between land and sea
Remember: water has a higher heat capacity, less dramatic changes Summer warm humind winds blowing from ocean convective lifting over mountain barrier causes precipitation Continental low pressure, oceanic high pressure Winter Dry cool winds blowing seaward from continent Strong center of high pressure over continents Continental high pressure, oceanic low pressure</description></item><item><title>Monte Carlo Tree Search</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Adversarial-Search/Monte-Carlo-Tree-Search/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Adversarial-Search/Monte-Carlo-Tree-Search/</guid><description>Steps Selection Expansion Simulation Back-Propagation</description></item><item><title>Normalization</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Stochastic-Search/Normalization/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Stochastic-Search/Normalization/</guid><description>Types of Normalization L1 $$\frac{x_i}{\sum{x_i}}$$
L2 $$\frac{x^2_i}{\sum{x^2_i}}$$
[!NOTE] Note In general, $L_k$ normalization involves $x^k$
Softmax $$\frac{e^{x_i}}{\sum{x_i}}$$</description></item><item><title>Object Orientation</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Object-Orientation/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Object-Orientation/</guid><description>Key Ideas Inheritance Encapsulation Polymorphism Separate interface/implementation Languages Simula 67 Smalltalk</description></item><item><title>Pascal</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Languages/Pascal/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Languages/Pascal/</guid><description/></item><item><title>PL-I</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Languages/PL-I/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Languages/PL-I/</guid><description/></item><item><title>Pointers and Recursive Types</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Pointers-and-Recursive-Types/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Pointers-and-Recursive-Types/</guid><description>Records of some type $T$ can easily contain a reference to another record of $T$.
Reference model? No big deal, variables are already references Value model?</description></item><item><title>Predicate Logic</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Logic/Predicate-Logic/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Logic/Predicate-Logic/</guid><description>Overview Predicate logic allows us to make statements about categories
Features Arity: Arity 0: $win()$ Arity 1: $Student(\text{Bill})$ Arity 2: $Parent(\text{John}, \text{Martha})$ Also allows us to use existential ($\exists$) and universal ($\forall$) quantifiers All aliens drive flying saucers $\forall{x}: \text{Alien}(x) \implies \text{DrivesSaucer}(x)$ How would we prove $\neg{(\forall{x}: \text{Alien}(x) \implies \text{DrivesSaucer}(x)})$?</description></item><item><title>Probability</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Probability/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Probability/</guid><description>Where does uncertainty come from?
Partial observability Nondeterminism Both? eventually the last proton will decay
brian hare We could track some sort of belief state - out of every possible state, which one might we be in?</description></item><item><title>Production Systems</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Production-Systems/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Production-Systems/</guid><description>Idea: if-then rules Production systems require:
control system (rules interpreter) database</description></item><item><title>Propositional Logic</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Logic/Propositional-Logic/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Logic/Propositional-Logic/</guid><description/></item><item><title>Questions</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Questions/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Questions/</guid><description>What causes the wind to flow from east to west instead of pole to equator Rotation of the earth Are Polar Cells thermally direct or thermally indirect?</description></item><item><title>Quicksort</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Quicksort/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Algorithms/Quicksort/</guid><description>Overview Best Case: $O(n \lg{n})$ Average Case: $O(n \lg n)$ Worst Case: $O(n^2)$ Quicksort divides an array into subarrays by selecting a pivot element using [[CS404 - Algorithms/Ideas/Divide and Conquer]].</description></item><item><title>Quiz #3</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Quiz-#3/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Quiz-#3/</guid><description/></item><item><title>Recursion Tree Method</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Recursion-Tree-Method/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Recursion-Tree-Method/</guid><description/></item><item><title>Scripts</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Scripts/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Scripts/</guid><description>Idea Extension of [[Frames.md]]
adds information about sequences of events and planning Key concept: conceptual dependency #key-concept
Classify relations between objects and properties Scripts can be arranged hierarchically and used in [[Production Systems.</description></item><item><title>Semantic Networks</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Semantic-Networks/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Knowledge-Representation/Semantic-Networks/</guid><description>Semantics: meaning
Key idea: Model relationships between concepts, ideas, objects, events, or situations.</description></item><item><title>Sets</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Sets/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Sets/</guid><description>A set is an unordered collection of distinct values, usually of the same type.</description></item><item><title>Simulated Annealing</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Stochastic-Search/Simulated-Annealing/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Stochastic-Search/Simulated-Annealing/</guid><description/></item><item><title>Stable (Sorting)</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Ideas/Stable-Sorting/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Ideas/Stable-Sorting/</guid><description>A stable sort preserves the existing relative order between equal items.</description></item><item><title>Strings</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Strings/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Strings/</guid><description> Some languages just view strings as arrays of characters Others provide features like substring extraction &amp;amp; pattern matching with regular expressions</description></item><item><title>Subrange Types</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Subrange-Types/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Subrange-Types/</guid><description>Introduced in [[CS441 - Programming Languages/Languages/Pascal]] A subrange is a contiguous subset of the values of some discete base type (the parent)</description></item><item><title>Substitution Method</title><link>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Substitution-Method/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS404-Algorithms/Divide-and-Conquer/Substitution-Method/</guid><description/></item><item><title>Summary</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Summary/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Summary/</guid><description> Trade Winds (easterly) Converge toward equatorial low pressure from regions of subtropical high pressure Warm, moist, rising air Westerlies Generated in subtropics Clockwise rotation Cool, dry, descending air Predominant surface wind pattern for the mid-latitudes (us) Polar Easterlies Generated at the poles; predominant surface wind pattern Polar easterlies, air mass conflict with Westerlies, source of winter storms</description></item><item><title>Topics</title><link>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Topics/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/ENV110-Environmental-Science/Chapter-5/Topics/</guid><description>Thermal (In)Directness Thermally Direct: rising branches over warm temperature zones
Hadley Cells Polar Cells Ferrel Cell</description></item><item><title>Translation Schemes</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/4-Semantic-Analysis/Translation-Schemes/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/4-Semantic-Analysis/Translation-Schemes/</guid><description>General Categories Oblivious: exploits no special knowledge of the parse tree or attribute grammar. Dynamic: tails attribute evaluation order to the structure of a given parse tree.</description></item><item><title>Type Conversions &amp; Casts</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Type-Conversions-Casts/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Type-Conversions-Casts/</guid><description>3 situations
Types have the same internal structure Types have different ranges of values, but there&amp;rsquo;s some overlap Internal representation is different, blue values overlap in some way.</description></item><item><title>Type Equivalence</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Type-Equivalence/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/7-Type-Systems/Type-Equivalence/</guid><description>How do we determine if two things are the same type?
Structural Equivalence: two types have the same components put together the same way.</description></item><item><title>Uncertainty</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Uncertainty/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Uncertainty/Uncertainty/</guid><description> https://www.tylervigen.com/spurious-correlations
How do we figure out whether something is a causal connection or just coincidence?
Subsections [[CS461 - Artificial Intelligence/Uncertainty/Fuzzy Logic]] [[CS461 - Artificial Intelligence/Uncertainty/Probability]]</description></item><item><title/><link>https://reecemcmillin.github.io/quartz/Excalidraw/Drawing-2022-10-26-11.23.45.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/Excalidraw/Drawing-2022-10-26-11.23.45.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements P ^xhd1Xqde
%%
Drawing{ &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://excalidraw.</description></item><item><title>CS461 - Introduction to Artificial Intelligence</title><link>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS461-Artificial-Intelligence/Overview/</guid><description/></item></channel></rss>