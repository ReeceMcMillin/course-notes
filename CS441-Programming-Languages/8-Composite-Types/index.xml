<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>8 - Composite Types on</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/</link><description>Recent content in 8 - Composite Types on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/index.xml" rel="self" type="application/rss+xml"/><item><title>List</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/List/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/List/</guid><description>In garbage collected languages, list elements typically have to be the same type.
Two pointers:
data next node in list</description></item><item><title>Garbage Collection</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Garbage-Collection/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Garbage-Collection/</guid><description>Reference Counting Idea: keep a count of references pointing to objects in memory, deallocate the memory once that count reaches 0.</description></item><item><title>Arrays</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Arrays/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Arrays/</guid><description>Overview Arrays are the most common composite type, go back to Fortran I. Idea: map a discrete index type to a component or element type.</description></item><item><title>Pointers and Recursive Types</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Pointers-and-Recursive-Types/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Pointers-and-Recursive-Types/</guid><description>Records of some type $T$ can easily contain a reference to another record of $T$.
Reference model? No big deal, variables are already references Value model?</description></item><item><title>Sets</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Sets/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Sets/</guid><description>A set is an unordered collection of distinct values, usually of the same type.</description></item><item><title>Strings</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Strings/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Strings/</guid><description> Some languages just view strings as arrays of characters Others provide features like substring extraction &amp;amp; pattern matching with regular expressions</description></item><item><title>8 - Composite Types (Overview)</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/8-Composite-Types/Overview/</guid><description/></item></channel></rss>