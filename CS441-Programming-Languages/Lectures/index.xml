<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lectures on</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/</link><description>Recent content in Lectures on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/index.xml" rel="self" type="application/rss+xml"/><item><title>2022-11-28</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-28/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-28/</guid><description>Logistics Wiki project leave 5 questions on at least 3 different languages answer all questions on your language Discussion: C Is Not a Low-Level Language A programming language is low-level when you have to pay attention to the irrelevant.</description></item><item><title>2022-11-18</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-18/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-18/</guid><description>Early Reply Thread Implementation At one extreme, every thread could get its own process. At the other, we could multiplex all of a program&amp;rsquo;s threads on top of a single process.</description></item><item><title>2022-11-16</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-16/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-16/</guid><description>Concurrency Without threads, a program (such as a web browser) must either adopt a sequential approach or centralize the problem of delay-inducing events in a single dispatch loop.</description></item><item><title>2022-11-14</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-14/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-14/</guid><description> [!NOTE] NOTE
This lecture is in Goodnotes.</description></item><item><title>2022-11-09</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-09/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-09/</guid><description>Review for Midterm 2 [[CS441 - Programming Languages/Midterm 2 Review|Main midterm review page here]]
Garbage Collection Lock and Key Each heap object gets a numeric key that is stored with the object Each pointer becomes a (key, address) pair.</description></item><item><title>2022-11-07</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-07/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-07/</guid><description>Continuing [[CS441 - Programming Languages/10 - Data Abstraction and Object Orientation/Object Orientation]]
Encapsulation &amp;amp; Inheritance [[CS441 - Programming Languages/Languages/Euclid]] and [[CS441 - Programming Languages/Languages/ML]] introduced module types whose implementation resembles a record.</description></item><item><title>2022-11-04</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-04/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-04/</guid><description>Logistics Exam
Know each different method of garbage collection and how it works Know what conservative compiler means Chapter 9 (cont.</description></item><item><title>2022-11-02</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-02/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-11-02/</guid><description>Recap Call by sharing12 - very similar to pass by reference
Differences are subtle Lecture Closures as Parameters Closure: a reference to a subroutine together with its referencing environment that can be passed as a parameter.</description></item><item><title>2022-10-31</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-31/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-31/</guid><description>Logistics [[CS441 - Programming Languages/Wiki Project/Wiki Project - SQL]] Page now editable, link at above page Exam will go through Chapter 8 Chapter 9 [[CS441 - Programming Languages/9 - Subroutines and Control Abstraction/_index|Main Link]]</description></item><item><title>2022-10-28</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-28/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-28/</guid><description>Logistics Overview of [[CS441 - Programming Languages/Wiki Project/Wiki Project - SQL]] Need to set an exam date soon Chapters 6 and 7 are fair game for quizzes Definitely some garbage collection material on exam 2 Lecture Garbage Collection Mark and Sweep Mark everything as garbage Walk the heap, anything we reach is not garbage (clear the mark) All garbage blocks get moved to the free list Problem: doesn&amp;rsquo;t address fragmentation Solution: Stop &amp;amp; Copy Stop and Copy similar to mark and sweep, but as we find reachable (live) memory, we copy it down to the region of the stack to build a non-fragmented region of live heap memory.</description></item><item><title>2022-10-26</title><link>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://reecemcmillin.github.io/quartz/CS441-Programming-Languages/Lectures/2022-10-26/</guid><description>Recap Dangling References [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Tombstones | Tombstones]] ( Wikipedia) [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types]] Rather than pointing directly to a value, we use [[CS441 - Programming Languages/8 - Composite Types/Pointers and Recursive Types#Locks and Keys | Locks and Keys]] ( Wikipedia) Handy if we&amp;rsquo;re only ever allocating pointers on the heap, otherwise not so much [[CS441 - Programming Languages/8 - Composite Types/Garbage Collection]]</description></item></channel></rss>